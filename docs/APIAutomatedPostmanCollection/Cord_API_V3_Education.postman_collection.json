{
	"info": {
		"_postman_id": "10d8e6fe-0c06-4d55-be13-ed16e5f062f9",
		"name": "Cord_API_V3_Education",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Pre-req ( Session + Register + Login ) for Education",
			"item": [
				{
					"name": "Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"pm.globals.set(\"token\", response.data.session.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Write your query or mutation here\r\nquery {\r\n  session(browser: false) {\r\n    user {\r\n      id,\r\n      email\r\n      {\r\n        value\r\n      }\r\n      realFirstName\r\n      {\r\n        value\r\n      }\r\n      createdAt\r\n      displayLastName\r\n      {\r\n         value\r\n      }\r\n      \r\n      \r\n      \r\n    },\r\n    token\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// This is safe check to prevent failing futher cases If the Root User is already Created\r",
									"if (jsonData.errors) {\r",
									"    if (jsonData.errors.length) return;\r",
									"}\r",
									"\r",
									"//Saving data for future use\r",
									"var id = jsonData.data.register.user.id;\r",
									"pm.globals.set(\"userid\", id);\r",
									"\r",
									"var user = JSON.stringify(jsonData.data.register.user);\r",
									"pm.globals.set(\"user_data\", user);\r",
									"\r",
									"var email = jsonData.data.register.user.email.value;\r",
									"pm.globals.set(\"email\", email);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"realFirstName\", \"FirstName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"realLastName\", \"LastName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"email\", \"email\" + moment().format(\"DDMYYYYhhmmss\") + \"@test.com\");\r",
									"pm.globals.set(\"password\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"displayFirstName\", \"DisplayFirstName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"displayLastName\", \"DisplayLastName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"phone\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));\r",
									"\r",
									"var timezoneObject = {\r",
									"    \"name\": \"Europe/Andorra\",\r",
									"    \"lat\": 42.5,\r",
									"    \"long\": 1.5167,\r",
									"    \"countries\": [\r",
									"        {\r",
									"            \"code\": \"AD\",\r",
									"            \"name\": \"Andorra\",\r",
									"            \"zones\": [\r",
									"                {\r",
									"                    \"name\": \"Europe/Andorra\",\r",
									"                    \"lat\": 42.5,\r",
									"                    \"long\": 1.5167,\r",
									"                    \"countries\": [\r",
									"                        {\r",
									"                            \"code\": \"AD\",\r",
									"                            \"name\": \"Andorra\"\r",
									"                        }\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"};\r",
									"pm.globals.set('timezoneObject', JSON.stringify(timezoneObject));\r",
									"pm.globals.set(\"timezone\", timezoneObject.name);\r",
									"\r",
									"pm.globals.set(\"about\", \"I'm Tester\");\r",
									"\r",
									"pm.globals.set(\"userTitle\", \"Tester\");\r",
									"\r",
									"// Taking random value for the User status from pre-defined possible values\r",
									"var userStatusArray = ['Active','Disabled'];\r",
									"var randomNumber = Math.floor(Math.random()*userStatusArray.length);\r",
									"// pm.globals.set('userStatus', userStatusArray[randomNumber]);\r",
									"pm.globals.set(\"userStatus\", \"Active\");\r",
									"\r",
									"pm.globals.set(\"userRoles\", \"ProjectManager\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation register($input: RegisterInput!) {\r\n  register(input: $input) {\r\n    powers\r\n    user {\r\n      id\r\n      fullName\r\n      firstName\r\n      avatarLetters\r\n      createdAt\r\n      canDelete\r\n      email {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      phone {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      about {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      status {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      roles {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      title {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      timezone {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          name\r\n          lat\r\n          long\r\n          countries {\r\n            code\r\n            name\r\n            zones {\r\n              name\r\n              lat\r\n              long\r\n              countries {\r\n                code\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      unavailabilities {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n         # canDelete\r\n          description {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          start\r\n          end\r\n        }\r\n      }\r\n      organizations {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          avatarLetters\r\n          name {\r\n            value\r\n            canRead\r\n            canEdit\r\n          }\r\n          address {\r\n            value\r\n            canRead\r\n            canEdit\r\n          }\r\n          locations {\r\n            total\r\n            hasMore\r\n            canRead\r\n            canCreate\r\n            items {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              name {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              type {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n\r\n              isoAlpha3 {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              fundingAccount {\r\n                value {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  accountNumber {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n                canEdit\r\n                canRead\r\n              }\r\n              isoCountry {\r\n                country\r\n                alpha2\r\n                alpha3\r\n                numeric\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      partners {\r\n        total\r\n        hasMore\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          modifiedAt\r\n          types {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          financialReportingTypes {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          pmcEntityCode {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          globalInnovationsClient {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          active {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          address {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          organization {\r\n            value {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              avatarLetters\r\n              name {\r\n                value\r\n                canRead\r\n                canEdit\r\n              }\r\n              address {\r\n                value\r\n                canRead\r\n                canEdit\r\n              }\r\n              locations {\r\n                total\r\n                hasMore\r\n                canRead\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  type {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n\r\n                  isoAlpha3 {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  fundingAccount {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      accountNumber {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoCountry {\r\n                    country\r\n                    alpha2\r\n                    alpha3\r\n                    numeric\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            canEdit\r\n            canRead\r\n          }\r\n          pointOfContact {\r\n            value {\r\n              id\r\n              fullName\r\n              firstName\r\n              avatarLetters\r\n              createdAt\r\n              email {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              realFirstName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              realLastName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              displayFirstName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              displayLastName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              phone {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              about {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              status {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              title {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              roles {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              timezone {\r\n                canRead\r\n                canEdit\r\n                value {\r\n                  name\r\n                  lat\r\n                  long\r\n                  countries {\r\n                    code\r\n                    name\r\n                    zones {\r\n                      name\r\n                      lat\r\n                      long\r\n                      countries {\r\n                        code\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              unavailabilities {\r\n                total\r\n                hasMore\r\n                canCreate\r\n                canRead\r\n                items {\r\n                  id\r\n                  createdAt\r\n                 # canDelete\r\n                  start\r\n                  end\r\n                  description {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                }\r\n              }\r\n              organizations {\r\n                total\r\n                hasMore\r\n                canCreate\r\n                canRead\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  avatarLetters\r\n                  name {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                  address {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                  locations {\r\n                    total\r\n                    hasMore\r\n                    canRead\r\n                    canCreate\r\n                    items {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      type {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n\r\n                      isoAlpha3 {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      fundingAccount {\r\n                        value {\r\n                          id\r\n                          createdAt\r\n                          canDelete\r\n                          name {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          accountNumber {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                        }\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      isoCountry {\r\n                        country\r\n                        alpha2\r\n                        alpha3\r\n                        numeric\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              education {\r\n                canRead\r\n                total\r\n                hasMore\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  degree {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  major {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  institution {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n              }\r\n              partners {\r\n                canCreate\r\n                canRead\r\n                hasMore\r\n                total\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  modifiedAt\r\n                  types {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  financialReportingTypes {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  pmcEntityCode {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  globalInnovationsClient {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  active {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  address {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  organization {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      avatarLetters\r\n                      name {\r\n                        value\r\n                        canRead\r\n                        canEdit\r\n                      }\r\n                      address {\r\n                        value\r\n                        canRead\r\n                        canEdit\r\n                      }\r\n                      locations {\r\n                        total\r\n                        hasMore\r\n                        canRead\r\n                        canCreate\r\n                        items {\r\n                          id\r\n                          createdAt\r\n                          canDelete\r\n                          name {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          type {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n\r\n                          isoAlpha3 {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          fundingAccount {\r\n                            value {\r\n                              id\r\n                              createdAt\r\n                              canDelete\r\n                              name {\r\n                                value\r\n                                canEdit\r\n                                canRead\r\n                              }\r\n                              accountNumber {\r\n                                value\r\n                                canEdit\r\n                                canRead\r\n                              }\r\n                            }\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          isoCountry {\r\n                            country\r\n                            alpha2\r\n                            alpha3\r\n                            numeric\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  pointOfContact {\r\n                    canEdit\r\n                    canRead\r\n                    value {\r\n                      id\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              locations {\r\n                canRead\r\n                total\r\n                hasMore\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  type {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoAlpha3 {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoCountry {\r\n                    country\r\n                    alpha2\r\n                    alpha3\r\n                    numeric\r\n                  }\r\n                  fundingAccount {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      accountNumber {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n              }\r\n              knownLanguages {\r\n                proficiency\r\n                language {\r\n                  id\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      education {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          degree {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          major {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          institution {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n      }\r\n      locations {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          type {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          isoAlpha3 {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          isoCountry {\r\n            country\r\n            alpha2\r\n            alpha3\r\n            numeric\r\n          }\r\n          fundingAccount {\r\n            value {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              name {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              accountNumber {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n            }\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n      }\r\n      knownLanguages {\r\n        proficiency\r\n        language {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"realFirstName\": \"Piyush\",\r\n        \"realLastName\": \"Patel\",\r\n        \"email\": \"{{login_email}}\",\r\n        \"password\": \"{{login_password}}\",\r\n        \"displayFirstName\": \"{{displayFirstName}}\",\r\n        \"displayLastName\": \"{{displayLastName}}\",\r\n        \"phone\": \"{{phone}}\",\r\n        \"timezone\": \"{{timezone}}\",\r\n        \"status\": \"{{userStatus}}\",\r\n        \"title\": \"{{userTitle}}\",\r\n        \"about\": \"{{about}}\",\r\n        \"roles\": \"{{userRoles}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var id = jsonData.data.login.user.id;",
									"pm.globals.set(\"userid\", id);",
									"",
									"var email = jsonData.data.login.user.email.value;",
									"pm.globals.set(\"email\", email);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation login($input: LoginInput!) {\r\n  login(input: $input) {\r\n    powers\r\n    user {\r\n      id\r\n      fullName\r\n      firstName\r\n      avatarLetters\r\n      createdAt\r\n      canDelete\r\n      email {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      phone {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      about {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      status {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      roles {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      title {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      timezone {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          name\r\n          lat\r\n          long\r\n          countries {\r\n            code\r\n            name\r\n            zones {\r\n              name\r\n              lat\r\n              long\r\n              countries {\r\n                code\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      unavailabilities {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n         # canDelete\r\n          description {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          start\r\n          end\r\n        }\r\n      }\r\n      organizations {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          avatarLetters\r\n          name {\r\n            value\r\n            canRead\r\n            canEdit\r\n          }\r\n          address {\r\n            value\r\n            canRead\r\n            canEdit\r\n          }\r\n          locations {\r\n            total\r\n            hasMore\r\n            canRead\r\n            canCreate\r\n            items {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              name {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              type {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n\r\n              isoAlpha3 {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              fundingAccount {\r\n                value {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  accountNumber {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n                canEdit\r\n                canRead\r\n              }\r\n              isoCountry {\r\n                country\r\n                alpha2\r\n                alpha3\r\n                numeric\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      partners {\r\n        total\r\n        hasMore\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          modifiedAt\r\n          types {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          financialReportingTypes {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          pmcEntityCode {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          globalInnovationsClient {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          active {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          address {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          organization {\r\n            value {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              avatarLetters\r\n              name {\r\n                value\r\n                canRead\r\n                canEdit\r\n              }\r\n              address {\r\n                value\r\n                canRead\r\n                canEdit\r\n              }\r\n              locations {\r\n                total\r\n                hasMore\r\n                canRead\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  type {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n\r\n                  isoAlpha3 {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  fundingAccount {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      accountNumber {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoCountry {\r\n                    country\r\n                    alpha2\r\n                    alpha3\r\n                    numeric\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            canEdit\r\n            canRead\r\n          }\r\n          pointOfContact {\r\n            value {\r\n              id\r\n              fullName\r\n              firstName\r\n              avatarLetters\r\n              createdAt\r\n              email {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              realFirstName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              realLastName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              displayFirstName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              displayLastName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              phone {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              about {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              status {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              title {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              roles {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              timezone {\r\n                canRead\r\n                canEdit\r\n                value {\r\n                  name\r\n                  lat\r\n                  long\r\n                  countries {\r\n                    code\r\n                    name\r\n                    zones {\r\n                      name\r\n                      lat\r\n                      long\r\n                      countries {\r\n                        code\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              unavailabilities {\r\n                total\r\n                hasMore\r\n                canCreate\r\n                canRead\r\n                items {\r\n                  id\r\n                  createdAt\r\n                 # canDelete\r\n                  start\r\n                  end\r\n                  description {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                }\r\n              }\r\n              organizations {\r\n                total\r\n                hasMore\r\n                canCreate\r\n                canRead\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  avatarLetters\r\n                  name {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                  address {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                  locations {\r\n                    total\r\n                    hasMore\r\n                    canRead\r\n                    canCreate\r\n                    items {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      type {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n\r\n                      isoAlpha3 {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      fundingAccount {\r\n                        value {\r\n                          id\r\n                          createdAt\r\n                          canDelete\r\n                          name {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          accountNumber {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                        }\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      isoCountry {\r\n                        country\r\n                        alpha2\r\n                        alpha3\r\n                        numeric\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              education {\r\n                canRead\r\n                total\r\n                hasMore\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  degree {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  major {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  institution {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n              }\r\n              partners {\r\n                canCreate\r\n                canRead\r\n                hasMore\r\n                total\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  modifiedAt\r\n                  types {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  financialReportingTypes {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  pmcEntityCode {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  globalInnovationsClient {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  active {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  address {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  organization {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      avatarLetters\r\n                      name {\r\n                        value\r\n                        canRead\r\n                        canEdit\r\n                      }\r\n                      address {\r\n                        value\r\n                        canRead\r\n                        canEdit\r\n                      }\r\n                      locations {\r\n                        total\r\n                        hasMore\r\n                        canRead\r\n                        canCreate\r\n                        items {\r\n                          id\r\n                          createdAt\r\n                          canDelete\r\n                          name {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          type {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n\r\n                          isoAlpha3 {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          fundingAccount {\r\n                            value {\r\n                              id\r\n                              createdAt\r\n                              canDelete\r\n                              name {\r\n                                value\r\n                                canEdit\r\n                                canRead\r\n                              }\r\n                              accountNumber {\r\n                                value\r\n                                canEdit\r\n                                canRead\r\n                              }\r\n                            }\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          isoCountry {\r\n                            country\r\n                            alpha2\r\n                            alpha3\r\n                            numeric\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  pointOfContact {\r\n                    canEdit\r\n                    canRead\r\n                    value {\r\n                      id\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              locations {\r\n                canRead\r\n                total\r\n                hasMore\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  type {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoAlpha3 {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoCountry {\r\n                    country\r\n                    alpha2\r\n                    alpha3\r\n                    numeric\r\n                  }\r\n                  fundingAccount {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      accountNumber {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n              }\r\n              knownLanguages {\r\n                proficiency\r\n                language {\r\n                  id\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      education {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          degree {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          major {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          institution {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n      }\r\n      locations {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          type {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          isoAlpha3 {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          isoCountry {\r\n            country\r\n            alpha2\r\n            alpha3\r\n            numeric\r\n          }\r\n          fundingAccount {\r\n            value {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              name {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              accountNumber {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n            }\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n      }\r\n      knownLanguages {\r\n        proficiency\r\n        language {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n   \"input\": {\r\n      \"email\": \"{{login_email}}\",\r\n      \"password\": \"{{login_password}}\"\r\n   }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Education",
			"item": [
				{
					"name": "Create Education Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"const moment = require('moment');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.createEducation.education.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"",
									"    // Saving data for future use",
									"    pm.globals.set(\"educationid\", id);",
									"});",
									"",
									"// Saving whole Education Object to globals for future use",
									"var education = JSON.stringify(jsonData.data.createEducation.education);",
									"pm.globals.set(\"education_data\", education);",
									"",
									"pm.test(\"Verify that education's createdAt is in Specific time format\", function () {",
									"    var time = jsonData.data.createEducation.education.createdAt;",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();",
									"    pm.expect(isValidTime).to.eql(true);",
									"",
									"});",
									"",
									"pm.test(\"Verify that Created Education degree is same as requested\", function () {",
									"    var degree = jsonData.data.createEducation.education.degree.value;",
									"    pm.expect(degree).to.eql(pm.globals.get('educationDegree'));",
									"});",
									"",
									"pm.test(\"Verify that Created Education major is same as requested\", function () {",
									"    var major = jsonData.data.createEducation.education.major.value;",
									"    pm.expect(major).to.eql(pm.globals.get('educationMajor'));",
									"});",
									"",
									"pm.test(\"Verify that Created Education institution is same as requested\", function () {",
									"    var institution = jsonData.data.createEducation.education.institution.value;",
									"    pm.expect(institution).to.eql(pm.globals.get('educationInstitution'));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"var educationDegreeArray = [\r",
									"    'Primary',\r",
									"    'Secondary',\r",
									"    'Associates',\r",
									"    'Bachelors',\r",
									"    'Masters',\r",
									"    'Doctorate'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random() * educationDegreeArray.length);\r",
									"pm.globals.set('educationDegree', educationDegreeArray[randomNumber]);\r",
									"\r",
									"pm.globals.set('educationMajor', \"EducationMajor\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set('educationInstitution', \"EducationInstitution\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education\r\n    {\r\n      id\r\n      createdAt\r\n      canDelete\r\n      degree\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n  }",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Mandatory Field Blank - userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that education error message is correct\", function () {",
									"    var errors = jsonData.errors[0].extensions.errors['education.userId'].IsId;",
									"    pm.expect(errors).to.eql(\"Invalid ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Mandatory Field Removed - userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 10000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"userId\\\" of required type \\\"ID!\\\" was not provided\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql('INTERNAL_SERVER_ERROR');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Mandatory Field Blank - degree",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Degree\\\" enum.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\" : \"\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Mandatory Field Removed - degree",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"degree\\\" of required type \\\"Degree!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Mandatory Field Blank - major",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.createEducation.education.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that education major is null\", function () {",
									"    var major = jsonData.data.createEducation.education.major.value;",
									"    pm.expect(major).to.eql(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Mandatory Field Removed - major",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"major\\\" of required type \\\"String!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Mandatory Field Blank - institute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.createEducation.education.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that education institution is null\", function () {",
									"    var institution = jsonData.data.createEducation.education.institution.value;",
									"    pm.expect(institution).to.eql(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Mandatory Field Removed - institute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Field \\\"institution\\\" of required type \\\"String!\\\" was not provided\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Parameter Mismatch - userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Field \\\"userId\\\" of required type \\\"ID!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId1\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Parameter Mismatch - degree",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Field \\\"degree\\\" of required type \\\"Degree!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree1\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Parameter Mismatch - major",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Field \\\"major\\\" of required type \\\"String!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major1\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Parameter Mismatch - institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Field \\\"institution\\\" of required type \\\"String!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution1\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Parameter - Invalid -  userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that education error message is correct\", function () {",
									"    var errors = jsonData.errors[0].extensions.errors['education.userId'].IsId;  ",
									"    pm.expect(errors).to.eql(\"Invalid ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"!@#$%^&\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Parameter - Invalid -  degree",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Degree\\\" enum.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"!@#$%^\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get  Education By Id Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var education_data = JSON.parse(pm.variables.get(\"education_data\"));",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verifying education ID is not blank or null\", function () {",
									"    var id = jsonData.data.education.id;  ",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verifying Education degree\", function () {",
									"    var degree = jsonData.data.education.degree;",
									"    pm.expect(degree).to.eql(education_data.degree);",
									"});",
									"",
									"pm.test(\"Verifying Education major\", function () {",
									"    var major = jsonData.data.education.major;",
									"    pm.expect(major).to.eql(education_data.major);",
									"});",
									"",
									"pm.test(\"Verifying Education institution\", function () {",
									"    var institution = jsonData.data.education.institution;",
									"    pm.expect(institution).to.eql(education_data.institution);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query education($id: ID!) {\r\n  education(id: $id) {\r\n    id\r\n    createdAt\r\n    degree {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    major {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    institution {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"{{educationid}}\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Education By id Mandatory Field Blank - id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is 400\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that education error message is correct\", function () {",
									"    var error_education_message = jsonData.errors[0].extensions.errors.id.IsId;  ",
									"    pm.expect(error_education_message).to.eql(\"Invalid ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query education($id: ID!) {\r\n  education(id: $id) {\r\n    id\r\n    createdAt\r\n    degree {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    major {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    institution {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Education By id Mandatory Field Removed - id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 10000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql('INTERNAL_SERVER_ERROR');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query education($id: ID!) {\r\n  education(id: $id) {\r\n    id\r\n    createdAt\r\n    degree {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    major {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    institution {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get education  By id Parameter Mismatch - id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query education($id: ID!) {\r\n  education(id: $id) {\r\n    id\r\n    createdAt\r\n    degree {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    major {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    institution {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id1\": \"{{educationid}}\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Education By id Parameter Invalid - id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is 400\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that language error message is correct\", function () {",
									"    var error_language_message = jsonData.errors[0].extensions.errors.id.IsId;  ",
									"    pm.expect(error_language_message).to.eql(\"Invalid ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query education($id: ID!) {\r\n  education(id: $id) {\r\n    id\r\n    createdAt\r\n    degree {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    major {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    institution {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"???---+++***@#$%^\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var education_data = JSON.parse(pm.variables.get(\"education_data\"));",
									"const moment = require('moment');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.updateEducation.education.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that education's createdAt is in Specific time format\", function () {",
									"    var time = jsonData.data.updateEducation.education.createdAt;",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();",
									"    pm.expect(isValidTime).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify that updated education degree is same as requested\", function () {",
									"    var educationDegree = jsonData.data.updateEducation.education.degree.value;",
									"    pm.expect(educationDegree).to.eql(pm.globals.get('educationDegree'));",
									"});",
									"",
									"pm.test(\"Verify that updated education major is same as requested\", function () {",
									"    var educationMajor = jsonData.data.updateEducation.education.major.value;",
									"    pm.expect(educationMajor).to.eql(pm.globals.get('educationMajor'));",
									"});",
									"",
									"pm.test(\"Verify that updated education institution is same as requested\", function () {",
									"    var institution = jsonData.data.updateEducation.education.institution.value;",
									"    pm.expect(institution).to.eql(pm.globals.get('educationInstitution'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"var educationDegreeArray = [\r",
									"    'Primary',\r",
									"    'Secondary',\r",
									"    'Associates',\r",
									"    'Bachelors',\r",
									"    'Masters',\r",
									"    'Doctorate'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random() * educationDegreeArray.length);\r",
									"pm.globals.set('educationDegree', educationDegreeArray[randomNumber]);\r",
									"\r",
									"pm.globals.set('educationMajor', \"EducationMajor\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set('educationInstitution', \"EducationInstitution\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id\": \"{{educationid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Success - Only Required Inputs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.updateEducation.education.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that updated education degree is same as previous value\", function () {",
									"    var educationDegree = jsonData.data.updateEducation.education.degree.value;",
									"    pm.expect(educationDegree).to.eql(pm.globals.get('educationDegree'));",
									"});",
									"",
									"pm.test(\"Verify that updated education major is same as previous value\", function () {",
									"    var educationMajor = jsonData.data.updateEducation.education.major.value;",
									"    pm.expect(educationMajor).to.eql(pm.globals.get('educationMajor'));",
									"});",
									"",
									"pm.test(\"Verify that updated education institution is same as previous value\", function () {",
									"    var institution = jsonData.data.updateEducation.education.institution.value;",
									"    pm.expect(institution).to.eql(pm.globals.get('educationInstitution'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"education\": {\r\n            \"id\": \"{{educationid}}\"\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Mandatory Field Removed - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"id\\\" of required type \\\"ID!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Mandatory Field Blank - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_code = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_code).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that error languageId message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors['education.id'].IsId;",
									"    pm.expect(error_message).to.include(\"Invalid ID\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"id\": \"\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Not Mandatory Field Removed - degree",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.updateEducation.education.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that updated education degree is equal to previous value\", function () {",
									"    var degree = jsonData.data.updateEducation.education.degree.value;",
									"    pm.expect(degree).to.eql(pm.globals.get('educationDegree'));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"education\": {\r\n            \"id\": \"{{educationid}}\",\r\n            \"major\": \"{{educationMajor}}\",\r\n            \"institution\": \"{{educationInstitution}}\"\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Not Mandatory Field Blank- degree",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Degree\\\" enum.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id\": \"{{userid}}\",\r\n      \"degree\": \"\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Not Mandatory Field Removed - major",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that education ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateEducation.education.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated education major is equal to previous value\", function () {\r",
									"    var educationMajor = jsonData.data.updateEducation.education.major.value;\r",
									"    pm.expect(educationMajor).to.eql(pm.globals.get('educationMajor'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"var educationDegreeArray = [\r",
									"    'Primary',\r",
									"    'Secondary',\r",
									"    'Associates',\r",
									"    'Bachelors',\r",
									"    'Masters',\r",
									"    'Doctorate'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random() * educationDegreeArray.length);\r",
									"pm.globals.set('educationDegree', educationDegreeArray[randomNumber]);\r",
									"\r",
									"pm.globals.set('educationInstitution', \"EducationInstitution\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id\": \"{{educationid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Not Mandatory Field Blank - major",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that education ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateEducation.education.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated education major is null\", function () {\r",
									"    var educationMajor = jsonData.data.updateEducation.education.major.value;\r",
									"    pm.expect(educationMajor).to.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"var educationDegreeArray = [\r",
									"    'Primary',\r",
									"    'Secondary',\r",
									"    'Associates',\r",
									"    'Bachelors',\r",
									"    'Masters',\r",
									"    'Doctorate'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random() * educationDegreeArray.length);\r",
									"pm.globals.set('educationDegree', educationDegreeArray[randomNumber]);\r",
									"\r",
									"pm.globals.set('educationInstitution', \"EducationInstitution\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id\": \"{{educationid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Not Mandatory Field Removed - institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.updateEducation.education.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that updated education institution is equal to previous value\", function () {",
									"    var institution = jsonData.data.updateEducation.education.institution.value;",
									"    pm.expect(institution).to.eql(pm.globals.get('educationInstitution'));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"var educationDegreeArray = [\r",
									"    'Primary',\r",
									"    'Secondary',\r",
									"    'Associates',\r",
									"    'Bachelors',\r",
									"    'Masters',\r",
									"    'Doctorate'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random() * educationDegreeArray.length);\r",
									"pm.globals.set('educationDegree', educationDegreeArray[randomNumber]);\r",
									"\r",
									"pm.globals.set('educationMajor', \"EducationMajor\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"id\": \"{{educationid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Not Mandatory Field Blank- institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.updateEducation.education.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that updated education institution is null\", function () {",
									"    var institution = jsonData.data.updateEducation.education.institution.value;",
									"    pm.expect(institution).to.eql(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"var educationDegreeArray = [\r",
									"    'Primary',\r",
									"    'Secondary',\r",
									"    'Associates',\r",
									"    'Bachelors',\r",
									"    'Masters',\r",
									"    'Doctorate'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random() * educationDegreeArray.length);\r",
									"pm.globals.set('educationDegree', educationDegreeArray[randomNumber]);\r",
									"\r",
									"pm.globals.set('educationMajor', \"EducationMajor\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set('educationInstitution', \"EducationInstitution\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id\": \"{{educationid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Parameter Mismatch - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Field \\\"id\\\" of required type \\\"ID!\\\" was not provided\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id1\": \"{{educationid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{institution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Parameter Mismatch - Degree",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"UpdateEducation\\\". Did you mean \\\"degree\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id\": \"{{educationid}}\",\r\n      \"degree1\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{institution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Parameter Mismatch - Major",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"UpdateEducation\\\". Did you mean \\\"major\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id\": \"{{educationid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major1\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{institution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Parameter Mismatch - Institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"UpdateEducation\\\". Did you mean \\\"institution\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id\": \"{{educationid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution1\": \"{{institution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Parameter Invalid -  Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_code = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_code).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that error languageID message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors['education.id'].IsId;  ",
									"    pm.expect(error_message).to.include(\"Invalid ID\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id\": \"!@#$%^$$%\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{institution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Parameter Invalid -  Degree",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Degree\\\" enum.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id\": \"{{educationid}}\",\r\n      \"degree\": \"!@#$%^&\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{institution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Get Educ by Id ( Create Education)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var id = jsonData.data.createEducation.education.id;",
									"",
									"// Saving data for future use",
									"pm.globals.set(\"educationid\", id);",
									"",
									"// Saving whole Education Object to globals for future use",
									"var education = JSON.stringify(jsonData.data.createEducation.education);",
									"pm.globals.set(\"education_data\", education);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"var educationDegreeArray = [\r",
									"    'Primary',\r",
									"    'Secondary',\r",
									"    'Associates',\r",
									"    'Bachelors',\r",
									"    'Masters',\r",
									"    'Doctorate'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random() * educationDegreeArray.length);\r",
									"pm.globals.set('educationDegree', educationDegreeArray[randomNumber]);\r",
									"\r",
									"pm.globals.set('educationMajor', \"EducationMajor\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set('educationInstitution', \"EducationInstitution\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education\r\n    {\r\n      id\r\n      createdAt\r\n      degree\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n  }",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - Pagination",
									"pm.test(\"Verify that total is greater than Zero\", function () {",
									"    var total = jsonData.data.educations.total;",
									"    pm.expect(total).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Verify that hasMore is correct\", function () {",
									"    var total = jsonData.data.educations.total;",
									"    var hasMore = jsonData.data.educations.hasMore;",
									"    if (Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) < total) {",
									"        pm.expect(hasMore).to.eql(true);",
									"    } else {",
									"        pm.expect(hasMore).to.eql(false);",
									"    }",
									"});",
									"",
									"pm.test(\"Verify that number of items returned are exact\", function () {",
									"    var total = jsonData.data.educations.total;                  // total returned in response",
									"    var returneditems = jsonData.data.educations.items.length;   // no. of items returned in response array",
									"    var itemCount = Number(pm.globals.get('itemCount'));    // no. of items per page",
									"    var page = Number(pm.globals.get('page'));              // page number",
									"    var expectedItems = itemCount * page;                   // items we are expecting",
									"",
									"    if (expectedItems <= total) {",
									"        pm.expect(returneditems).to.eql(itemCount);",
									"    } else {",
									"        if ((expectedItems - total) < itemCount) {",
									"            var lastItems = total - ((itemCount * (page - 1)));   // items in last page",
									"            pm.expect(returneditems).to.eql(lastItems);",
									"        }",
									"    }",
									"});",
									"",
									"",
									"/**",
									" * Setting up 'page' number to be used in next request",
									" * For locating recently created Object position on Specific page",
									" */",
									"var total = jsonData.data.educations.total;",
									"var itemCount = Number(pm.globals.get('itemCount'));",
									"",
									"if (total > itemCount) {",
									"",
									"    if ((total % itemCount) == 0) {",
									"        var pageToset = total / itemCount;",
									"        pm.globals.set(\"page\", pageToset);",
									"    } else {",
									"        var pageToset = Math.floor(total / itemCount) + 1;",
									"        pm.globals.set(\"page\", pageToset);",
									"    }",
									"",
									"} else {",
									"    pm.globals.set(\"page\", 1);  // Set page to 1 if total <= itemCount",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Success - item Object",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var education_data = JSON.parse(pm.variables.get(\"education_data\")); // Get stored Education object",
									"var lodash = require('lodash');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - Pagination",
									"pm.test(\"Verify that total is greater than Zero\", function () {",
									"    var total = jsonData.data.educations.total;",
									"    pm.expect(total).to.be.above(0);",
									"});",
									"",
									"/**",
									" * Verifying recently created educations's information with Education object returned within items array",
									" */",
									"",
									"// get Education object first having same id as recently created Education's id",
									"var myEducation = lodash.find(jsonData.data.educations.items, ['id', education_data.id]);",
									"",
									"pm.test(\"Verify that recently created education ID is not blank or null\", function () {",
									"    var id = myEducation.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verifying recently created education's createdAt\", function () {",
									"    var createdAt = myEducation.createdAt;",
									"    pm.expect(createdAt).to.eql(education_data.createdAt);",
									"});",
									"",
									"pm.test(\"Verifying recently created education's id\", function () {",
									"    var id = myEducation.id;",
									"    pm.expect(id).to.eql(education_data.id);",
									"});",
									"",
									"pm.test(\"Verifying recently created education's degree\", function () {",
									"    var degree = myEducation.degree.value;",
									"    pm.expect(degree).to.eql(education_data.degree.value);",
									"});",
									"",
									"pm.test(\"Verifying recently created education's major\", function () {",
									"    var major = myEducation.major.value;",
									"    pm.expect(major).to.eql(education_data.major.value);",
									"});",
									"",
									"pm.test(\"Verifying recently created education's institution\", function () {",
									"    var institution = myEducation.institution.value;",
									"    pm.expect(institution).to.eql(education_data.institution.value);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"// Page is set from previous request test script based on total\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Success - total",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - total",
									"pm.test(\"Verify that total is greater than Zero\", function () {",
									"    var total = jsonData.data.educations.total;  ",
									"    pm.expect(total).to.be.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Success - hasMore - True",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - hasMore",
									"pm.test(\"Verify that hasMore is true Only when education items are still available\", function () {",
									"    var total = jsonData.data.educations.total;",
									"    var hasMore = jsonData.data.educations.hasMore;  ",
									"    if(Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) < total){",
									"        pm.expect(hasMore).to.eql(true);",
									"    } else {",
									"        pm.expect(hasMore).to.eql(false);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations  Success - hasMore - False",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - hasMore",
									"pm.test(\"Verify that hasMore is false Only when no more education items available\", function () {",
									"    var total = jsonData.data.educations.total;",
									"    var hasMore = jsonData.data.educations.hasMore;  ",
									"    if(Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) >= total){",
									"        pm.expect(hasMore).to.eql(false);",
									"    } else{",
									"        pm.expect(hasMore).to.eql(true);",
									"    }",
									"});",
									"",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.educations.items[0].id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Success - items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - no. of items are exact",
									"pm.test(\"Verify that number of items returned are exact\", function () {",
									"    var total = jsonData.data.educations.total;                  // total returned in response",
									"    var returneditems = jsonData.data.educations.items.length;   // no. of items returned in response array",
									"    var itemCount = Number(pm.globals.get('itemCount'));    // no. of items per page",
									"    var page = Number(pm.globals.get('page'));              // page number",
									"    var expectedItems = itemCount * page;                   // items we are expecting",
									"",
									"    if (expectedItems <= total) {",
									"        pm.expect(returneditems).to.eql(itemCount);",
									"    } else {",
									"        if ((expectedItems - total) < itemCount) {",
									"            var lastItems = total - ((itemCount * (page - 1)));   // items in last page",
									"            pm.expect(returneditems).to.eql(lastItems);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Sort Edu by Institution ( Create Education)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var id = jsonData.data.createEducation.education.id;",
									"",
									"// Saving data for future use",
									"pm.globals.set(\"educationid\", id);",
									"",
									"// Saving whole Education Object to globals for future use",
									"var education = JSON.stringify(jsonData.data.createEducation.education);",
									"pm.globals.set(\"education_data\", education);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"var educationDegreeArray = [\r",
									"    'Primary',\r",
									"    'Secondary',\r",
									"    'Associates',\r",
									"    'Bachelors',\r",
									"    'Masters',\r",
									"    'Doctorate'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random() * educationDegreeArray.length);\r",
									"pm.globals.set('educationDegree', educationDegreeArray[randomNumber]);\r",
									"\r",
									"pm.globals.set('educationMajor', \"EducationMajor\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// Institution name changed for SORT purpose\r",
									"pm.globals.set(\"educationInstitution\", \"automation_Edusort\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education\r\n    {\r\n      id\r\n      createdAt\r\n      degree\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n  }",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Sort Edu by Institution( Create Education 2 )",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var id = jsonData.data.createEducation.education.id;",
									"",
									"// Saving data for future use",
									"pm.globals.set(\"educationid\", id);",
									"",
									"// Saving whole Education Object to globals for future use",
									"var education = JSON.stringify(jsonData.data.createEducation.education);",
									"pm.globals.set(\"education_data\", education);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"var educationDegreeArray = [\r",
									"    'Primary',\r",
									"    'Secondary',\r",
									"    'Associates',\r",
									"    'Bachelors',\r",
									"    'Masters',\r",
									"    'Doctorate'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random() * educationDegreeArray.length);\r",
									"pm.globals.set('educationDegree', educationDegreeArray[randomNumber]);\r",
									"\r",
									"pm.globals.set('educationMajor', \"EducationMajor\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// Institution name changed for SORT purpose\r",
									"pm.globals.set(\"educationInstitution\", \"Automation_Edusort\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education\r\n    {\r\n      id\r\n      createdAt\r\n      degree\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n  }",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations  Success - institution sorting ASC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var lodash = require('lodash');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - Name sorting ASC",
									"pm.test(\"Verify that items are sorted by 'institution' and orderd by 'ASC' order \", function () {",
									"",
									"    var responseBody = jsonData.data.educations.items;",
									"    var expectedSortedOrder = lodash.orderBy(responseBody, item => item.institution.value.toLowerCase(), ['asc']);",
									"    pm.expect(responseBody).to.eql(expectedSortedOrder);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"count\":{{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Success - institution sorting DESC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var lodash = require('lodash');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - Name sorting DESC",
									"pm.test(\"Verify that items are sorted by 'institution' and orderd by 'DESC' order \", function () {",
									"",
									"    var responseBody = jsonData.data.educations.items;",
									"    var expectedSortedOrder = lodash.orderBy(responseBody, item => item.institution.value.toLowerCase(), ['desc']);",
									"    pm.expect(responseBody).to.eql(expectedSortedOrder);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"DESC\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Not Mandatory Field Removed - count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that number of items returned is equal to total\", function () {",
									"    var total = jsonData.data.educations.total;",
									"    var items = jsonData.data.educations.items.length;",
									"    if (total <= 25)    // 25 is maximum db items limit returned per page when count is not specified",
									"        pm.expect(items).to.eql(total);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Not Mandatory Field Blank - sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Invalid input\");",
									"});",
									"",
									"pm.test(\"Verify that error code is InternalServerError\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"InternalServerError\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 500\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(500);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Not Mandatory Field Blank - order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 10000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Order\\\" enum\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Parameter Mismatch - count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"EducationListInput\\\". Did you mean \\\"count\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count1\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Parameter Mismatch - page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"EducationListInput\\\". Did you mean \\\"page\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"count\":{{itemCount}},\r\n    \"page1\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Parameter Mismatch - sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"EducationListInput\\\". Did you mean \\\"sort\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"count\":{{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort1\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Parameter Mismatch - order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"EducationListInput\\\". Did you mean \\\"order\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"count\":{{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order1\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Parameter  Invalid - count min",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that count error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors.count.min;",
									"    pm.expect(error_message).to.eql(\"count must not be less than 1\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": 0,\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Parameter  Invalid - count max",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that count error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors.count.max;  ",
									"    pm.expect(error_message).to.eql(\"count must not be greater than 100\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": 159,\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Parameter Invalid - page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that page error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors.page.min;  ",
									"    pm.expect(error_message).to.eql(\"page must not be less than 1\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": 0,\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Parameter Invalid - sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"not defined\");",
									"});",
									"",
									"pm.test(\"Verify that error code is InternalServerError\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"InternalServerError\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 500\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(500);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"qwerty\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Parameter Invalid - order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Order\\\" enum\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": 0,\r\n    \"sort\": \"institution\",\r\n    \"order\": \"11 #$%% ^&*\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Education Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that Education is deleted\", function () {",
									"    pm.expect(jsonData.data.deleteEducation).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteeducation($id:ID!)\r\n{\r\n  deleteEducation(id:$id)  \r\n}",
								"variables": "{\r\n  \"id\": \"{{educationid}}\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Education Mandatory Field Blank - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is 400\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that education error message is correct\", function () {",
									"    var error_education_message = jsonData.errors[0].extensions.errors.id.IsId;  ",
									"    pm.expect(error_education_message).to.eql(\"Invalid ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteeducation($id:ID!)\r\n{\r\n  deleteEducation(id:$id)  \r\n}",
								"variables": "{\r\n  \"id\": \"\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Education Mandatory Field Removed - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteeducation($id:ID!)\r\n{\r\n  deleteEducation(id:$id)  \r\n}",
								"variables": "{\r\n  \r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Education Parameter Mismatch - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteeducation($id:ID!)\r\n{\r\n  deleteEducation(id:$id)  \r\n}",
								"variables": "{\r\n  \"id1\": \"{{educationid}}\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Education Parameter - Invalid - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that language error message is correct\", function () {",
									"    var error_education_message = jsonData.errors[0].extensions.errors.id.IsId;  ",
									"    pm.expect(error_education_message).to.eql(\"Invalid ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteeducation($id:ID!)\r\n{\r\n  deleteEducation(id:$id)  \r\n}",
								"variables": "{\r\n  \"id\": \"!@#$%^&\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
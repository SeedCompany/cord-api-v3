{
	"info": {
		"_postman_id": "10d8e6fe-0c06-4d55-be13-ed16e5f062f9",
		"name": "Cord_API_V3_Education",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Pre-req ( Session + Register + Login ) for Education",
			"item": [
				{
					"name": "Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad915e87-4ca3-4a64-be7f-4b8ffc00a8fb",
								"exec": [
									"var response = pm.response.json();\r",
									"pm.globals.set(\"token\", response.data.session.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Write your query or mutation here\r\nquery {\r\n  session(browser: false) {\r\n    user {\r\n      id,\r\n      email\r\n      {\r\n        value\r\n      }\r\n      realFirstName\r\n      {\r\n        value\r\n      }\r\n      createdAt\r\n      displayLastName\r\n      {\r\n         value\r\n      }\r\n      \r\n      \r\n      \r\n    },\r\n    token\r\n  }\r\n}",
								"variables": ""
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b07c81d-4904-43ee-8e89-b80141e5af2b",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// This is safe check to prevent failing futher cases If the Root User is already Created\r",
									"if (jsonData.errors) {\r",
									"    if (jsonData.errors.length) return;\r",
									"}\r",
									"\r",
									"//Saving data for future use\r",
									"var id = jsonData.data.register.user.id;\r",
									"pm.globals.set(\"userid\", id);\r",
									"\r",
									"var user = JSON.stringify(jsonData.data.register.user);\r",
									"pm.globals.set(\"user_data\", user);\r",
									"\r",
									"var email = jsonData.data.register.user.email.value;\r",
									"pm.globals.set(\"email\", email);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "323a04af-8b6b-4880-b0b9-111aec5f4dac",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"realFirstName\", \"FirstName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"realLastName\", \"LastName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"email\", \"email\" + moment().format(\"DDMYYYYhhmmss\") + \"@test.com\");\r",
									"pm.globals.set(\"password\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"displayFirstName\", \"DisplayFirstName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"displayLastName\", \"DisplayLastName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"phone\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));\r",
									"\r",
									"var timezoneObject = {\r",
									"    \"name\": \"Europe/Andorra\",\r",
									"    \"lat\": 42.5,\r",
									"    \"long\": 1.5167,\r",
									"    \"countries\": [\r",
									"        {\r",
									"            \"code\": \"AD\",\r",
									"            \"name\": \"Andorra\",\r",
									"            \"zones\": [\r",
									"                {\r",
									"                    \"name\": \"Europe/Andorra\",\r",
									"                    \"lat\": 42.5,\r",
									"                    \"long\": 1.5167,\r",
									"                    \"countries\": [\r",
									"                        {\r",
									"                            \"code\": \"AD\",\r",
									"                            \"name\": \"Andorra\"\r",
									"                        }\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"};\r",
									"pm.globals.set('timezoneObject', JSON.stringify(timezoneObject));\r",
									"pm.globals.set(\"timezone\", timezoneObject.name);\r",
									"\r",
									"pm.globals.set(\"about\", \"I'm Tester\");\r",
									"\r",
									"pm.globals.set(\"userTitle\", \"Tester\");\r",
									"\r",
									"// Taking random value for the User status from pre-defined possible values\r",
									"var userStatusArray = ['Active','Disabled'];\r",
									"var randomNumber = Math.floor(Math.random()*userStatusArray.length);\r",
									"// pm.globals.set('userStatus', userStatusArray[randomNumber]);\r",
									"pm.globals.set(\"userStatus\", \"Active\");\r",
									"\r",
									"var userRolesArray = ['BibleTranslationLiaison',\r",
									"'Consultant',\r",
									"'ConsultantManager',\r",
									"'Controller',\r",
									"'Development',\r",
									"'ExecutiveDevelopmentRepresentative',\r",
									"'ExecutiveLeadership',\r",
									"'FieldOperationsDirector',\r",
									"'FieldPartner',\r",
									"'FinancialAnalyst',\r",
									"'Intern',\r",
									"'Liaison',\r",
									"'LeadFinancialAnalyst',\r",
									"'Mentor',\r",
									"'OfficeOfThePresident',\r",
									"'ProjectManager',\r",
									"'RegionalCommunicationsCoordinator',\r",
									"'RegionalDirector',\r",
									"'SupportingProjectManager',\r",
									"'Translator',\r",
									"'Writer'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random()*userRolesArray.length);\r",
									"pm.globals.set('userRoles', userRolesArray[randomNumber]);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation register($input: RegisterInput!) {\r\n  register(input: $input) {\r\n    user {\r\n      id\r\n      fullName\r\n      firstName\r\n      avatarLetters\r\n      createdAt\r\n      email {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      phone {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      about {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      status {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      roles {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      title {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      timezone {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          name\r\n          lat\r\n          long\r\n          countries {\r\n            code\r\n            name\r\n            zones {\r\n              name\r\n              lat\r\n              long\r\n              countries {\r\n                code\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      unavailabilities {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          description {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          start\r\n          end\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      organizations {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          name {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          avatarLetters\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      education {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          degree {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          major {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          institution {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"realFirstName\": \"Piyush\",\r\n        \"realLastName\": \"Patel\",\r\n        \"email\": \"{{login_email}}\",\r\n        \"password\": \"{{login_password}}\",\r\n        \"displayFirstName\": \"{{displayFirstName}}\",\r\n        \"displayLastName\": \"{{displayLastName}}\",\r\n        \"phone\": \"{{phone}}\",\r\n        \"timezone\": \"{{timezone}}\",\r\n        \"status\": \"{{userStatus}}\",\r\n        \"title\": \"{{userTitle}}\",\r\n        \"roles\": \"{{userRoles}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6aaf86f-2666-408e-a590-3ae270366fa7",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var id = jsonData.data.login.user.id;",
									"pm.globals.set(\"userid\", id);",
									"",
									"var email = jsonData.data.login.user.email.value;",
									"pm.globals.set(\"email\", email);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0ac52c20-e261-4035-af25-a150228ba117",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation login($input: LoginInput!) {\r\n  login(input: $input) {\r\n    user {\r\n      id\r\n      fullName\r\n      firstName\r\n      avatarLetters\r\n      createdAt\r\n      email {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      phone {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      about {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      status {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      roles {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      title {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      timezone {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          name\r\n          lat\r\n          long\r\n          countries {\r\n            code\r\n            name\r\n            zones {\r\n              name\r\n              lat\r\n              long\r\n              countries {\r\n                code\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      unavailabilities {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          description {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          start\r\n          end\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      organizations {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          name {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          avatarLetters\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      education {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          degree {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          major {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          institution {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n   \"input\": {\r\n      \"email\": \"{{login_email}}\",\r\n      \"password\": \"{{login_password}}\"\r\n   }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0637c13f-ca22-410b-9710-8db94462de7d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ec6642ed-07f3-45c2-805b-aa5c71848f9f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Education",
			"item": [
				{
					"name": "Create Education Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f72f904-1dfc-4396-8bff-e4e9c214bcc2",
								"exec": [
									"var jsonData = pm.response.json();",
									"const moment = require('moment');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.createEducation.education.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"",
									"    // Saving data for future use",
									"    pm.globals.set(\"educationid\", id);",
									"});",
									"",
									"// Saving whole Education Object to globals for future use",
									"var education = JSON.stringify(jsonData.data.createEducation.education);",
									"pm.globals.set(\"education_data\", education);",
									"",
									"pm.test(\"Verify that education's createdAt is in Specific time format\", function () {",
									"    var time = jsonData.data.createEducation.education.createdAt;",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();",
									"    pm.expect(isValidTime).to.eql(true);",
									"",
									"});",
									"",
									"pm.test(\"Verify that Created Education degree is same as requested\", function () {",
									"    var degree = jsonData.data.createEducation.education.degree.value;",
									"    pm.expect(degree).to.eql(pm.globals.get('educationDegree'));",
									"});",
									"",
									"pm.test(\"Verify that Created Education major is same as requested\", function () {",
									"    var major = jsonData.data.createEducation.education.major.value;",
									"    pm.expect(major).to.eql(pm.globals.get('educationMajor'));",
									"});",
									"",
									"pm.test(\"Verify that Created Education institution is same as requested\", function () {",
									"    var institution = jsonData.data.createEducation.education.institution.value;",
									"    pm.expect(institution).to.eql(pm.globals.get('educationInstitution'));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "63f7c8b6-9db4-49bd-9e92-dcd6d40ac53a",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"var educationDegreeArray = [\r",
									"    'Primary',\r",
									"    'Secondary',\r",
									"    'Associates',\r",
									"    'Bachelors',\r",
									"    'Masters',\r",
									"    'Doctorate'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random() * educationDegreeArray.length);\r",
									"pm.globals.set('educationDegree', educationDegreeArray[randomNumber]);\r",
									"\r",
									"pm.globals.set('educationMajor', \"EducationMajor\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set('educationInstitution', \"EducationInstitution\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education\r\n    {\r\n      id\r\n      createdAt\r\n      canDelete\r\n      degree\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n  }",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Mandatory Field Blank - userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c9d803d-be9a-44fe-9b52-0f80f8157ac8",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that education error message is correct\", function () {",
									"    var errors = jsonData.errors[0].extensions.errors['education.userId'].IsId;",
									"    pm.expect(errors).to.eql(\"Invalid ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3431f2c5-68c2-44cd-ace7-6ad2b233127b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Mandatory Field Removed - userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "690d2ab0-4b22-4412-9a89-47208f808dc6",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 10000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"userId\\\" of required type \\\"ID!\\\" was not provided\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql('INTERNAL_SERVER_ERROR');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "18a7d11c-84fd-42b8-8d62-f0e29b061cfa",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Mandatory Field Blank - degree",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2230a64-0f52-441e-95b7-0cf038492e12",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Degree\\\" enum.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "75a00023-0550-4ab9-9445-a05195ab1d6c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\" : \"\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Mandatory Field Removed - degree",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "593dd7c2-8814-4c58-93fe-d202c33ffb37",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"degree\\\" of required type \\\"Degree!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5c8f1059-ae7a-453c-8737-9df0bd002cd8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Mandatory Field Blank - major",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7498eb37-de49-4462-994b-9bf3aaad1228",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.createEducation.education.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that education major is null\", function () {",
									"    var major = jsonData.data.createEducation.education.major.value;",
									"    pm.expect(major).to.eql(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8455a6b7-22c2-4307-8bc1-77bde77562da",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Mandatory Field Removed - major",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ab2aa15-60fa-4524-b9e3-ace70b5000c8",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"major\\\" of required type \\\"String!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51a27945-a953-4d09-85c3-46be02b4b162",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Mandatory Field Blank - institute",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3777bad5-39c3-4c98-a0f1-13a1179e55e9",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.createEducation.education.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that education institution is null\", function () {",
									"    var institution = jsonData.data.createEducation.education.institution.value;",
									"    pm.expect(institution).to.eql(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8259d817-9bff-4675-9aae-d12a1c66b767",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Mandatory Field Removed - institute",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10349445-2e4f-4b7b-83fa-d03980d48133",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Field \\\"institution\\\" of required type \\\"String!\\\" was not provided\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "499d01ab-87c0-4731-8272-f01245cff158",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Parameter Mismatch - userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69e565e9-8fd5-4124-8e03-def5dda38450",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Field \\\"userId\\\" of required type \\\"ID!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "275e24b3-d630-44b9-87fe-51003ebaddb8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId1\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Parameter Mismatch - degree",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ceaf038a-ce0f-4f14-bf5a-f174442c4d53",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Field \\\"degree\\\" of required type \\\"Degree!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a06bba0f-3ac9-45cd-97a0-739082c12611",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree1\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Parameter Mismatch - major",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "762e7422-7749-4352-a845-6a3272924778",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Field \\\"major\\\" of required type \\\"String!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2566bcef-33dc-4070-a531-7abcd1e358ee",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major1\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Parameter Mismatch - institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a0dd232-b1d3-4f8f-b060-180cc3d841fe",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Field \\\"institution\\\" of required type \\\"String!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "90005bc0-5658-4f85-814d-0496e6581397",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution1\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Parameter - Invalid -  userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d68ba72-4c72-4575-a62b-f82350dec3ce",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that education error message is correct\", function () {",
									"    var errors = jsonData.errors[0].extensions.errors['education.userId'].IsId;  ",
									"    pm.expect(errors).to.eql(\"Invalid ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4b045291-fffa-49ab-b48b-ea0ceba8d414",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"!@#$%^&\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Education Parameter - Invalid -  degree",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1871d608-6537-4115-b14e-9c41ba0dbf72",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Degree\\\" enum.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a67e78dc-dc70-4ef3-84a0-32c402510241",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"!@#$%^\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get  Education By Id Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "206f5d87-9aa2-4a79-a22d-d980c80d56b8",
								"exec": [
									"var jsonData = pm.response.json();",
									"var education_data = JSON.parse(pm.variables.get(\"education_data\"));",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verifying education ID is not blank or null\", function () {",
									"    var id = jsonData.data.education.id;  ",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verifying Education degree\", function () {",
									"    var degree = jsonData.data.education.degree;",
									"    pm.expect(degree).to.eql(education_data.degree);",
									"});",
									"",
									"pm.test(\"Verifying Education major\", function () {",
									"    var major = jsonData.data.education.major;",
									"    pm.expect(major).to.eql(education_data.major);",
									"});",
									"",
									"pm.test(\"Verifying Education institution\", function () {",
									"    var institution = jsonData.data.education.institution;",
									"    pm.expect(institution).to.eql(education_data.institution);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "28d504b9-81b9-412e-93f9-e79a10e971c9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query education($id: ID!) {\r\n  education(id: $id) {\r\n    id\r\n    createdAt\r\n    degree {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    major {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    institution {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"{{educationid}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Education By id Mandatory Field Blank - id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8789bc5-fc80-4aff-88ec-6e0ad9e2a3cd",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is 400\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that education error message is correct\", function () {",
									"    var error_education_message = jsonData.errors[0].extensions.errors.id.IsId;  ",
									"    pm.expect(error_education_message).to.eql(\"Invalid ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f6bc3db1-a1b6-4ac6-85a1-71b89211a423",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query education($id: ID!) {\r\n  education(id: $id) {\r\n    id\r\n    createdAt\r\n    degree {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    major {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    institution {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Education By id Mandatory Field Removed - id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "10ac2257-cb40-4340-915d-69a95b3d5266",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 10000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql('INTERNAL_SERVER_ERROR');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e3d0a5d8-c0a4-4fee-b08c-97e74ce5e022",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query education($id: ID!) {\r\n  education(id: $id) {\r\n    id\r\n    createdAt\r\n    degree {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    major {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    institution {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": ""
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get education  By id Parameter Mismatch - id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8e7d0e3-ecbd-4758-98cf-e6012c7cf7fb",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "04f6013d-4dcb-475c-b3de-7f478eb927c8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query education($id: ID!) {\r\n  education(id: $id) {\r\n    id\r\n    createdAt\r\n    degree {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    major {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    institution {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id1\": \"{{educationid}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Education By id Parameter Invalid - id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c4c7602-6b20-4122-a225-64ceb01a1bb1",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is 400\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that language error message is correct\", function () {",
									"    var error_language_message = jsonData.errors[0].extensions.errors.id.IsId;  ",
									"    pm.expect(error_language_message).to.eql(\"Invalid ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "806739a6-cb90-44f0-ba2f-b8bd81c0d8db",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query education($id: ID!) {\r\n  education(id: $id) {\r\n    id\r\n    createdAt\r\n    degree {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    major {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    institution {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"???---+++***@#$%^\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cd8c564-1418-465c-98c8-a7460a30b21d",
								"exec": [
									"var jsonData = pm.response.json();",
									"var education_data = JSON.parse(pm.variables.get(\"education_data\"));",
									"const moment = require('moment');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.updateEducation.education.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that education's createdAt is in Specific time format\", function () {",
									"    var time = jsonData.data.updateEducation.education.createdAt;",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();",
									"    pm.expect(isValidTime).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify that updated education degree is same as requested\", function () {",
									"    var educationDegree = jsonData.data.updateEducation.education.degree.value;",
									"    pm.expect(educationDegree).to.eql(pm.globals.get('educationDegree'));",
									"});",
									"",
									"pm.test(\"Verify that updated education major is same as requested\", function () {",
									"    var educationMajor = jsonData.data.updateEducation.education.major.value;",
									"    pm.expect(educationMajor).to.eql(pm.globals.get('educationMajor'));",
									"});",
									"",
									"pm.test(\"Verify that updated education institution is same as requested\", function () {",
									"    var institution = jsonData.data.updateEducation.education.institution.value;",
									"    pm.expect(institution).to.eql(pm.globals.get('educationInstitution'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e8996d6f-60f3-42a5-9ae4-df49db96d0f0",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"var educationDegreeArray = [\r",
									"    'Primary',\r",
									"    'Secondary',\r",
									"    'Associates',\r",
									"    'Bachelors',\r",
									"    'Masters',\r",
									"    'Doctorate'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random() * educationDegreeArray.length);\r",
									"pm.globals.set('educationDegree', educationDegreeArray[randomNumber]);\r",
									"\r",
									"pm.globals.set('educationMajor', \"EducationMajor\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set('educationInstitution', \"EducationInstitution\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id\": \"{{educationid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Success - Only Required Inputs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "edae92c8-c9bf-47b8-b9f9-839b38c8d9f3",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.updateEducation.education.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that updated education degree is same as previous value\", function () {",
									"    var educationDegree = jsonData.data.updateEducation.education.degree.value;",
									"    pm.expect(educationDegree).to.eql(pm.globals.get('educationDegree'));",
									"});",
									"",
									"pm.test(\"Verify that updated education major is same as previous value\", function () {",
									"    var educationMajor = jsonData.data.updateEducation.education.major.value;",
									"    pm.expect(educationMajor).to.eql(pm.globals.get('educationMajor'));",
									"});",
									"",
									"pm.test(\"Verify that updated education institution is same as previous value\", function () {",
									"    var institution = jsonData.data.updateEducation.education.institution.value;",
									"    pm.expect(institution).to.eql(pm.globals.get('educationInstitution'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0dcd4947-6fd6-462c-bde6-f7a08439cf46",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"education\": {\r\n            \"id\": \"{{educationid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Mandatory Field Removed - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e298b5ec-08bc-4c8f-92a2-1917ca3cd5a7",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"id\\\" of required type \\\"ID!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "00ff13c3-ad66-47b5-8a05-3be679142280",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Mandatory Field Blank - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4801c86-0485-43e6-834e-5f5da2e78462",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_code = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_code).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that error languageId message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors['education.id'].IsId;",
									"    pm.expect(error_message).to.include(\"Invalid ID\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "882e7bc5-f7b0-4130-a051-9d17740b2984",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"id\": \"\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Not Mandatory Field Removed - degree",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1555e455-4a38-4180-b588-c8ea975a2de4",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.updateEducation.education.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that updated education degree is equal to previous value\", function () {",
									"    var degree = jsonData.data.updateEducation.education.degree.value;",
									"    pm.expect(degree).to.eql(pm.globals.get('educationDegree'));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "74cff9f3-7bbd-4be8-9a57-7518f5b83984",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"education\": {\r\n            \"id\": \"{{educationid}}\",\r\n            \"major\": \"{{educationMajor}}\",\r\n            \"institution\": \"{{educationInstitution}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Not Mandatory Field Blank- degree",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6082439d-61ef-420e-9772-956a4c35502e",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Degree\\\" enum.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "53a2f745-afb1-40ae-80df-097daed57f19",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id\": \"{{userid}}\",\r\n      \"degree\": \"\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Not Mandatory Field Removed - major",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a54f1b29-de7e-4313-be18-cc69b7a1ec4f",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that education ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateEducation.education.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated education major is equal to previous value\", function () {\r",
									"    var educationMajor = jsonData.data.updateEducation.education.major.value;\r",
									"    pm.expect(educationMajor).to.eql(pm.globals.get('educationMajor'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e3cbfb76-610e-4764-8694-ff0d918111bc",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"var educationDegreeArray = [\r",
									"    'Primary',\r",
									"    'Secondary',\r",
									"    'Associates',\r",
									"    'Bachelors',\r",
									"    'Masters',\r",
									"    'Doctorate'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random() * educationDegreeArray.length);\r",
									"pm.globals.set('educationDegree', educationDegreeArray[randomNumber]);\r",
									"\r",
									"pm.globals.set('educationInstitution', \"EducationInstitution\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id\": \"{{educationid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Not Mandatory Field Blank - major",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07777847-10f7-429d-9cb0-eaf7f5b12b7d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that education ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateEducation.education.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated education major is null\", function () {\r",
									"    var educationMajor = jsonData.data.updateEducation.education.major.value;\r",
									"    pm.expect(educationMajor).to.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f6336b8c-d12d-4d7c-8f0d-7351b9b5a51b",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"var educationDegreeArray = [\r",
									"    'Primary',\r",
									"    'Secondary',\r",
									"    'Associates',\r",
									"    'Bachelors',\r",
									"    'Masters',\r",
									"    'Doctorate'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random() * educationDegreeArray.length);\r",
									"pm.globals.set('educationDegree', educationDegreeArray[randomNumber]);\r",
									"\r",
									"pm.globals.set('educationInstitution', \"EducationInstitution\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id\": \"{{educationid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Not Mandatory Field Removed - institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "818673c5-8137-4292-964d-4d2da6cc16f4",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.updateEducation.education.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that updated education institution is equal to previous value\", function () {",
									"    var institution = jsonData.data.updateEducation.education.institution.value;",
									"    pm.expect(institution).to.eql(pm.globals.get('educationInstitution'));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7478f4af-eea9-4216-bae6-5fc97bab20ce",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"var educationDegreeArray = [\r",
									"    'Primary',\r",
									"    'Secondary',\r",
									"    'Associates',\r",
									"    'Bachelors',\r",
									"    'Masters',\r",
									"    'Doctorate'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random() * educationDegreeArray.length);\r",
									"pm.globals.set('educationDegree', educationDegreeArray[randomNumber]);\r",
									"\r",
									"pm.globals.set('educationMajor', \"EducationMajor\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"id\": \"{{educationid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Not Mandatory Field Blank- institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0175738-82be-47fa-b72b-6c6a2cfcf180",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.updateEducation.education.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that updated education institution is null\", function () {",
									"    var institution = jsonData.data.updateEducation.education.institution.value;",
									"    pm.expect(institution).to.eql(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "28d5bece-296c-4176-b37b-86a61511d1be",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"var educationDegreeArray = [\r",
									"    'Primary',\r",
									"    'Secondary',\r",
									"    'Associates',\r",
									"    'Bachelors',\r",
									"    'Masters',\r",
									"    'Doctorate'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random() * educationDegreeArray.length);\r",
									"pm.globals.set('educationDegree', educationDegreeArray[randomNumber]);\r",
									"\r",
									"pm.globals.set('educationMajor', \"EducationMajor\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set('educationInstitution', \"EducationInstitution\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id\": \"{{educationid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Parameter Mismatch - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa9235f8-8b56-4e1b-b741-9e2e58f2905f",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Field \\\"id\\\" of required type \\\"ID!\\\" was not provided\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "75565f1a-d4e4-44c8-8c46-af5db06c3a46",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id1\": \"{{educationid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{institution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Parameter Mismatch - Degree",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d77762aa-1a1b-4944-9a70-29015fa4bb4d",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"UpdateEducation\\\". Did you mean \\\"degree\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b598ad71-e000-4e48-ae49-f04b31172826",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id\": \"{{educationid}}\",\r\n      \"degree1\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{institution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Parameter Mismatch - Major",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2bc4075a-dba0-4f8e-b50f-6200b2d13568",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"UpdateEducation\\\". Did you mean \\\"major\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eb480245-0017-40cd-9af3-5f5c73eb6fe8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id\": \"{{educationid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major1\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{institution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Parameter Mismatch - Institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7642625-372a-4b32-b755-68d284bfe6a7",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"UpdateEducation\\\". Did you mean \\\"institution\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d5595607-f22e-4a98-9e2b-1fd229636188",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id\": \"{{educationid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution1\": \"{{institution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Parameter Invalid -  Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "144c44f2-aac8-4699-86d8-5dddf6fc1030",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_code = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_code).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that error languageID message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors['education.id'].IsId;  ",
									"    pm.expect(error_message).to.include(\"Invalid ID\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1099e394-4449-4db2-870e-aab9e8ef2a09",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id\": \"!@#$%^$$%\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{institution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Education Parameter Invalid -  Degree",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "721d1f4a-56db-44dc-b6d8-5738d4f75493",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Degree\\\" enum.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bd5fba32-06a0-4329-87fb-204c5be5bae6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateEducation($input: UpdateEducationInput!) {\r\n  updateEducation(input: $input) {\r\n    education {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"education\": \r\n    {\r\n      \"id\": \"{{educationid}}\",\r\n      \"degree\": \"!@#$%^&\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{institution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Get Educ by Id ( Create Education)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "528d70f5-2157-487f-8ae6-79cff8991df3",
								"exec": [
									"var jsonData = pm.response.json();",
									"const moment = require('moment');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.createEducation.education.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"",
									"    // Saving data for future use",
									"    pm.globals.set(\"educationid\", id);",
									"});",
									"",
									"// Saving whole Education Object to globals for future use",
									"var education = JSON.stringify(jsonData.data.createEducation.education);",
									"pm.globals.set(\"education_data\", education);",
									"",
									"pm.test(\"Verify that education's createdAt is in Specific time format\", function () {",
									"    var time = jsonData.data.createEducation.education.createdAt;",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();",
									"    pm.expect(isValidTime).to.eql(true);",
									"",
									"});",
									"",
									"pm.test(\"Verify that Created Education degree is same as requested\", function () {",
									"    var degree = jsonData.data.createEducation.education.degree.value;",
									"    pm.expect(degree).to.eql(pm.globals.get('educationDegree'));",
									"});",
									"",
									"pm.test(\"Verify that Created Education major is same as requested\", function () {",
									"    var major = jsonData.data.createEducation.education.major.value;",
									"    pm.expect(major).to.eql(pm.globals.get('educationMajor'));",
									"});",
									"",
									"pm.test(\"Verify that Created Education institution is same as requested\", function () {",
									"    var institution = jsonData.data.createEducation.education.institution.value;",
									"    pm.expect(institution).to.eql(pm.globals.get('educationInstitution'));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d616b9d2-7352-444d-9388-7b4b6c626b0f",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"var educationDegreeArray = [\r",
									"    'Primary',\r",
									"    'Secondary',\r",
									"    'Associates',\r",
									"    'Bachelors',\r",
									"    'Masters',\r",
									"    'Doctorate'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random() * educationDegreeArray.length);\r",
									"pm.globals.set('educationDegree', educationDegreeArray[randomNumber]);\r",
									"\r",
									"pm.globals.set('educationMajor', \"EducationMajor\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set('educationInstitution', \"EducationInstitution\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education\r\n    {\r\n      id\r\n      createdAt\r\n      degree\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n  }",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "104ef43a-b5d0-47ee-ada7-7175ee389d2c",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - Pagination",
									"pm.test(\"Verify that total is greater than Zero\", function () {",
									"    var total = jsonData.data.educations.total;",
									"    pm.expect(total).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Verify that hasMore is correct\", function () {",
									"    var total = jsonData.data.educations.total;",
									"    var hasMore = jsonData.data.educations.hasMore;",
									"    if (Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) < total) {",
									"        pm.expect(hasMore).to.eql(true);",
									"    } else {",
									"        pm.expect(hasMore).to.eql(false);",
									"    }",
									"});",
									"",
									"pm.test(\"Verify that number of items returned are exact\", function () {",
									"    var total = jsonData.data.educations.total;                  // total returned in response",
									"    var returneditems = jsonData.data.educations.items.length;   // no. of items returned in response array",
									"    var itemCount = Number(pm.globals.get('itemCount'));    // no. of items per page",
									"    var page = Number(pm.globals.get('page'));              // page number",
									"    var expectedItems = itemCount * page;                   // items we are expecting",
									"",
									"    if (expectedItems <= total) {",
									"        pm.expect(returneditems).to.eql(itemCount);",
									"    } else {",
									"        if ((expectedItems - total) < itemCount) {",
									"            var lastItems = total - ((itemCount * (page - 1)));   // items in last page",
									"            pm.expect(returneditems).to.eql(lastItems);",
									"        }",
									"    }",
									"});",
									"",
									"",
									"/**",
									" * Setting up 'page' number to be used in next request",
									" * For locating recently created Object position on Specific page",
									" */",
									"var total = jsonData.data.educations.total;",
									"var itemCount = Number(pm.globals.get('itemCount'));",
									"",
									"if (total > itemCount) {",
									"",
									"    if ((total % itemCount) == 0) {",
									"        var pageToset = total / itemCount;",
									"        pm.globals.set(\"page\", pageToset);",
									"    } else {",
									"        var pageToset = Math.floor(total / itemCount) + 1;",
									"        pm.globals.set(\"page\", pageToset);",
									"    }",
									"",
									"} else {",
									"    pm.globals.set(\"page\", 1);  // Set page to 1 if total <= itemCount",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "400ceba0-848d-46d7-b1c7-1b772c74a84c",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Success - item Object",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd8eea2e-0b12-421c-ab8b-06d5fcf957ce",
								"exec": [
									"var jsonData = pm.response.json();",
									"var education_data = JSON.parse(pm.variables.get(\"education_data\")); // Get stored Education object",
									"var lodash = require('lodash');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - Pagination",
									"pm.test(\"Verify that total is greater than Zero\", function () {",
									"    var total = jsonData.data.educations.total;",
									"    pm.expect(total).to.be.above(0);",
									"});",
									"",
									"/**",
									" * Verifying recently created educations's information with Education object returned within items array",
									" */",
									"",
									"// get Education object first having same id as recently created Education's id",
									"var myEducation = lodash.find(jsonData.data.educations.items, ['id', education_data.id]);",
									"",
									"pm.test(\"Verify that recently created education ID is not blank or null\", function () {",
									"    var id = myEducation.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verifying recently created education's createdAt\", function () {",
									"    var createdAt = myEducation.createdAt;",
									"    pm.expect(createdAt).to.eql(education_data.createdAt);",
									"});",
									"",
									"pm.test(\"Verifying recently created education's id\", function () {",
									"    var id = myEducation.id;",
									"    pm.expect(id).to.eql(education_data.id);",
									"});",
									"",
									"pm.test(\"Verifying recently created education's degree\", function () {",
									"    var degree = myEducation.degree.value;",
									"    pm.expect(degree).to.eql(education_data.degree.value);",
									"});",
									"",
									"pm.test(\"Verifying recently created education's major\", function () {",
									"    var major = myEducation.major.value;",
									"    pm.expect(major).to.eql(education_data.major.value);",
									"});",
									"",
									"pm.test(\"Verifying recently created education's institution\", function () {",
									"    var institution = myEducation.institution.value;",
									"    pm.expect(institution).to.eql(education_data.institution.value);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "86e6f830-6521-4969-a3c8-914b30a08009",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"// Page is set from previous request test script based on total\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Success - total",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67e26cba-489f-4154-888c-b70cbcc65339",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - total",
									"pm.test(\"Verify that total is greater than Zero\", function () {",
									"    var total = jsonData.data.educations.total;  ",
									"    pm.expect(total).to.be.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5da4a67e-904e-4bd0-9722-7609d31df8ad",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Success - hasMore - True",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c15558c6-5b81-48d5-8ea1-63b0eb92107a",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - hasMore",
									"pm.test(\"Verify that hasMore is true Only when education items are still available\", function () {",
									"    var total = jsonData.data.educations.total;",
									"    var hasMore = jsonData.data.educations.hasMore;  ",
									"    if(Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) < total){",
									"        pm.expect(hasMore).to.eql(true);",
									"    } else {",
									"        pm.expect(hasMore).to.eql(false);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "67b18f32-758c-4f76-a70d-45d0e4b7758b",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations  Success - hasMore - False",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0258356-dbf0-4f8f-a145-6d8ee7900019",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - hasMore",
									"pm.test(\"Verify that hasMore is false Only when no more education items available\", function () {",
									"    var total = jsonData.data.educations.total;",
									"    var hasMore = jsonData.data.educations.hasMore;  ",
									"    if(Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) >= total){",
									"        pm.expect(hasMore).to.eql(false);",
									"    } else{",
									"        pm.expect(hasMore).to.eql(true);",
									"    }",
									"});",
									"",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.educations.items[0].id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f782102a-6c22-43f4-a89f-abefad30ad63",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Success - items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cbb51fd1-3331-4402-a33b-1ae0bbd5b7b2",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - no. of items are exact",
									"pm.test(\"Verify that number of items returned are exact\", function () {",
									"    var total = jsonData.data.educations.total;                  // total returned in response",
									"    var returneditems = jsonData.data.educations.items.length;   // no. of items returned in response array",
									"    var itemCount = Number(pm.globals.get('itemCount'));    // no. of items per page",
									"    var page = Number(pm.globals.get('page'));              // page number",
									"    var expectedItems = itemCount * page;                   // items we are expecting",
									"",
									"    if (expectedItems <= total) {",
									"        pm.expect(returneditems).to.eql(itemCount);",
									"    } else {",
									"        if ((expectedItems - total) < itemCount) {",
									"            var lastItems = total - ((itemCount * (page - 1)));   // items in last page",
									"            pm.expect(returneditems).to.eql(lastItems);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0cbd85bf-0eec-4deb-bfdb-929aa52120fa",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Sort Edu by Institution ( Create Education)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc32863f-dfd7-4af9-aa5f-e4fbb76abcc4",
								"exec": [
									"var jsonData = pm.response.json();",
									"const moment = require('moment');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.createEducation.education.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"",
									"    // Saving data for future use",
									"    pm.globals.set(\"educationid\", id);",
									"});",
									"",
									"// Saving whole Education Object to globals for future use",
									"var education = JSON.stringify(jsonData.data.createEducation.education);",
									"pm.globals.set(\"education_data\", education);",
									"",
									"pm.test(\"Verify that education's createdAt is in Specific time format\", function () {",
									"    var time = jsonData.data.createEducation.education.createdAt;",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();",
									"    pm.expect(isValidTime).to.eql(true);",
									"",
									"});",
									"",
									"pm.test(\"Verify that Created Education degree is same as requested\", function () {",
									"    var degree = jsonData.data.createEducation.education.degree.value;",
									"    pm.expect(degree).to.eql(pm.globals.get('educationDegree'));",
									"});",
									"",
									"pm.test(\"Verify that Created Education major is same as requested\", function () {",
									"    var major = jsonData.data.createEducation.education.major.value;",
									"    pm.expect(major).to.eql(pm.globals.get('educationMajor'));",
									"});",
									"",
									"pm.test(\"Verify that Created Education institution is same as requested\", function () {",
									"    var institution = jsonData.data.createEducation.education.institution.value;",
									"    pm.expect(institution).to.eql(pm.globals.get('educationInstitution'));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4a5eb772-4aff-4b3d-b97c-cebc2b444398",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"var educationDegreeArray = [\r",
									"    'Primary',\r",
									"    'Secondary',\r",
									"    'Associates',\r",
									"    'Bachelors',\r",
									"    'Masters',\r",
									"    'Doctorate'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random() * educationDegreeArray.length);\r",
									"pm.globals.set('educationDegree', educationDegreeArray[randomNumber]);\r",
									"\r",
									"pm.globals.set('educationMajor', \"EducationMajor\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// Institution name changed for SORT purpose\r",
									"pm.globals.set(\"educationInstitution\", \"automation_Edusort\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education\r\n    {\r\n      id\r\n      createdAt\r\n      degree\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n  }",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Sort Edu by Institution( Create Education 2 )",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0968139b-de20-489b-8432-c5a4811188e5",
								"exec": [
									"var jsonData = pm.response.json();",
									"const moment = require('moment');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that education ID is not blank or null\", function () {",
									"    var id = jsonData.data.createEducation.education.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"",
									"    // Saving data for future use",
									"    pm.globals.set(\"educationid\", id);",
									"});",
									"",
									"// Saving whole Education Object to globals for future use",
									"var education = JSON.stringify(jsonData.data.createEducation.education);",
									"pm.globals.set(\"education_data\", education);",
									"",
									"pm.test(\"Verify that education's createdAt is in Specific time format\", function () {",
									"    var time = jsonData.data.createEducation.education.createdAt;",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();",
									"    pm.expect(isValidTime).to.eql(true);",
									"",
									"});",
									"",
									"pm.test(\"Verify that Created Education degree is same as requested\", function () {",
									"    var degree = jsonData.data.createEducation.education.degree.value;",
									"    pm.expect(degree).to.eql(pm.globals.get('educationDegree'));",
									"});",
									"",
									"pm.test(\"Verify that Created Education major is same as requested\", function () {",
									"    var major = jsonData.data.createEducation.education.major.value;",
									"    pm.expect(major).to.eql(pm.globals.get('educationMajor'));",
									"});",
									"",
									"pm.test(\"Verify that Created Education institution is same as requested\", function () {",
									"    var institution = jsonData.data.createEducation.education.institution.value;",
									"    pm.expect(institution).to.eql(pm.globals.get('educationInstitution'));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3f32ee55-65ee-4138-8f20-433f2466adce",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"var educationDegreeArray = [\r",
									"    'Primary',\r",
									"    'Secondary',\r",
									"    'Associates',\r",
									"    'Bachelors',\r",
									"    'Masters',\r",
									"    'Doctorate'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random() * educationDegreeArray.length);\r",
									"pm.globals.set('educationDegree', educationDegreeArray[randomNumber]);\r",
									"\r",
									"pm.globals.set('educationMajor', \"EducationMajor\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// Institution name changed for SORT purpose\r",
									"pm.globals.set(\"educationInstitution\", \"Automation_Edusort\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createEducation($input: CreateEducationInput!) {\r\n  createEducation(input: $input) {\r\n    education\r\n    {\r\n      id\r\n      createdAt\r\n      degree\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution\r\n      {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n  }",
								"variables": "{\r\n  \"input\": {\r\n    \"education\": {\r\n      \"userId\": \"{{userid}}\",\r\n      \"degree\": \"{{educationDegree}}\",\r\n      \"major\": \"{{educationMajor}}\",\r\n      \"institution\": \"{{educationInstitution}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations  Success - institution sorting ASC",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc7d363b-72b6-4ed9-97f6-67762f3f18fd",
								"exec": [
									"var jsonData = pm.response.json();",
									"var lodash = require('lodash');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - Name sorting ASC",
									"pm.test(\"Verify that items are sorted by 'institution' and orderd by 'ASC' order \", function () {",
									"",
									"    var responseBody = jsonData.data.educations.items;",
									"    var expectedSortedOrder = lodash.orderBy(responseBody, item => item.institution.value.toLowerCase(), ['asc']);",
									"    pm.expect(responseBody).to.eql(expectedSortedOrder);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "555a4bb0-dd2d-4803-aae4-72fec24417ac",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"count\":{{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Success - institution sorting DESC",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c8fe18d-5bb5-4f5e-8521-3751683d0406",
								"exec": [
									"var jsonData = pm.response.json();",
									"var lodash = require('lodash');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - Name sorting DESC",
									"pm.test(\"Verify that items are sorted by 'institution' and orderd by 'DESC' order \", function () {",
									"",
									"    var responseBody = jsonData.data.educations.items;",
									"    var expectedSortedOrder = lodash.orderBy(responseBody, item => item.institution.value.toLowerCase(), ['desc']);",
									"    pm.expect(responseBody).to.eql(expectedSortedOrder);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "397d1e29-bdf5-4970-ae75-e1b67639e882",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"DESC\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Not Mandatory Field Removed - count",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f78d5fdf-0730-4419-b6f8-f3ddbd787483",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that number of items returned is equal to total\", function () {",
									"    var total = jsonData.data.educations.total;",
									"    var items = jsonData.data.educations.items.length;",
									"    if (total <= 25)    // 25 is maximum db items limit returned per page when count is not specified",
									"        pm.expect(items).to.eql(total);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "de703342-ecd1-493d-b9cd-ee8f0a5475d5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Not Mandatory Field Blank - sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3229c61-4314-4c94-974f-e9a01e559eee",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Invalid input\");",
									"});",
									"",
									"pm.test(\"Verify that error code is InternalServerError\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"InternalServerError\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 500\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(500);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a620d671-2ebc-4f58-bfb7-e9e4957b520f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Not Mandatory Field Blank - order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3fcc9d49-531e-4eef-9d16-25707d68adfc",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 10000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Order\\\" enum\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e187dfac-9031-4e9b-8118-8c45a05a9e03",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Parameter Mismatch - count",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84ecd838-d793-4c24-8a6f-3a15f26d7632",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"EducationListInput\\\". Did you mean \\\"count\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "95b0e0b2-cdaf-416d-af1f-bf0fc68e4959",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count1\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Parameter Mismatch - page",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d41aeec8-a358-47a6-8a64-f3ac66ec0156",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"EducationListInput\\\". Did you mean \\\"page\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7f3be367-7712-4c3b-bee9-f3c56d604dd1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"count\":{{itemCount}},\r\n    \"page1\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Parameter Mismatch - sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b74c9b0-8317-4588-bf8d-a3a37b491734",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"EducationListInput\\\". Did you mean \\\"sort\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c358e67d-1270-4393-b5c8-d03d7a84fcff",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"count\":{{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort1\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Parameter Mismatch - order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06dcaf0c-8179-4111-8446-310a032a27d4",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"EducationListInput\\\". Did you mean \\\"order\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "973190e1-89d8-45e7-b385-5a0a506328e6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"count\":{{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order1\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Parameter  Invalid - count min",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2845a10-b5a4-44f8-baf0-2113806ae597",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that count error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors.count.min;",
									"    pm.expect(error_message).to.eql(\"count must not be less than 1\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1b8ff706-aede-47fd-8783-3e59c8c0eb58",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": 0,\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Parameter  Invalid - count max",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6cab79c1-4021-4014-890c-2408c5c383d0",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that count error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors.count.max;  ",
									"    pm.expect(error_message).to.eql(\"count must not be greater than 100\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bf0c4f8f-8295-4919-80ed-343d36e35e1c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": 159,\r\n    \"page\": {{page}},\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Parameter Invalid - page",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a713b05a-f800-407e-b601-a4210a794923",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that page error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors.page.min;  ",
									"    pm.expect(error_message).to.eql(\"page must not be less than 1\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "34c0b8ed-2305-48ba-8d6b-625ec7038ada",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": 0,\r\n    \"sort\": \"institution\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Parameter Invalid - sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8a7eeb37-bffd-4f32-bf56-ff9a94587ece",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"not defined\");",
									"});",
									"",
									"pm.test(\"Verify that error code is InternalServerError\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"InternalServerError\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 500\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(500);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ad2ae4ab-89e0-4f66-8129-575d10675726",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"qwerty\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Educations Parameter Invalid - order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0c233d0-d840-4214-af4c-8afc29489a0d",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Order\\\" enum\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5b45ce19-3888-48a8-a36d-edf917d38091",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: EducationListInput!) {\r\n  educations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      degree {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      major {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      institution {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": 0,\r\n    \"sort\": \"institution\",\r\n    \"order\": \"11 #$%% ^&*\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Education Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2da784e7-4c9e-414f-aca7-aca6622d243f",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that Education is deleted\", function () {",
									"    pm.expect(jsonData.data.deleteEducation).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteeducation($id:ID!)\r\n{\r\n  deleteEducation(id:$id)  \r\n}",
								"variables": "{\r\n  \"id\": \"{{educationid}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Education Mandatory Field Blank - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0448124e-f98a-4dd0-b123-38fd26ade4c2",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is 400\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that education error message is correct\", function () {",
									"    var error_education_message = jsonData.errors[0].extensions.errors.id.IsId;  ",
									"    pm.expect(error_education_message).to.eql(\"Invalid ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteeducation($id:ID!)\r\n{\r\n  deleteEducation(id:$id)  \r\n}",
								"variables": "{\r\n  \"id\": \"\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Education Mandatory Field Removed - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "60318b38-8d02-494d-82f0-92771f69e728",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteeducation($id:ID!)\r\n{\r\n  deleteEducation(id:$id)  \r\n}",
								"variables": "{\r\n  \r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Education Parameter Mismatch - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5263a9cd-2196-4817-96e5-d050bf18e86b",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteeducation($id:ID!)\r\n{\r\n  deleteEducation(id:$id)  \r\n}",
								"variables": "{\r\n  \"id1\": \"{{educationid}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Education Parameter - Invalid - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87a343c8-ce1f-44db-b540-ffbea7d23720",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that language error message is correct\", function () {",
									"    var error_education_message = jsonData.errors[0].extensions.errors.id.IsId;  ",
									"    pm.expect(error_education_message).to.eql(\"Invalid ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteeducation($id:ID!)\r\n{\r\n  deleteEducation(id:$id)  \r\n}",
								"variables": "{\r\n  \"id\": \"!@#$%^&\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}
{
	"info": {
		"_postman_id": "653edaa2-4fa3-4b93-8f9f-8ebd72ab8bd9",
		"name": "Cord_API_V3_LiteracyMaterial",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Pre-req ( Session + Register + Login ) for LiteracyMaterial",
			"item": [
				{
					"name": "Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"pm.globals.set(\"token\", response.data.session.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Write your query or mutation here\r\nquery {\r\n  session(browser: false) {\r\n    user {\r\n      id,\r\n      email\r\n      {\r\n        value\r\n      }\r\n      realFirstName\r\n      {\r\n        value\r\n      }\r\n      createdAt\r\n      displayLastName\r\n      {\r\n         value\r\n      }\r\n      \r\n      \r\n      \r\n    },\r\n    token\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// This is safe check to prevent failing futher cases If the Root User is already Created\r",
									"if (jsonData.errors) {\r",
									"    if (jsonData.errors.length) return;\r",
									"}\r",
									"\r",
									"//Saving data for future use\r",
									"var id = jsonData.data.register.user.id;\r",
									"pm.globals.set(\"userid\", id);\r",
									"\r",
									"var user = JSON.stringify(jsonData.data.register.user);\r",
									"pm.globals.set(\"user_data\", user);\r",
									"\r",
									"var email = jsonData.data.register.user.email.value;\r",
									"pm.globals.set(\"email\", email);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"realFirstName\", \"FirstName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"realLastName\", \"LastName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"email\", \"email\" + moment().format(\"DDMYYYYhhmmss\") + \"@test.com\");\r",
									"pm.globals.set(\"password\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"displayFirstName\", \"DisplayFirstName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"displayLastName\", \"DisplayLastName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"phone\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));\r",
									"\r",
									"var timezoneObject = {\r",
									"    \"name\": \"Europe/Andorra\",\r",
									"    \"lat\": 42.5,\r",
									"    \"long\": 1.5167,\r",
									"    \"countries\": [\r",
									"        {\r",
									"            \"code\": \"AD\",\r",
									"            \"name\": \"Andorra\",\r",
									"            \"zones\": [\r",
									"                {\r",
									"                    \"name\": \"Europe/Andorra\",\r",
									"                    \"lat\": 42.5,\r",
									"                    \"long\": 1.5167,\r",
									"                    \"countries\": [\r",
									"                        {\r",
									"                            \"code\": \"AD\",\r",
									"                            \"name\": \"Andorra\"\r",
									"                        }\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"};\r",
									"pm.globals.set('timezoneObject', JSON.stringify(timezoneObject));\r",
									"pm.globals.set(\"timezone\", timezoneObject.name);\r",
									"\r",
									"pm.globals.set(\"about\", \"I'm Tester\");\r",
									"\r",
									"pm.globals.set(\"userTitle\", \"Tester\");\r",
									"\r",
									"// Taking random value for the User status from pre-defined possible values\r",
									"var userStatusArray = ['Active','Disabled'];\r",
									"var randomNumber = Math.floor(Math.random()*userStatusArray.length);\r",
									"// pm.globals.set('userStatus', userStatusArray[randomNumber]);\r",
									"pm.globals.set(\"userStatus\", \"Active\");\r",
									"\r",
									"pm.globals.set(\"userRoles\", \"ProjectManager\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation register($input: RegisterInput!) {\r\n  register(input: $input) {\r\n    powers\r\n    user {\r\n      id\r\n      fullName\r\n      firstName\r\n      avatarLetters\r\n      createdAt\r\n      canDelete\r\n      email {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      phone {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      about {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      status {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      roles {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      title {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      timezone {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          name\r\n          lat\r\n          long\r\n          countries {\r\n            code\r\n            name\r\n            zones {\r\n              name\r\n              lat\r\n              long\r\n              countries {\r\n                code\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      unavailabilities {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n        #  canDelete\r\n          description {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          start\r\n          end\r\n        }\r\n      }\r\n      organizations {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          avatarLetters\r\n          name {\r\n            value\r\n            canRead\r\n            canEdit\r\n          }\r\n          address {\r\n            value\r\n            canRead\r\n            canEdit\r\n          }\r\n          locations {\r\n            total\r\n            hasMore\r\n            canRead\r\n            canCreate\r\n            items {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              name {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              type {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n\r\n              isoAlpha3 {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              fundingAccount {\r\n                value {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  accountNumber {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n                canEdit\r\n                canRead\r\n              }\r\n              isoCountry {\r\n                country\r\n                alpha2\r\n                alpha3\r\n                numeric\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      partners {\r\n        total\r\n        hasMore\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          modifiedAt\r\n          types {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          financialReportingTypes {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          pmcEntityCode {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          globalInnovationsClient {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          active {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          address {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          organization {\r\n            value {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              avatarLetters\r\n              name {\r\n                value\r\n                canRead\r\n                canEdit\r\n              }\r\n              address {\r\n                value\r\n                canRead\r\n                canEdit\r\n              }\r\n              locations {\r\n                total\r\n                hasMore\r\n                canRead\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  type {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n\r\n                  isoAlpha3 {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  fundingAccount {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      accountNumber {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoCountry {\r\n                    country\r\n                    alpha2\r\n                    alpha3\r\n                    numeric\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            canEdit\r\n            canRead\r\n          }\r\n          pointOfContact {\r\n            value {\r\n              id\r\n              fullName\r\n              firstName\r\n              avatarLetters\r\n              createdAt\r\n              email {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              realFirstName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              realLastName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              displayFirstName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              displayLastName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              phone {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              about {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              status {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              title {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              roles {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              timezone {\r\n                canRead\r\n                canEdit\r\n                value {\r\n                  name\r\n                  lat\r\n                  long\r\n                  countries {\r\n                    code\r\n                    name\r\n                    zones {\r\n                      name\r\n                      lat\r\n                      long\r\n                      countries {\r\n                        code\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              unavailabilities {\r\n                total\r\n                hasMore\r\n                canCreate\r\n                canRead\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  #canDelete\r\n                  start\r\n                  end\r\n                  description {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                }\r\n              }\r\n              organizations {\r\n                total\r\n                hasMore\r\n                canCreate\r\n                canRead\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  avatarLetters\r\n                  name {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                  address {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                  locations {\r\n                    total\r\n                    hasMore\r\n                    canRead\r\n                    canCreate\r\n                    items {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      type {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n\r\n                      isoAlpha3 {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      fundingAccount {\r\n                        value {\r\n                          id\r\n                          createdAt\r\n                          canDelete\r\n                          name {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          accountNumber {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                        }\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      isoCountry {\r\n                        country\r\n                        alpha2\r\n                        alpha3\r\n                        numeric\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              education {\r\n                canRead\r\n                total\r\n                hasMore\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  degree {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  major {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  institution {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n              }\r\n              partners {\r\n                canCreate\r\n                canRead\r\n                hasMore\r\n                total\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  modifiedAt\r\n                  types {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  financialReportingTypes {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  pmcEntityCode {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  globalInnovationsClient {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  active {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  address {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  organization {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      avatarLetters\r\n                      name {\r\n                        value\r\n                        canRead\r\n                        canEdit\r\n                      }\r\n                      address {\r\n                        value\r\n                        canRead\r\n                        canEdit\r\n                      }\r\n                      locations {\r\n                        total\r\n                        hasMore\r\n                        canRead\r\n                        canCreate\r\n                        items {\r\n                          id\r\n                          createdAt\r\n                          canDelete\r\n                          name {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          type {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n\r\n                          isoAlpha3 {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          fundingAccount {\r\n                            value {\r\n                              id\r\n                              createdAt\r\n                              canDelete\r\n                              name {\r\n                                value\r\n                                canEdit\r\n                                canRead\r\n                              }\r\n                              accountNumber {\r\n                                value\r\n                                canEdit\r\n                                canRead\r\n                              }\r\n                            }\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          isoCountry {\r\n                            country\r\n                            alpha2\r\n                            alpha3\r\n                            numeric\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  pointOfContact {\r\n                    canEdit\r\n                    canRead\r\n                    value {\r\n                      id\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              locations {\r\n                canRead\r\n                total\r\n                hasMore\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  type {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoAlpha3 {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoCountry {\r\n                    country\r\n                    alpha2\r\n                    alpha3\r\n                    numeric\r\n                  }\r\n                  fundingAccount {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      accountNumber {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n              }\r\n              knownLanguages {\r\n                proficiency\r\n                language {\r\n                  id\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      education {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          degree {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          major {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          institution {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n      }\r\n      locations {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          type {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          isoAlpha3 {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          isoCountry {\r\n            country\r\n            alpha2\r\n            alpha3\r\n            numeric\r\n          }\r\n          fundingAccount {\r\n            value {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              name {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              accountNumber {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n            }\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n      }\r\n      knownLanguages {\r\n        proficiency\r\n        language {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"realFirstName\": \"Piyush\",\r\n        \"realLastName\": \"Patel\",\r\n        \"email\": \"{{login_email}}\",\r\n        \"password\": \"{{login_password}}\",\r\n        \"displayFirstName\": \"{{displayFirstName}}\",\r\n        \"displayLastName\": \"{{displayLastName}}\",\r\n        \"phone\": \"{{phone}}\",\r\n        \"timezone\": \"{{timezone}}\",\r\n        \"status\": \"{{userStatus}}\",\r\n        \"title\": \"{{userTitle}}\",\r\n        \"about\": \"{{about}}\",\r\n        \"roles\": \"{{userRoles}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var id = jsonData.data.login.user.id;",
									"pm.globals.set(\"userid\", id);",
									"",
									"var email = jsonData.data.login.user.email.value;",
									"pm.globals.set(\"email\", email);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation login($input: LoginInput!) {\r\n  login(input: $input) {\r\n    powers\r\n    user {\r\n      id\r\n      fullName\r\n      firstName\r\n      avatarLetters\r\n      createdAt\r\n      canDelete\r\n      email {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      phone {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      about {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      status {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      roles {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      title {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      timezone {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          name\r\n          lat\r\n          long\r\n          countries {\r\n            code\r\n            name\r\n            zones {\r\n              name\r\n              lat\r\n              long\r\n              countries {\r\n                code\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      unavailabilities {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          #canDelete\r\n          description {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          start\r\n          end\r\n        }\r\n      }\r\n      organizations {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          avatarLetters\r\n          name {\r\n            value\r\n            canRead\r\n            canEdit\r\n          }\r\n          address {\r\n            value\r\n            canRead\r\n            canEdit\r\n          }\r\n          locations {\r\n            total\r\n            hasMore\r\n            canRead\r\n            canCreate\r\n            items {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              name {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              type {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n\r\n              isoAlpha3 {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              fundingAccount {\r\n                value {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  accountNumber {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n                canEdit\r\n                canRead\r\n              }\r\n              isoCountry {\r\n                country\r\n                alpha2\r\n                alpha3\r\n                numeric\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      partners {\r\n        total\r\n        hasMore\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          modifiedAt\r\n          types {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          financialReportingTypes {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          pmcEntityCode {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          globalInnovationsClient {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          active {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          address {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          organization {\r\n            value {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              avatarLetters\r\n              name {\r\n                value\r\n                canRead\r\n                canEdit\r\n              }\r\n              address {\r\n                value\r\n                canRead\r\n                canEdit\r\n              }\r\n              locations {\r\n                total\r\n                hasMore\r\n                canRead\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  type {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n\r\n                  isoAlpha3 {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  fundingAccount {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      accountNumber {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoCountry {\r\n                    country\r\n                    alpha2\r\n                    alpha3\r\n                    numeric\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            canEdit\r\n            canRead\r\n          }\r\n          pointOfContact {\r\n            value {\r\n              id\r\n              fullName\r\n              firstName\r\n              avatarLetters\r\n              createdAt\r\n              email {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              realFirstName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              realLastName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              displayFirstName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              displayLastName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              phone {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              about {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              status {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              title {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              roles {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              timezone {\r\n                canRead\r\n                canEdit\r\n                value {\r\n                  name\r\n                  lat\r\n                  long\r\n                  countries {\r\n                    code\r\n                    name\r\n                    zones {\r\n                      name\r\n                      lat\r\n                      long\r\n                      countries {\r\n                        code\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              unavailabilities {\r\n                total\r\n                hasMore\r\n                canCreate\r\n                canRead\r\n                items {\r\n                  id\r\n                  createdAt\r\n                 # canDelete\r\n                  start\r\n                  end\r\n                  description {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                }\r\n              }\r\n              organizations {\r\n                total\r\n                hasMore\r\n                canCreate\r\n                canRead\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  avatarLetters\r\n                  name {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                  address {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                  locations {\r\n                    total\r\n                    hasMore\r\n                    canRead\r\n                    canCreate\r\n                    items {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      type {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n\r\n                      isoAlpha3 {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      fundingAccount {\r\n                        value {\r\n                          id\r\n                          createdAt\r\n                          canDelete\r\n                          name {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          accountNumber {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                        }\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      isoCountry {\r\n                        country\r\n                        alpha2\r\n                        alpha3\r\n                        numeric\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              education {\r\n                canRead\r\n                total\r\n                hasMore\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  degree {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  major {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  institution {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n              }\r\n              partners {\r\n                canCreate\r\n                canRead\r\n                hasMore\r\n                total\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  modifiedAt\r\n                  types {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  financialReportingTypes {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  pmcEntityCode {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  globalInnovationsClient {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  active {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  address {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  organization {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      avatarLetters\r\n                      name {\r\n                        value\r\n                        canRead\r\n                        canEdit\r\n                      }\r\n                      address {\r\n                        value\r\n                        canRead\r\n                        canEdit\r\n                      }\r\n                      locations {\r\n                        total\r\n                        hasMore\r\n                        canRead\r\n                        canCreate\r\n                        items {\r\n                          id\r\n                          createdAt\r\n                          canDelete\r\n                          name {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          type {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n\r\n                          isoAlpha3 {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          fundingAccount {\r\n                            value {\r\n                              id\r\n                              createdAt\r\n                              canDelete\r\n                              name {\r\n                                value\r\n                                canEdit\r\n                                canRead\r\n                              }\r\n                              accountNumber {\r\n                                value\r\n                                canEdit\r\n                                canRead\r\n                              }\r\n                            }\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          isoCountry {\r\n                            country\r\n                            alpha2\r\n                            alpha3\r\n                            numeric\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  pointOfContact {\r\n                    canEdit\r\n                    canRead\r\n                    value {\r\n                      id\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              locations {\r\n                canRead\r\n                total\r\n                hasMore\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  type {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoAlpha3 {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoCountry {\r\n                    country\r\n                    alpha2\r\n                    alpha3\r\n                    numeric\r\n                  }\r\n                  fundingAccount {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      accountNumber {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n              }\r\n              knownLanguages {\r\n                proficiency\r\n                language {\r\n                  id\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      education {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          degree {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          major {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          institution {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n      }\r\n      locations {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          type {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          isoAlpha3 {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          isoCountry {\r\n            country\r\n            alpha2\r\n            alpha3\r\n            numeric\r\n          }\r\n          fundingAccount {\r\n            value {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              name {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              accountNumber {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n            }\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n      }\r\n      knownLanguages {\r\n        proficiency\r\n        language {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n   \"input\": {\r\n      \"email\": \"{{login_email}}\",\r\n      \"password\": \"{{login_password}}\"\r\n   }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Literacy Material",
			"item": [
				{
					"name": "Create LiteracyMaterial Success - Same Book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('literacyMaterialScriptRefBookStart')} ${pm.globals.get('literacyMaterialScriptRefChapterStart')}:${pm.globals.get('literacyMaterialScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('literacyMaterialScriptRefBookEnd')} ${pm.globals.get('literacyMaterialScriptRefChapterEnd')}:${pm.globals.get('literacyMaterialScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"const moment = require('moment');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that LiteracyMaterial ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.createLiteracyMaterial.literacyMaterial.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"\r",
									"    // Saving data for future use\r",
									"    pm.globals.set(\"literacyMaterialId\", id);\r",
									"});\r",
									"\r",
									"// Saving whole literacyMaterial Object to globals for future use\r",
									"var literacyMaterial = JSON.stringify(jsonData.data.createLiteracyMaterial.literacyMaterial);\r",
									"pm.globals.set(\"literacyMaterial_data\", literacyMaterial);\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial's createdAt is in Specific time format\", function () {\r",
									"    var time = jsonData.data.createLiteracyMaterial.literacyMaterial.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial Name is same as requested\", function () {\r",
									"    var name = jsonData.data.createLiteracyMaterial.literacyMaterial.name.value;\r",
									"    pm.expect(name).to.eql(pm.globals.get('literacyMaterialName'));\r",
									"});\r",
									"\r",
									"\r",
									"//scriptureReferences\r",
									"//Static\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences total verses is same as requested\", function () {\r",
									"    var totalVerses = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].totalVerses;\r",
									"      pm.expect(totalVerses).to.be.above(0);\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify literacyMaterial scriptureReferences label\", function () {\r",
									"    var label = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].label;\r",
									"    pm.expect(label).to.eql(pm.globals.get('literacyMaterialScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences start book is same as requested\", function () {\r",
									"    var startBook = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.book;\r",
									"    pm.expect(startBook).to.eql(pm.globals.get('literacyMaterialScriptRefBookStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences start label is same as requested\", function () {\r",
									"    var startLabel = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.label;\r",
									"    pm.expect(startLabel).to.eql(pm.globals.get('literacyMaterialScriptRefLabelStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences start chapter is same as requested\", function () {\r",
									"    var startChapter = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.chapter;\r",
									"    pm.expect(startChapter).to.eql(pm.globals.get('literacyMaterialScriptRefChapterStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences start verse is same as requested\", function () {\r",
									"    var startVerse = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.verse;\r",
									"    pm.expect(startVerse).to.eql(pm.globals.get('literacyMaterialScriptRefVerseStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences end book is same as requested\", function () {\r",
									"    var endBook = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.book;\r",
									"    pm.expect(endBook).to.eql(pm.globals.get('literacyMaterialScriptRefBookEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences end label is same as requested\", function () {\r",
									"    var endLabel = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.label;\r",
									"    pm.expect(endLabel).to.eql(pm.globals.get('literacyMaterialScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences end chapter is same as requested\", function () {\r",
									"    var endChapter = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.chapter;\r",
									"    pm.expect(endChapter).to.eql(pm.globals.get('literacyMaterialScriptRefChapterEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences end verse is same as requested\", function () {\r",
									"    var endVerse = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.verse;\r",
									"    pm.expect(endVerse).to.eql(pm.globals.get('literacyMaterialScriptRefVerseEnd'));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      canDelete\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"literacyMaterial\": {\r\n            \"name\": \"{{literacyMaterialName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create LiteracyMaterial Success - Diffrent Book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('literacyMaterialScriptRefBookStart')} ${pm.globals.get('literacyMaterialScriptRefChapterStart')}:${pm.globals.get('literacyMaterialScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefBookEnd', \"Exodus\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 4);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 5);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('literacyMaterialScriptRefBookEnd')} ${pm.globals.get('literacyMaterialScriptRefChapterEnd')}:${pm.globals.get('literacyMaterialScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"const moment = require('moment');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that LiteracyMaterial ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.createLiteracyMaterial.literacyMaterial.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"\r",
									"    // Saving data for future use\r",
									"    pm.globals.set(\"literacyMaterialId\", id);\r",
									"});\r",
									"\r",
									"// Saving whole literacyMaterial Object to globals for future use\r",
									"var literacyMaterial = JSON.stringify(jsonData.data.createLiteracyMaterial.literacyMaterial);\r",
									"pm.globals.set(\"literacyMaterial_data\", literacyMaterial);\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial's createdAt is in Specific time format\", function () {\r",
									"    var time = jsonData.data.createLiteracyMaterial.literacyMaterial.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial Name is same as requested\", function () {\r",
									"    var name = jsonData.data.createLiteracyMaterial.literacyMaterial.name.value;\r",
									"    pm.expect(name).to.eql(pm.globals.get('literacyMaterialName'));\r",
									"});\r",
									"\r",
									"\r",
									"//scriptureReferences\r",
									"//Static\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences total verses is same as requested\", function () {\r",
									"    var totalVerses = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].totalVerses;\r",
									"    pm.expect(totalVerses).to.above(0);\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify literacyMaterial scriptureReferences label\", function () {\r",
									"    var label = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].label;\r",
									"    var startLabel = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.label;\r",
									"    var endLabel = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.label;\r",
									"    var expectedLabel = startLabel + \"-\" + endLabel;\r",
									"    pm.expect(label).to.eql(expectedLabel);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences start book is same as requested\", function () {\r",
									"    var startBook = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.book;\r",
									"    pm.expect(startBook).to.eql(pm.globals.get('literacyMaterialScriptRefBookStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences start label is same as requested\", function () {\r",
									"    var startLabel = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.label;\r",
									"    pm.expect(startLabel).to.eql(pm.globals.get('literacyMaterialScriptRefLabelStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences start chapter is same as requested\", function () {\r",
									"    var startChapter = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.chapter;\r",
									"    pm.expect(startChapter).to.eql(pm.globals.get('literacyMaterialScriptRefChapterStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences start verse is same as requested\", function () {\r",
									"    var startVerse = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.verse;\r",
									"    pm.expect(startVerse).to.eql(pm.globals.get('literacyMaterialScriptRefVerseStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences end book is same as requested\", function () {\r",
									"    var endBook = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.book;\r",
									"    pm.expect(endBook).to.eql(pm.globals.get('literacyMaterialScriptRefBookEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences end label is same as requested\", function () {\r",
									"    var endLabel = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.label;\r",
									"    pm.expect(endLabel).to.eql(pm.globals.get('literacyMaterialScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences end chapter is same as requested\", function () {\r",
									"    var endChapter = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.chapter;\r",
									"    pm.expect(endChapter).to.eql(pm.globals.get('literacyMaterialScriptRefChapterEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences end verse is same as requested\", function () {\r",
									"    var endVerse = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.verse;\r",
									"    pm.expect(endVerse).to.eql(pm.globals.get('literacyMaterialScriptRefVerseEnd'));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"literacyMaterial\": {\r\n            \"name\": \"{{literacyMaterialName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Mandatory Field Blank - Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"//pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// // ScriptureReferences variables\r",
									"pm.globals.set(\"literacyMaterialScriptRefBookStart\", \"LiteracyMaterialScriptureReferencesBookStart\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"pm.globals.set(\"literacyMaterialScriptRefChapterStart\", _.random(1, 25));\r",
									"pm.globals.set(\"literacyMaterialScriptRefVerseStart\", _.random(100, 200));\r",
									"\r",
									"pm.globals.set(\"literacyMaterialScriptRefBookEnd\", \"LiteracyMaterialScriptureReferencesBookEnd\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"pm.globals.set(\"literacyMaterialScriptRefChapterEnd\", _.random(26, 50));\r",
									"pm.globals.set(\"literacyMaterialScriptRefVerseEnd\", _.random(201, 300));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that minLength message is correct\", function () {\r",
									"    var minLength_message = jsonData.errors[0].extensions.errors['literacyMaterial.name'].minLength;\r",
									"    pm.expect(minLength_message).to.eql(\"name must be longer than or equal to 1 characters\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Mandatory Field Removed - Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"// // ScriptureReferences variables\r",
									"pm.globals.set(\"literacyMaterialScriptRefBookStart\", \"LiteracyMaterialScriptureReferencesBookStart\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"pm.globals.set(\"literacyMaterialScriptRefChapterStart\", _.random(1, 25));\r",
									"pm.globals.set(\"literacyMaterialScriptRefVerseStart\", _.random(100, 200));\r",
									"\r",
									"pm.globals.set(\"literacyMaterialScriptRefBookEnd\", \"LiteracyMaterialScriptureReferencesBookEnd\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"pm.globals.set(\"literacyMaterialScriptRefChapterEnd\", _.random(26, 50));\r",
									"pm.globals.set(\"literacyMaterialScriptRefVerseEnd\", _.random(201, 300));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"name\\\" of required type \\\"String!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n     \r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Not  Mandatory Field Blank -  ScriptRef start book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('literacyMaterialScriptRefBookStart')} ${pm.globals.get('literacyMaterialScriptRefChapterStart')}:${pm.globals.get('literacyMaterialScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('literacyMaterialScriptRefBookEnd')} ${pm.globals.get('literacyMaterialScriptRefChapterEnd')}:${pm.globals.get('literacyMaterialScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelEnd', expectedLabelEnd);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"literacyMaterial\": {\r\n            \"name\": \"{{literacyMaterialName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Not  Mandatory Field Removed  -  ScriptRef  start book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// // ScriptureReferences variables\r",
									"pm.globals.set(\"literacyMaterialScriptRefChapterStart\", _.random(1, 25));\r",
									"//pm.globals.set(\"literacyMaterialScriptRefVerseStart\", _.random(100, 200));\r",
									"pm.globals.set(\"literacyMaterialScriptRefBookEnd\", \"LiteracyMaterialScriptureReferencesBookEnd\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"pm.globals.set(\"literacyMaterialScriptRefChapterEnd\", _.random(26, 50));\r",
									"pm.globals.set(\"literacyMaterialScriptRefVerseEnd\", _.random(201, 300));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Not  Mandatory Field Blank -  ScriptRef  end book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('literacyMaterialScriptRefBookStart')} ${pm.globals.get('literacyMaterialScriptRefChapterStart')}:${pm.globals.get('literacyMaterialScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"// pm.globals.set('literacyMaterialScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('literacyMaterialScriptRefBookEnd')} ${pm.globals.get('literacyMaterialScriptRefChapterEnd')}:${pm.globals.get('literacyMaterialScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Not  Mandatory Field Removed -  ScriptRef  end book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"//ScriptureReferences variables\r",
									"pm.globals.set(\"literacyMaterialScriptRefBookStart\", \"LiteracyMaterialScriptureReferencesBookStart\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"pm.globals.set(\"literacyMaterialScriptRefChapterStart\", _.random(1, 25));\r",
									"pm.globals.set(\"literacyMaterialScriptRefVerseStart\", _.random(100, 200));\r",
									"\r",
									"//pm.globals.set(\"literacyMaterialScriptRefBookEnd\", \"LiteracyMaterialScriptureReferencesBookEnd\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"pm.globals.set(\"literacyMaterialScriptRefChapterEnd\", _.random(26, 50));\r",
									"pm.globals.set(\"literacyMaterialScriptRefVerseEnd\", _.random(201, 300));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create LiteracyMaterial - Only Required Inputs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"const moment = require('moment');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that LiteracyMaterial ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.createLiteracyMaterial.literacyMaterial.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"\r",
									"    pm.globals.set(\"literacyMaterialId\", id); //will be overwrriten once Create Litmat with ScriptRef start working\r",
									"});\r",
									"\r",
									"//will be overwrriten once Create Litmat with ScriptRef start working\r",
									"var literacyMaterial = JSON.stringify(jsonData.data.createLiteracyMaterial.literacyMaterial);\r",
									"pm.globals.set(\"literacyMaterial_data\", literacyMaterial);\r",
									"\r",
									"pm.test(\"Verifying that scriptureReferences are empty\", function () {\r",
									"    var scriptureReferences = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value;\r",
									"    var isEmpty = _.isEmpty(scriptureReferences);\r",
									"    pm.expect(isEmpty).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Parameter Mismatch- ScriptRef start book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book1\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Parameter Mismatch- ScriptRef  start chapter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"ScriptureReferenceInput\\\". Did you mean \\\"chapter\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter1\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Parameter Mismatch- ScriptRef  start verse",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"ScriptureReferenceInput\\\". Did you mean \\\"verse\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse1\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Parameter Mismatch- ScriptRef  end book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book1\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Parameter Mismatch- ScriptRef  end chapter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"ScriptureReferenceInput\\\". Did you mean \\\"chapter\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter1\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Parameter Mismatch- ScriptRef  end verse",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"ScriptureReferenceInput\\\". Did you mean \\\"verse\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse1\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Get literacyMaterial by Id ( Create LiteracyMaterial )",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('literacyMaterialScriptRefBookStart')} ${pm.globals.get('literacyMaterialScriptRefChapterStart')}:${pm.globals.get('literacyMaterialScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('literacyMaterialScriptRefBookEnd')} ${pm.globals.get('literacyMaterialScriptRefChapterEnd')}:${pm.globals.get('literacyMaterialScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"const moment = require('moment');\r",
									"\r",
									"// Saving data for future use\r",
									"var id = jsonData.data.createLiteracyMaterial.literacyMaterial.id;\r",
									"pm.globals.set(\"literacyMaterialId\", id);\r",
									"\r",
									"// Saving whole literacyMaterial Object to globals for future use\r",
									"var literacyMaterial = JSON.stringify(jsonData.data.createLiteracyMaterial.literacyMaterial);\r",
									"pm.globals.set(\"literacyMaterial_data\", literacyMaterial);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"literacyMaterial\": {\r\n            \"name\": \"{{literacyMaterialName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get LiteracyMaterial By Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var literacyMaterial_data = JSON.parse(pm.variables.get(\"literacyMaterial_data\"));\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verifying literacyMaterial ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.literacyMaterial.id;  \r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"// Verifying returned literacyMaterial info with recently stored literacyMaterial info\r",
									"pm.test(\"Verifying literacyMaterial's createdAt\", function () {\r",
									"    var createdAt = jsonData.data.literacyMaterial.createdAt;\r",
									"    pm.expect(createdAt).to.eql(literacyMaterial_data.createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial Name\", function () {\r",
									"    var literacyMaterialeName = jsonData.data.literacyMaterial.name.value; \r",
									"    pm.expect(literacyMaterialeName).to.eql(literacyMaterial_data.name.value);\r",
									"});\r",
									"\r",
									"\r",
									"//scriptureReferences\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences start book\", function () {\r",
									"    var startBook = jsonData.data.literacyMaterial.scriptureReferences.value[0].start.book; \r",
									"    pm.expect(startBook).to.eql(literacyMaterial_data.scriptureReferences.value[0].start.book); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences start chapter\", function () {\r",
									"    var startChapter = jsonData.data.literacyMaterial.scriptureReferences.value[0].start.chapter; \r",
									"    pm.expect(startChapter).to.eql(literacyMaterial_data.scriptureReferences.value[0].start.chapter); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences start verse\", function () {\r",
									"    var startVerse = jsonData.data.literacyMaterial.scriptureReferences.value[0].start.verse; \r",
									"    pm.expect(startVerse).to.eql(literacyMaterial_data.scriptureReferences.value[0].start.verse); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences start book name\", function () {\r",
									"    var startBookName = jsonData.data.literacyMaterial.scriptureReferences.value[0].start.bookName; \r",
									"    pm.expect(startBookName).to.eql(literacyMaterial_data.scriptureReferences.value[0].start.bookName); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences start label\", function () {\r",
									"    var startLabel = jsonData.data.literacyMaterial.scriptureReferences.value[0].start.label; \r",
									"    pm.expect(startLabel).to.eql(literacyMaterial_data.scriptureReferences.value[0].start.label); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences end book\", function () {\r",
									"    var endBook = jsonData.data.literacyMaterial.scriptureReferences.value[0].start.book; \r",
									"    pm.expect(endBook).to.eql(literacyMaterial_data.scriptureReferences.value[0].start.book); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences end chapter\", function () {\r",
									"    var endChapter = jsonData.data.literacyMaterial.scriptureReferences.value[0].end.chapter; \r",
									"    pm.expect(endChapter).to.eql(literacyMaterial_data.scriptureReferences.value[0].end.chapter); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences end verse\", function () {\r",
									"    var endVerse = jsonData.data.literacyMaterial.scriptureReferences.value[0].end.verse; \r",
									"    pm.expect(endVerse).to.eql(literacyMaterial_data.scriptureReferences.value[0].end.verse); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences end book name\", function () {\r",
									"    var endBookName = jsonData.data.literacyMaterial.scriptureReferences.value[0].end.bookName; \r",
									"    pm.expect(endBookName).to.eql(literacyMaterial_data.scriptureReferences.value[0].end.bookName); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences end label\", function () {\r",
									"    var endLabel = jsonData.data.literacyMaterial.scriptureReferences.value[0].end.label; \r",
									"    pm.expect(endLabel).to.eql(literacyMaterial_data.scriptureReferences.value[0].end.label); \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences label\", function () {\r",
									"    var label = jsonData.data.literacyMaterial.scriptureReferences.value[0].label; \r",
									"    pm.expect(label).to.eql(literacyMaterial_data.scriptureReferences.value[0].label); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences total verses\", function () {\r",
									"    var totalVerses = jsonData.data.literacyMaterial.scriptureReferences.value[0].totalVerses; \r",
									"    pm.expect(totalVerses).to.eql(literacyMaterial_data.scriptureReferences.value[0].totalVerses); \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query literacyMaterial($id: ID!) {\r\n  literacyMaterial(id: $id) {\r\n    id\r\n    createdAt\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n    name {\r\n      value\r\n      canRead\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"{{literacyMaterialId}}\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get LiteracyMaterial By id Mandatory Field Blank - id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is 400\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that language error message is correct\", function () {\r",
									"    var error_language_message = jsonData.errors[0].extensions.errors.id.IsId;  \r",
									"    pm.expect(error_language_message).to.eql(\"Invalid ID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query literacyMaterial($id: ID!) {\r\n  literacyMaterial(id: $id) {\r\n    id\r\n    createdAt\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n    name {\r\n      value\r\n      canRead\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get literacyMaterial By id Mandatory Field Removed  - id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query literacyMaterial($id: ID!) {\r\n  literacyMaterial(id: $id) {\r\n    id\r\n    createdAt\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n    name {\r\n      value\r\n      canRead\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get LiteracyMaterial By id Parameter Mismatch - id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query literacyMaterial($id: ID!) {\r\n  literacyMaterial(id: $id) {\r\n    id\r\n    createdAt\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n    name {\r\n      value\r\n      canRead\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id1\": \"{{literacyMaterialId}}\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get literacyMaterial By id Parameter Invalid - id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is 400\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that language error message is correct\", function () {\r",
									"    var error_language_message = jsonData.errors[0].extensions.errors.id.IsId;  \r",
									"    pm.expect(error_language_message).to.eql(\"Invalid ID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query literacyMaterial($id: ID!) {\r\n  literacyMaterial(id: $id) {\r\n    id\r\n    createdAt\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n    name {\r\n      value\r\n      canRead\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"!@#$%^&\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update LiteracyMaterial Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('literacyMaterialScriptRefBookStart')} ${pm.globals.get('literacyMaterialScriptRefChapterStart')}:${pm.globals.get('literacyMaterialScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('literacyMaterialScriptRefBookEnd')} ${pm.globals.get('literacyMaterialScriptRefChapterEnd')}:${pm.globals.get('literacyMaterialScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var literacyMaterial_data = JSON.parse(pm.variables.get(\"literacyMaterial_data\"));\r",
									"const moment = require('moment');\r",
									"var lodash = require('lodash');\r",
									"\r",
									"// get literacyMaterial object first having same id as recently updated literacyMaterial's id\r",
									"var myliteracyMaterial = lodash.find(jsonData.data.updateLiteracyMaterial.literacyMaterial, ['id', literacyMaterial_data.id]);\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that literacyMaterial ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateLiteracyMaterial.literacyMaterial.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial's createdAt is in Specific time format\", function () {\r",
									"    var time = jsonData.data.updateLiteracyMaterial.literacyMaterial.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial name is same as requested\", function () {\r",
									"    var name = jsonData.data.updateLiteracyMaterial.literacyMaterial.name.value;\r",
									"    pm.expect(name).to.eql(pm.globals.get('literacyMaterialName'));\r",
									"});\r",
									"\r",
									"\r",
									"//scriptureReferences\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences start book is same as requested\", function () {\r",
									"    var startBook = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.book;\r",
									"    pm.expect(startBook).to.eql(pm.globals.get('literacyMaterialScriptRefBookStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences start chapter is same as requested\", function () {\r",
									"    var startChapter = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.chapter;\r",
									"    pm.expect(startChapter).to.eql(pm.globals.get('literacyMaterialScriptRefChapterStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences start verse is same as requested\", function () {\r",
									"    var startVerse = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.verse;\r",
									"    pm.expect(startVerse).to.eql(pm.globals.get('literacyMaterialScriptRefVerseStart'));\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences start label is same as requested\", function () {\r",
									"    var startLabel = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.label;\r",
									"    pm.expect(startLabel).to.eql(pm.globals.get('literacyMaterialScriptRefLabelStart'));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences end book is same as requested\", function () {\r",
									"    var endBook = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.book;\r",
									"    pm.expect(endBook).to.eql(pm.globals.get('literacyMaterialScriptRefBookEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences end chapter is same as requested\", function () {\r",
									"    var endChapter = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.chapter;\r",
									"    pm.expect(endChapter).to.eql(pm.globals.get('literacyMaterialScriptRefChapterEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences end verse is same as requested\", function () {\r",
									"    var endVerse = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.verse;\r",
									"    pm.expect(endVerse).to.eql(pm.globals.get('literacyMaterialScriptRefVerseEnd'));\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences end label is same as requested\", function () {\r",
									"    var endlabel = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.label;\r",
									"    pm.expect(endlabel).to.eql(pm.globals.get('literacyMaterialScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"//static\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences label is same as requested\", function () {\r",
									"    var label = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].label;\r",
									"    pm.expect(label).to.eql(pm.globals.get('literacyMaterialScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences total verses is same as requested\", function () {\r",
									"    var totalVerses = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].totalVerses;\r",
									"    pm.expect(totalVerses).to.above(0);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLiteracyMaterial($input: UpdateLiteracyMaterialInput!) {\r\n  updateLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"literacyMaterial\": {\r\n            \"id\": \"{{literacyMaterialId}}\",\r\n            \"name\": \"{{literacyMaterialName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update LiteracyMaterial - Only Required Inputs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var literacyMaterial_data = JSON.parse(pm.variables.get(\"literacyMaterial_data\"));\r",
									"const moment = require('moment');\r",
									"var lodash = require('lodash');\r",
									"\r",
									"// get literacyMaterial object first having same id as recently updated literacyMaterial's id\r",
									"var myliteracyMaterial = lodash.find(jsonData.data.updateLiteracyMaterial.literacyMaterial, ['id', literacyMaterial_data.id]);\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that literacyMaterial ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateLiteracyMaterial.literacyMaterial.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial's createdAt is in Specific time format\", function () {\r",
									"    var time = jsonData.data.updateLiteracyMaterial.literacyMaterial.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial name is same as requested\", function () {\r",
									"    var name = jsonData.data.updateLiteracyMaterial.literacyMaterial.name.value;\r",
									"    pm.expect(name).to.eql(pm.globals.get('literacyMaterialName'));\r",
									"});\r",
									"\r",
									"\r",
									"//scriptureReferences\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences start book is same as requested\", function () {\r",
									"    var startBook = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.book;\r",
									"    pm.expect(startBook).to.eql(pm.globals.get('literacyMaterialScriptRefBookStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences start chapter is same as requested\", function () {\r",
									"    var startChapter = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.chapter;\r",
									"    pm.expect(startChapter).to.eql(pm.globals.get('literacyMaterialScriptRefChapterStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences start verse is same as requested\", function () {\r",
									"    var startVerse = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.verse;\r",
									"    pm.expect(startVerse).to.eql(pm.globals.get('literacyMaterialScriptRefVerseStart'));\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences start label is same as requested\", function () {\r",
									"    var startLabel = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.label;\r",
									"    pm.expect(startLabel).to.eql(pm.globals.get('literacyMaterialScriptRefLabelStart'));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences end book is same as requested\", function () {\r",
									"    var endBook = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.book;\r",
									"    pm.expect(endBook).to.eql(pm.globals.get('literacyMaterialScriptRefBookEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences end chapter is same as requested\", function () {\r",
									"    var endChapter = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.chapter;\r",
									"    pm.expect(endChapter).to.eql(pm.globals.get('literacyMaterialScriptRefChapterEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences end verse is same as requested\", function () {\r",
									"    var endVerse = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.verse;\r",
									"    pm.expect(endVerse).to.eql(pm.globals.get('literacyMaterialScriptRefVerseEnd'));\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences end label is same as requested\", function () {\r",
									"    var endlabel = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.label;\r",
									"    pm.expect(endlabel).to.eql(pm.globals.get('literacyMaterialScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"//static\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences label is same as requested\", function () {\r",
									"    var label = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].label;\r",
									"    pm.expect(label).to.eql(pm.globals.get('literacyMaterialScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences total verses is same as requested\", function () {\r",
									"    var totalVerses = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].totalVerses;\r",
									"    pm.expect(totalVerses).to.above(0);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLiteracyMaterial($input: UpdateLiteracyMaterialInput!) {\r\n  updateLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"literacyMaterial\": {\r\n            \"id\": \"{{literacyMaterialId}}\"\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update LiteracyMaterial Mandatory Field Removed - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Field \\\"id\\\" of required type \\\"ID!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLiteracyMaterial($input: UpdateLiteracyMaterialInput!) {\r\n  updateLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update  LiteracyMaterial Mandatory Field Blank - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is 400\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors['literacyMaterial.id'].IsId;\r",
									"    pm.expect(error_message).to.eql(\"Invalid ID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLiteracyMaterial($input: UpdateLiteracyMaterialInput!) {\r\n  updateLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"id\": \"\",\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update  LiteracyMaterial Not Mandatory Field Removed - Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that literacyMaterial ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateLiteracyMaterial.literacyMaterial.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterialName is equal to previous value\", function () {\r",
									"    var literacyMaterialName = jsonData.data.updateLiteracyMaterial.literacyMaterial.name.value;\r",
									"    pm.expect(literacyMaterialName).to.eql(pm.globals.get('literacyMaterialName'));\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLiteracyMaterial($input: UpdateLiteracyMaterialInput!) {\r\n  updateLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"id\": \"{{literacyMaterialId}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update  LiteracyMaterial Not Mandatory Field Blank - Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_code).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error displayName message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors['literacyMaterial.name'].minLength;\r",
									"    pm.expect(error_message).to.eql(\"name must be longer than or equal to 1 characters\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLiteracyMaterial($input: UpdateLiteracyMaterialInput!) {\r\n  updateLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"id\": \"{{literacyMaterialId}}\",\r\n      \"name\": \"\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update  LiteracyMaterial Not Mandatory Field Removed -  startBook",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLiteracyMaterial($input: UpdateLiteracyMaterialInput!) {\r\n  updateLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"id\": \"{{literacyMaterialId}}\",\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update  LiteracyMaterial Not Mandatory Field Blank -  startBook",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error ScriptureBook message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors['literacyMaterial.scriptureReferences.0.start.book'].ScriptureBook;\r",
									"    pm.expect(error_message).to.eql(\"Not a valid Bible book\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLiteracyMaterial($input: UpdateLiteracyMaterialInput!) {\r\n  updateLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"id\": \"{{literacyMaterialId}}\",\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update  LiteracyMaterial Not Mandatory Field Removed -  endBook",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLiteracyMaterial($input: UpdateLiteracyMaterialInput!) {\r\n  updateLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"id\": \"{{literacyMaterialId}}\",\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update  LiteracyMaterial Not Mandatory Field Blank -  endBook",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"// pm.globals.set('literacyMaterialScriptRefBookEnd', \"Genesis\");\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 3);\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 4);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error ScriptureBook message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors['literacyMaterial.scriptureReferences.0.end.book'].ScriptureBook;\r",
									"    pm.expect(error_message).to.eql(\"Not a valid Bible book\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLiteracyMaterial($input: UpdateLiteracyMaterialInput!) {\r\n  updateLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"id\": \"{{literacyMaterialId}}\",\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\":{{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Get All LiteracyMaterial ( Create LiteracyMaterial)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('literacyMaterialScriptRefBookStart')} ${pm.globals.get('literacyMaterialScriptRefChapterStart')}:${pm.globals.get('literacyMaterialScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('literacyMaterialScriptRefBookEnd')} ${pm.globals.get('literacyMaterialScriptRefChapterEnd')}:${pm.globals.get('literacyMaterialScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"var id = jsonData.data.createLiteracyMaterial.literacyMaterial.id;\r",
									"pm.globals.set(\"literacyMaterialId\", id);\r",
									"\r",
									"// Saving whole literacyMaterial Object to globals for future use\r",
									"var literacyMaterial = JSON.stringify(jsonData.data.createLiteracyMaterial.literacyMaterial);\r",
									"pm.globals.set(\"literacyMaterial_data\", literacyMaterial);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"literacyMaterial\": {\r\n            \"name\": \"{{literacyMaterialName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var literacyMaterial_data = JSON.parse(pm.variables.get(\"literacyMaterial_data\")); // Get stored literacyMaterial object\r",
									"const moment = require('moment');\r",
									"var lodash = require('lodash');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - Pagination\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;\r",
									"    pm.expect(total).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that hasMore is correct\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;\r",
									"    var hasMore = jsonData.data.literacyMaterials.hasMore;\r",
									"    if (Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) < total) {\r",
									"        pm.expect(hasMore).to.eql(true);\r",
									"    } else {\r",
									"        pm.expect(hasMore).to.eql(false);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that number of items returned are exact\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;                  // total returned in response\r",
									"    var returneditems = jsonData.data.literacyMaterials.items.length;   // no. of items returned in response array\r",
									"    var itemCount = Number(pm.globals.get('itemCount'));    // no. of items per page\r",
									"    var page = Number(pm.globals.get('page'));              // page number\r",
									"    var expectedItems = itemCount * page;                   // items we are expecting\r",
									"\r",
									"    if (expectedItems <= total) {\r",
									"        pm.expect(returneditems).to.eql(itemCount);\r",
									"    } else {\r",
									"        if ((expectedItems - total) < itemCount) {\r",
									"            var lastItems = total - ((itemCount * (page - 1)));   // items in last page\r",
									"            pm.expect(returneditems).to.eql(lastItems);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"/**\r",
									" * Setting up 'page' number to be used in next request\r",
									" * For locating recently created Object position on Specific page\r",
									" */\r",
									"var total = jsonData.data.literacyMaterials.total;\r",
									"var itemCount = Number(pm.globals.get('itemCount'));\r",
									"\r",
									"if (total > itemCount) {\r",
									"\r",
									"    if ((total % itemCount) == 0) {\r",
									"        var pageToset = total / itemCount;\r",
									"        pm.globals.set(\"page\", pageToset);\r",
									"    } else {\r",
									"        var pageToset = Math.floor(total / itemCount) + 1;\r",
									"        pm.globals.set(\"page\", pageToset);\r",
									"    }\r",
									"\r",
									"} else {\r",
									"    pm.globals.set(\"page\", 1);  // Set page to 1 if total <= itemCount\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Success - item Object",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"// Page is set from previous request test script based on total\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var literacyMaterial_data = JSON.parse(pm.variables.get(\"literacyMaterial_data\")); // Get stored literacyMaterial object\r",
									"const moment = require('moment');\r",
									"var lodash = require('lodash');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - Pagination\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;\r",
									"    pm.expect(total).to.be.above(0);\r",
									"});\r",
									"\r",
									"/**\r",
									" * Verifying recently created literacyMaterials's information with LiteracyMaterials object returned within items array\r",
									" */\r",
									"\r",
									"// get LiteracyMaterials object first having same id as recently created LiteracyMaterials's id\r",
									"var myliteracyMaterial = lodash.find(jsonData.data.literacyMaterials.items, ['id', literacyMaterial_data.id]);\r",
									"\r",
									"if (myliteracyMaterial == undefined) return;\r",
									"/**\r",
									" * As literacyMaterial listing results are sorted by 'name',\r",
									" * recently created literacyMaterial object may exist any where in the listing,\r",
									" * So we can not verify the object details if it's not within first page.\r",
									" */\r",
									"\r",
									"pm.test(\"Verify that recently created literacyMaterials ID is not blank or null\", function () {\r",
									"    var id = myliteracyMaterial.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created literacyMaterials's createdAt is in Specific time format\", function () {\r",
									"    var time = myliteracyMaterial.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created literacyMaterials's id\", function () {\r",
									"    var id = myliteracyMaterial.id;\r",
									"    pm.expect(id).to.eql(literacyMaterial_data.id);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created literacyMaterials's name\", function () {\r",
									"    var name = myliteracyMaterial.name.value;\r",
									"    pm.expect(name).to.eql(literacyMaterial_data.name.value);\r",
									"});\r",
									"\r",
									"\r",
									"//scriptureReferences\r",
									"pm.test(\"Verifying recently created literacyMaterials scriptureReferences start book\", function () {\r",
									"    var startBook = myliteracyMaterial.scriptureReferences.value[0].start.book;\r",
									"    pm.expect(startBook).to.eql(literacyMaterial_data.scriptureReferences.value[0].start.book);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created literacyMaterials scriptureReferences start chapter\", function () {\r",
									"    var startChapter = myliteracyMaterial.scriptureReferences.value[0].start.chapter;\r",
									"    pm.expect(startChapter).to.eql(literacyMaterial_data.scriptureReferences.value[0].start.chapter);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created literacyMaterials scriptureReferences start verse\", function () {\r",
									"    var startVerse = myliteracyMaterial.scriptureReferences.value[0].start.verse;\r",
									"    pm.expect(startVerse).to.eql(literacyMaterial_data.scriptureReferences.value[0].start.verse);\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verifying recently created literacyMaterials scriptureReferences start label\", function () {\r",
									"    var startLabel = myliteracyMaterial.scriptureReferences.value[0].start.label;\r",
									"    pm.expect(startLabel).to.eql(literacyMaterial_data.scriptureReferences.value[0].start.label);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verifying recently created literacyMaterials scriptureReferences end book\", function () {\r",
									"    var endBook = myliteracyMaterial.scriptureReferences.value[0].end.book;\r",
									"    pm.expect(endBook).to.eql(literacyMaterial_data.scriptureReferences.value[0].end.book);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created literacyMaterials scriptureReferences end chapter\", function () {\r",
									"    var endChapter = myliteracyMaterial.scriptureReferences.value[0].end.chapter;\r",
									"    pm.expect(endChapter).to.eql(literacyMaterial_data.scriptureReferences.value[0].end.chapter);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created literacyMaterials scriptureReferences end verse\", function () {\r",
									"    var endVerse = myliteracyMaterial.scriptureReferences.value[0].end.verse;\r",
									"    pm.expect(endVerse).to.eql(literacyMaterial_data.scriptureReferences.value[0].end.verse);\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verifying recently created literacyMaterials scriptureReferences end label\", function () {\r",
									"    var endLabel = myliteracyMaterial.scriptureReferences.value[0].end.label;\r",
									"    pm.expect(endLabel).to.eql(literacyMaterial_data.scriptureReferences.value[0].end.label);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created literacyMaterials scriptureReferences  label\", function () {\r",
									"    var label = myliteracyMaterial.scriptureReferences.value[0].label;\r",
									"    pm.expect(label).to.eql(literacyMaterial_data.scriptureReferences.value[0].label);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created literacyMaterials scriptureReferences totalVerses\", function () {\r",
									"    var totalVerses = myliteracyMaterial.scriptureReferences.value[0].totalVerses;\r",
									"    pm.expect(totalVerses).to.eql(literacyMaterial_data.scriptureReferences.value[0].totalVerses);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Success - total",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 10);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - total\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;  \r",
									"    pm.expect(total).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Success - hasMore - True",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 10);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - hasMore\r",
									"pm.test(\"Verify that hasMore is true Only when literacyMaterial items are still available\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;\r",
									"    var hasMore = jsonData.data.literacyMaterials.hasMore;  \r",
									"    if(Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) < total){\r",
									"        pm.expect(hasMore).to.eql(true);\r",
									"    } else {\r",
									"        pm.expect(hasMore).to.eql(false);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Success - hasMore - False",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 10);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - hasMore\r",
									"pm.test(\"Verify that hasMore is false Only when no more literacyMaterial items available\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;\r",
									"    var hasMore = jsonData.data.literacyMaterials.hasMore;  \r",
									"    if(Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) >= total){\r",
									"        pm.expect(hasMore).to.eql(false);\r",
									"    } else{\r",
									"        pm.expect(hasMore).to.eql(true);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.literacyMaterials.items[0].id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Success - items",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - no. of items are exact\r",
									"pm.test(\"Verify that number of items returned are exact\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;                  // total returned in response\r",
									"    var returneditems = jsonData.data.literacyMaterials.items.length;   // no. of items returned in response array\r",
									"    var itemCount = Number(pm.globals.get('itemCount'));    // no. of items per page\r",
									"    var page = Number(pm.globals.get('page'));              // page number\r",
									"    var expectedItems = itemCount * page;                   // items we are expecting\r",
									"\r",
									"    if (expectedItems <= total) {\r",
									"        pm.expect(returneditems).to.eql(itemCount);\r",
									"    } else {\r",
									"        if ((expectedItems - total) < itemCount) {\r",
									"            var lastItems = total - ((itemCount * (page - 1)));   // items in last page\r",
									"            pm.expect(returneditems).to.eql(lastItems);\r",
									"        }\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Sort Litercy by Name ( Create Litercy Material)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"// Changed for sorting purpose\r",
									"pm.globals.set(\"literacyMaterialName\", \"automation_LiteracyMaterialsort\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('literacyMaterialScriptRefBookStart')} ${pm.globals.get('literacyMaterialScriptRefChapterStart')}:${pm.globals.get('literacyMaterialScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('literacyMaterialScriptRefBookEnd')} ${pm.globals.get('literacyMaterialScriptRefChapterEnd')}:${pm.globals.get('literacyMaterialScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"literacyMaterial\": {\r\n            \"name\": \"{{literacyMaterialName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for FilterSort Litercy by Name ( Create Litercy Material)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"// Changing name for FILTER + SORT purpose\r",
									"pm.globals.set(\"literacyMaterialName\", \"FilterSortLiteracyName \" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('literacyMaterialScriptRefBookStart')} ${pm.globals.get('literacyMaterialScriptRefChapterStart')}:${pm.globals.get('literacyMaterialScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('literacyMaterialScriptRefBookEnd')} ${pm.globals.get('literacyMaterialScriptRefChapterEnd')}:${pm.globals.get('literacyMaterialScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelEnd', expectedLabelEnd);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"literacyMaterial\": {\r\n            \"name\": \"{{literacyMaterialName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Sort Litercy by Name ( Create Litercy Material 2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"// Changing name for FILTER + SORT purpose\r",
									"pm.globals.set(\"literacyMaterialName\", \"Automation_Litercysort \" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences variables\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('literacyMaterialScriptRefBookStart')} ${pm.globals.get('literacyMaterialScriptRefChapterStart')}:${pm.globals.get('literacyMaterialScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('literacyMaterialScriptRefBookEnd')} ${pm.globals.get('literacyMaterialScriptRefChapterEnd')}:${pm.globals.get('literacyMaterialScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelEnd', expectedLabelEnd);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"literacyMaterial\": {\r\n            \"name\": \"{{literacyMaterialName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterialsSuccess - name sorting ASC",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 100);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var lodash = require('lodash');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;  \r",
									"    pm.expect(total).to.be.above(0);\r",
									"});\r",
									"\r",
									"//Test Specific - Name sorting ASC\r",
									"pm.test(\"Verify that items are sorted by 'name' and orderd by 'ASC' order \", function () {\r",
									"\r",
									"    var responseBody = jsonData.data.literacyMaterials.items;\r",
									"    var expectedSortedOrder = lodash.orderBy(responseBody, item => item.name.value.toLowerCase(), ['asc']);\r",
									"    pm.expect(responseBody).to.eql(expectedSortedOrder);\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials  Success - name sorting DESC",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 100);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"DESC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var lodash = require('lodash');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;  \r",
									"    pm.expect(total).to.be.above(0);\r",
									"});\r",
									"\r",
									"//Test Specific - Name sorting DESC\r",
									"pm.test(\"Verify that items are sorted by 'name' and orderd by 'DESC' order \", function () {\r",
									"\r",
									"    var responseBody = jsonData.data.literacyMaterials.items;\r",
									"    var expectedSortedOrder = lodash.orderBy(responseBody, item => item.name.value.toLowerCase(), ['desc']);\r",
									"    pm.expect(responseBody).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials  Not Mandatory Field Removed - count",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that number of items returned is equal to total\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;\r",
									"    var items = jsonData.data.literacyMaterials.items.length;\r",
									"    if (total <= 25)    // 25 is maximum db items limit returned per page when count is not specified\r",
									"        pm.expect(items).to.eql(total);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterial Not Mandatory Field Blank - sort",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"// Test Specific\r",
									"pm.test(\"PENDING >> Similar to BUG #776(closed-Sprint 13) for Users (Sort Field allows empty value/unusual characters)\", function () {\r",
									"\r",
									"    if (jsonData.data) {\r",
									"        pm.expect(\"BACKEND\").to.eql(\"PENDING\"); // fail forcefully\r",
									"    } else {\r",
									"        pm.expect(\"WRITE TEST CASES\").to.eql(\"ERRORS >>> \" + jsonData.errors[0].message);\r",
									"    }\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"// pm.test(\"Verify that error message is correct\", function () {\r",
									"//     var error_message = jsonData.errors[0].message;  \r",
									"//     pm.expect(error_message).to.include(\"Variable `DESC` not defined\");\r",
									"// });\r",
									"\r",
									"// pm.test(\"Verify that error code is InternalServerError\", function () {\r",
									"//     var error_code = jsonData.errors[0].extensions.code;  \r",
									"//     pm.expect(error_code).to.eql(\"InternalServerError\");\r",
									"// });\r",
									"\r",
									"// pm.test(\"Verify that error status is 500\", function () {\r",
									"//     var error_status = jsonData.errors[0].extensions.status;  \r",
									"//     pm.expect(error_status).to.eql(500);\r",
									"// });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Not Mandatory Field Blank - order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Order\\\" enum\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Parameter Mismatch - count",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"LiteracyMaterialListInput\\\". Did you mean \\\"count\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count1\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Parameter Mismatch - page",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"LiteracyMaterialListInput\\\". Did you mean \\\"page\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page1\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Parameter Mismatch - sort",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"LiteracyMaterialListInput\\\". Did you mean \\\"sort\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort1\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Parameter Mismatch - order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"LiteracyMaterialListInput\\\". Did you mean \\\"order\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order1\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Parameter  Invalid - count min",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that count error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors.count.min;  \r",
									"    pm.expect(error_message).to.eql(\"count must not be less than 1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": 0,\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Parameter  Invalid - count max",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that count error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors.count.max;  \r",
									"    pm.expect(error_message).to.eql(\"count must not be greater than 100\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": 159,\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Parameter Invalid - page",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that page error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors.page.min;  \r",
									"    pm.expect(error_message).to.eql(\"page must not be less than 1\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{count}},\r\n        \"page\": 0,\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Parameter Invalid - sort",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"PENDING >> Similar to BUG #776(closed-Sprint 13) for Users (Sort Field allows empty value/unusual characters)\", function () {\r",
									"\r",
									"    if (jsonData.data) {\r",
									"        pm.expect(\"BACKEND\").to.eql(\"PENDING\"); // fail forcefully\r",
									"    } else {\r",
									"        pm.expect(\"WRITE TEST CASES\").to.eql(\"ERRORS >>> \" + jsonData.errors[0].message);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{count}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"qwerty\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Parameter Invalid - order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Order\\\" enum\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{count}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"11 #$%% ^&*\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete LiteracyMaterial Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that LiteracyMaterial is deleted\", function () {\r",
									"    pm.expect(jsonData.data.deleteLiteracyMaterial).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteLiteracyMaterial($id: ID!) {\r\n  deleteLiteracyMaterial(id: $id)\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"{{literacyMaterialId}}\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete LiteracyMaterial Mandatory Field Blank - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is 400\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that education error message is correct\", function () {\r",
									"    var error_education_message = jsonData.errors[0].extensions.errors.id.IsId;  \r",
									"    pm.expect(error_education_message).to.eql(\"Invalid ID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteLiteracyMaterial($id: ID!) {\r\n  deleteLiteracyMaterial(id: $id)\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete LiteracyMaterial Mandatory Field Removed  - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteLiteracyMaterial($id: ID!) {\r\n  deleteLiteracyMaterial(id: $id)\r\n}\r\n",
								"variables": "{\r\n  \r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete LiteracyMaterial Parameter Mismatch - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteLiteracyMaterial($id: ID!) {\r\n  deleteLiteracyMaterial(id: $id)\r\n}\r\n",
								"variables": "{\r\n  \"id1\": \"{{literacyMaterialId}}\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete LiteracyMaterial Parameter - Invalid - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that partnership ID error message is correct\", function () {\r",
									"    var error_partnershipId = jsonData.errors[0].extensions.errors.id.IsId;\r",
									"    pm.expect(error_partnershipId).to.eql(\"Invalid ID\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteLiteracyMaterial($id: ID!) {\r\n  deleteLiteracyMaterial(id: $id)\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"---- @@@ hhkjh 2323\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
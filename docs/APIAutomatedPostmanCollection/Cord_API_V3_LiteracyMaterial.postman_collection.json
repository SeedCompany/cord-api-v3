{
	"info": {
		"_postman_id": "653edaa2-4fa3-4b93-8f9f-8ebd72ab8bd9",
		"name": "Cord_API_V3_LiteracyMaterial",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Pre-req ( Session + Register + Login ) for LiteracyMaterial",
			"item": [
				{
					"name": "Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1645151b-0648-43e9-91b9-faf5afec91fb",
								"exec": [
									"var response = pm.response.json();\r",
									"pm.globals.set(\"token\", response.data.session.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Write your query or mutation here\r\nquery {\r\n  session(browser: false) {\r\n    user {\r\n      id,\r\n      email\r\n      {\r\n        value\r\n      }\r\n      realFirstName\r\n      {\r\n        value\r\n      }\r\n      createdAt\r\n      displayLastName\r\n      {\r\n         value\r\n      }\r\n      \r\n      \r\n      \r\n    },\r\n    token\r\n  }\r\n}",
								"variables": ""
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e623a406-c17b-42db-9ae0-095ce69d17c3",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// This is safe check to prevent failing futher cases If the Root User is already Created\r",
									"if (jsonData.errors) {\r",
									"    if (jsonData.errors.length) return;\r",
									"}\r",
									"\r",
									"//Saving data for future use\r",
									"var id = jsonData.data.register.user.id;\r",
									"pm.globals.set(\"userid\", id);\r",
									"\r",
									"var user = JSON.stringify(jsonData.data.register.user);\r",
									"pm.globals.set(\"user_data\", user);\r",
									"\r",
									"var email = jsonData.data.register.user.email.value;\r",
									"pm.globals.set(\"email\", email);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27442da9-bf8d-46d3-963b-bc1abac7c712",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"realFirstName\", \"FirstName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"realLastName\", \"LastName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"email\", \"email\" + moment().format(\"DDMYYYYhhmmss\") + \"@test.com\");\r",
									"pm.globals.set(\"password\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"displayFirstName\", \"DisplayFirstName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"displayLastName\", \"DisplayLastName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"phone\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));\r",
									"\r",
									"var timezoneObject = {\r",
									"    \"name\": \"Europe/Andorra\",\r",
									"    \"lat\": 42.5,\r",
									"    \"long\": 1.5167,\r",
									"    \"countries\": [\r",
									"        {\r",
									"            \"code\": \"AD\",\r",
									"            \"name\": \"Andorra\",\r",
									"            \"zones\": [\r",
									"                {\r",
									"                    \"name\": \"Europe/Andorra\",\r",
									"                    \"lat\": 42.5,\r",
									"                    \"long\": 1.5167,\r",
									"                    \"countries\": [\r",
									"                        {\r",
									"                            \"code\": \"AD\",\r",
									"                            \"name\": \"Andorra\"\r",
									"                        }\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"};\r",
									"pm.globals.set('timezoneObject', JSON.stringify(timezoneObject));\r",
									"pm.globals.set(\"timezone\", timezoneObject.name);\r",
									"\r",
									"pm.globals.set(\"about\", \"I'm Tester\");\r",
									"\r",
									"pm.globals.set(\"userTitle\", \"Tester\");\r",
									"\r",
									"// Taking random value for the User status from pre-defined possible values\r",
									"var userStatusArray = ['Active','Disabled'];\r",
									"var randomNumber = Math.floor(Math.random()*userStatusArray.length);\r",
									"// pm.globals.set('userStatus', userStatusArray[randomNumber]);\r",
									"pm.globals.set(\"userStatus\", \"Active\");\r",
									"\r",
									"var userRolesArray = ['BibleTranslationLiaison',\r",
									"'Consultant',\r",
									"'ConsultantManager',\r",
									"'Controller',\r",
									"'Development',\r",
									"'ExecutiveDevelopmentRepresentative',\r",
									"'ExecutiveLeadership',\r",
									"'FieldOperationsDirector',\r",
									"'FieldPartner',\r",
									"'FinancialAnalyst',\r",
									"'Intern',\r",
									"'Liaison',\r",
									"'LeadFinancialAnalyst',\r",
									"'Mentor',\r",
									"'OfficeOfThePresident',\r",
									"'ProjectManager',\r",
									"'RegionalCommunicationsCoordinator',\r",
									"'RegionalDirector',\r",
									"'SupportingProjectManager',\r",
									"'Translator',\r",
									"'Writer'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random()*userRolesArray.length);\r",
									"pm.globals.set('userRoles', userRolesArray[randomNumber]);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation register($input: RegisterInput!) {\r\n  register(input: $input) {\r\n    user {\r\n      id\r\n      fullName\r\n      firstName\r\n      avatarLetters\r\n      createdAt\r\n      email {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      phone {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      about {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      status {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      roles {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      title {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      timezone {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          name\r\n          lat\r\n          long\r\n          countries {\r\n            code\r\n            name\r\n            zones {\r\n              name\r\n              lat\r\n              long\r\n              countries {\r\n                code\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      unavailabilities {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          description {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          start\r\n          end\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      organizations {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          name {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          avatarLetters\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      education {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          degree {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          major {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          institution {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"realFirstName\": \"Piyush\",\r\n        \"realLastName\": \"Patel\",\r\n        \"email\": \"{{login_email}}\",\r\n        \"password\": \"{{login_password}}\",\r\n        \"displayFirstName\": \"{{displayFirstName}}\",\r\n        \"displayLastName\": \"{{displayLastName}}\",\r\n        \"phone\": \"{{phone}}\",\r\n        \"timezone\": \"{{timezone}}\",\r\n        \"status\": \"{{userStatus}}\",\r\n        \"title\": \"{{userTitle}}\",\r\n        \"roles\": \"{{userRoles}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd459367-38c6-41c5-98f9-4d6d1cf8609a",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var id = jsonData.data.login.user.id;",
									"pm.globals.set(\"userid\", id);",
									"",
									"var email = jsonData.data.login.user.email.value;",
									"pm.globals.set(\"email\", email);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bf6eaab9-c138-44d2-ab3e-d92c00c7b918",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation login($input: LoginInput!) {\r\n  login(input: $input) {\r\n    user {\r\n      id\r\n      fullName\r\n      firstName\r\n      avatarLetters\r\n      createdAt\r\n      email {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      phone {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      about {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      status {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      roles {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      title {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      timezone {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          name\r\n          lat\r\n          long\r\n          countries {\r\n            code\r\n            name\r\n            zones {\r\n              name\r\n              lat\r\n              long\r\n              countries {\r\n                code\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      unavailabilities {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          description {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          start\r\n          end\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      organizations {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          name {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          avatarLetters\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      education {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          degree {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          major {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          institution {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n   \"input\": {\r\n      \"email\": \"{{login_email}}\",\r\n      \"password\": \"{{login_password}}\"\r\n   }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cc8b7c54-5132-457a-b7d0-71ec404cf1ec",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b2582c87-b26a-4e76-829f-441a8aeff0ff",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Literacy Material",
			"item": [
				{
					"name": "Create LiteracyMaterial Success - Same Book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "62be654d-85b7-4826-903f-785c5bb54ce5",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('literacyMaterialScriptRefBookStart')} ${pm.globals.get('literacyMaterialScriptRefChapterStart')}:${pm.globals.get('literacyMaterialScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('literacyMaterialScriptRefBookEnd')} ${pm.globals.get('literacyMaterialScriptRefChapterEnd')}:${pm.globals.get('literacyMaterialScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "787e6297-f67d-41c6-b936-1372a2b9d0ce",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"const moment = require('moment');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that LiteracyMaterial ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.createLiteracyMaterial.literacyMaterial.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"\r",
									"    // Saving data for future use\r",
									"    pm.globals.set(\"literacyMaterialId\", id);\r",
									"});\r",
									"\r",
									"// Saving whole literacyMaterial Object to globals for future use\r",
									"var literacyMaterial = JSON.stringify(jsonData.data.createLiteracyMaterial.literacyMaterial);\r",
									"pm.globals.set(\"literacyMaterial_data\", literacyMaterial);\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial's createdAt is in Specific time format\", function () {\r",
									"    var time = jsonData.data.createLiteracyMaterial.literacyMaterial.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial Name is same as requested\", function () {\r",
									"    var name = jsonData.data.createLiteracyMaterial.literacyMaterial.name.value;\r",
									"    pm.expect(name).to.eql(pm.globals.get('literacyMaterialName'));\r",
									"});\r",
									"\r",
									"\r",
									"//scriptureReferences\r",
									"//Static\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences total verses is same as requested\", function () {\r",
									"    var totalVerses = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].totalVerses;\r",
									"    pm.expect(totalVerses).to.eql(1);\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify literacyMaterial scriptureReferences label\", function () {\r",
									"    var label = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].label;\r",
									"    pm.expect(label).to.eql(pm.globals.get('literacyMaterialScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences start book is same as requested\", function () {\r",
									"    var startBook = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.book;\r",
									"    pm.expect(startBook).to.eql(pm.globals.get('literacyMaterialScriptRefBookStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences start label is same as requested\", function () {\r",
									"    var startLabel = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.label;\r",
									"    pm.expect(startLabel).to.eql(pm.globals.get('literacyMaterialScriptRefLabelStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences start chapter is same as requested\", function () {\r",
									"    var startChapter = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.chapter;\r",
									"    pm.expect(startChapter).to.eql(pm.globals.get('literacyMaterialScriptRefChapterStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences start verse is same as requested\", function () {\r",
									"    var startVerse = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.verse;\r",
									"    pm.expect(startVerse).to.eql(pm.globals.get('literacyMaterialScriptRefVerseStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences end book is same as requested\", function () {\r",
									"    var endBook = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.book;\r",
									"    pm.expect(endBook).to.eql(pm.globals.get('literacyMaterialScriptRefBookEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences end label is same as requested\", function () {\r",
									"    var endLabel = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.label;\r",
									"    pm.expect(endLabel).to.eql(pm.globals.get('literacyMaterialScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences end chapter is same as requested\", function () {\r",
									"    var endChapter = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.chapter;\r",
									"    pm.expect(endChapter).to.eql(pm.globals.get('literacyMaterialScriptRefChapterEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences end verse is same as requested\", function () {\r",
									"    var endVerse = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.verse;\r",
									"    pm.expect(endVerse).to.eql(pm.globals.get('literacyMaterialScriptRefVerseEnd'));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"literacyMaterial\": {\r\n            \"name\": \"{{literacyMaterialName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create LiteracyMaterial Success - Diffrent Book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b5b57600-b181-4aff-bbe8-c9509285895f",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('literacyMaterialScriptRefBookStart')} ${pm.globals.get('literacyMaterialScriptRefChapterStart')}:${pm.globals.get('literacyMaterialScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefBookEnd', \"Exodus\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 4);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 5);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('literacyMaterialScriptRefBookEnd')} ${pm.globals.get('literacyMaterialScriptRefChapterEnd')}:${pm.globals.get('literacyMaterialScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "21356b2a-c5b4-4c7a-811c-2c233d24a5ca",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"const moment = require('moment');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that LiteracyMaterial ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.createLiteracyMaterial.literacyMaterial.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"\r",
									"    // Saving data for future use\r",
									"    pm.globals.set(\"literacyMaterialId\", id);\r",
									"});\r",
									"\r",
									"// Saving whole literacyMaterial Object to globals for future use\r",
									"var literacyMaterial = JSON.stringify(jsonData.data.createLiteracyMaterial.literacyMaterial);\r",
									"pm.globals.set(\"literacyMaterial_data\", literacyMaterial);\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial's createdAt is in Specific time format\", function () {\r",
									"    var time = jsonData.data.createLiteracyMaterial.literacyMaterial.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial Name is same as requested\", function () {\r",
									"    var name = jsonData.data.createLiteracyMaterial.literacyMaterial.name.value;\r",
									"    pm.expect(name).to.eql(pm.globals.get('literacyMaterialName'));\r",
									"});\r",
									"\r",
									"\r",
									"//scriptureReferences\r",
									"//Static\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences total verses is same as requested\", function () {\r",
									"    var totalVerses = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].totalVerses;\r",
									"    pm.expect(totalVerses).to.eql(1);\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify literacyMaterial scriptureReferences label\", function () {\r",
									"    var label = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].label;\r",
									"    var startLabel = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.label;\r",
									"    var endLabel = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.label;\r",
									"    var expectedLabel = startLabel + \"-\" + endLabel;\r",
									"    pm.expect(label).to.eql(expectedLabel);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences start book is same as requested\", function () {\r",
									"    var startBook = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.book;\r",
									"    pm.expect(startBook).to.eql(pm.globals.get('literacyMaterialScriptRefBookStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences start label is same as requested\", function () {\r",
									"    var startLabel = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.label;\r",
									"    pm.expect(startLabel).to.eql(pm.globals.get('literacyMaterialScriptRefLabelStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences start chapter is same as requested\", function () {\r",
									"    var startChapter = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.chapter;\r",
									"    pm.expect(startChapter).to.eql(pm.globals.get('literacyMaterialScriptRefChapterStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences start verse is same as requested\", function () {\r",
									"    var startVerse = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.verse;\r",
									"    pm.expect(startVerse).to.eql(pm.globals.get('literacyMaterialScriptRefVerseStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences end book is same as requested\", function () {\r",
									"    var endBook = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.book;\r",
									"    pm.expect(endBook).to.eql(pm.globals.get('literacyMaterialScriptRefBookEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences end label is same as requested\", function () {\r",
									"    var endLabel = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.label;\r",
									"    pm.expect(endLabel).to.eql(pm.globals.get('literacyMaterialScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences end chapter is same as requested\", function () {\r",
									"    var endChapter = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.chapter;\r",
									"    pm.expect(endChapter).to.eql(pm.globals.get('literacyMaterialScriptRefChapterEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial scriptureReferences end verse is same as requested\", function () {\r",
									"    var endVerse = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.verse;\r",
									"    pm.expect(endVerse).to.eql(pm.globals.get('literacyMaterialScriptRefVerseEnd'));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"literacyMaterial\": {\r\n            \"name\": \"{{literacyMaterialName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Mandatory Field Blank - Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7c508d14-ef9f-4e20-ab42-37f4418b97ff",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"//pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// // ScriptureReferences variables\r",
									"pm.globals.set(\"literacyMaterialScriptRefBookStart\", \"LiteracyMaterialScriptureReferencesBookStart\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"pm.globals.set(\"literacyMaterialScriptRefChapterStart\", _.random(1, 25));\r",
									"pm.globals.set(\"literacyMaterialScriptRefVerseStart\", _.random(100, 200));\r",
									"\r",
									"pm.globals.set(\"literacyMaterialScriptRefBookEnd\", \"LiteracyMaterialScriptureReferencesBookEnd\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"pm.globals.set(\"literacyMaterialScriptRefChapterEnd\", _.random(26, 50));\r",
									"pm.globals.set(\"literacyMaterialScriptRefVerseEnd\", _.random(201, 300));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "955eac58-1a17-4628-a1d0-8b09bc87c92c",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that minLength message is correct\", function () {\r",
									"    var minLength_message = jsonData.errors[0].extensions.errors['literacyMaterial.name'].minLength;\r",
									"    pm.expect(minLength_message).to.eql(\"name must be longer than or equal to 1 characters\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Mandatory Field Removed - Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "140e5eca-83a2-4fae-8dee-22539a13ff3c",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"// // ScriptureReferences variables\r",
									"pm.globals.set(\"literacyMaterialScriptRefBookStart\", \"LiteracyMaterialScriptureReferencesBookStart\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"pm.globals.set(\"literacyMaterialScriptRefChapterStart\", _.random(1, 25));\r",
									"pm.globals.set(\"literacyMaterialScriptRefVerseStart\", _.random(100, 200));\r",
									"\r",
									"pm.globals.set(\"literacyMaterialScriptRefBookEnd\", \"LiteracyMaterialScriptureReferencesBookEnd\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"pm.globals.set(\"literacyMaterialScriptRefChapterEnd\", _.random(26, 50));\r",
									"pm.globals.set(\"literacyMaterialScriptRefVerseEnd\", _.random(201, 300));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "34e13f2b-6454-4bd8-87b5-582eeb2bd2ba",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"name\\\" of required type \\\"String!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n     \r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Not  Mandatory Field Blank -  ScriptRef start book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0b539712-44e7-4f4a-9c82-b395909ec1e7",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('literacyMaterialScriptRefBookStart')} ${pm.globals.get('literacyMaterialScriptRefChapterStart')}:${pm.globals.get('literacyMaterialScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('literacyMaterialScriptRefBookEnd')} ${pm.globals.get('literacyMaterialScriptRefChapterEnd')}:${pm.globals.get('literacyMaterialScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelEnd', expectedLabelEnd);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fc47edb2-b552-4bae-9473-f427c1a862b6",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"literacyMaterial\": {\r\n            \"name\": \"{{literacyMaterialName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Not  Mandatory Field Removed  -  ScriptRef  start book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9e7802ff-b268-4535-b3d1-1fef2cc43a5c",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// // ScriptureReferences variables\r",
									"pm.globals.set(\"literacyMaterialScriptRefChapterStart\", _.random(1, 25));\r",
									"//pm.globals.set(\"literacyMaterialScriptRefVerseStart\", _.random(100, 200));\r",
									"pm.globals.set(\"literacyMaterialScriptRefBookEnd\", \"LiteracyMaterialScriptureReferencesBookEnd\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"pm.globals.set(\"literacyMaterialScriptRefChapterEnd\", _.random(26, 50));\r",
									"pm.globals.set(\"literacyMaterialScriptRefVerseEnd\", _.random(201, 300));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7e09c59e-0ae5-4c55-a943-f374f6389835",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Not  Mandatory Field Blank -  ScriptRef  end book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d216f97c-e152-45e0-885d-dbb1eb7acefa",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"//ScriptureReferences variables\r",
									"pm.globals.set(\"literacyMaterialScriptRefBookStart\", \"LiteracyMaterialScriptureReferencesBookStart\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"pm.globals.set(\"literacyMaterialScriptRefChapterStart\", _.random(1, 25));\r",
									"// pm.globals.set(\"literacyMaterialScriptRefVerseStart\", _.random(100, 200));\r",
									"\r",
									"//pm.globals.set(\"literacyMaterialScriptRefBookEnd\", \"LiteracyMaterialScriptureReferencesBookEnd\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"pm.globals.set(\"literacyMaterialScriptRefChapterEnd\", _.random(26, 50));\r",
									"pm.globals.set(\"literacyMaterialScriptRefVerseEnd\", _.random(201, 300));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4f6ae666-f972-41f1-97ac-e39029f33a37",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Not  Mandatory Field Removed -  ScriptRef  end book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a28244f5-71d3-4144-9dda-05b87cd1f48e",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"//ScriptureReferences variables\r",
									"pm.globals.set(\"literacyMaterialScriptRefBookStart\", \"LiteracyMaterialScriptureReferencesBookStart\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"pm.globals.set(\"literacyMaterialScriptRefChapterStart\", _.random(1, 25));\r",
									"pm.globals.set(\"literacyMaterialScriptRefVerseStart\", _.random(100, 200));\r",
									"\r",
									"//pm.globals.set(\"literacyMaterialScriptRefBookEnd\", \"LiteracyMaterialScriptureReferencesBookEnd\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"pm.globals.set(\"literacyMaterialScriptRefChapterEnd\", _.random(26, 50));\r",
									"pm.globals.set(\"literacyMaterialScriptRefVerseEnd\", _.random(201, 300));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6d10e13c-c4d3-4631-91ec-82b60dbcd514",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create LiteracyMaterial - Only Required Inputs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55626531-0b47-4534-b323-aa9a7f326a9f",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6cd95f75-d437-42bc-ad74-deadf5a2ae8f",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"const moment = require('moment');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that LiteracyMaterial ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.createLiteracyMaterial.literacyMaterial.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"\r",
									"    pm.globals.set(\"literacyMaterialId\", id); //will be overwrriten once Create Litmat with ScriptRef start working\r",
									"});\r",
									"\r",
									"//will be overwrriten once Create Litmat with ScriptRef start working\r",
									"var literacyMaterial = JSON.stringify(jsonData.data.createLiteracyMaterial.literacyMaterial);\r",
									"pm.globals.set(\"literacyMaterial_data\", literacyMaterial);\r",
									"\r",
									"pm.test(\"Verifying that scriptureReferences are empty\", function () {\r",
									"    var scriptureReferences = jsonData.data.createLiteracyMaterial.literacyMaterial.scriptureReferences.value;\r",
									"    var isEmpty = _.isEmpty(scriptureReferences);\r",
									"    pm.expect(isEmpty).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Parameter Mismatch- ScriptRef start book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1a98f292-a062-4796-bed1-9c4ce652c74b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "36e26e91-cf67-4567-8ed2-1c27e4a5fcad",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book1\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Parameter Mismatch- ScriptRef  start chapter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "04a2e839-723e-403e-abee-06300cfc5cd5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "256e37cf-eea9-4af0-a281-e9e1400a5f14",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"ScriptureReferenceInput\\\". Did you mean \\\"chapter\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter1\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Parameter Mismatch- ScriptRef  start verse",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a3f5a7ac-4ee1-46aa-b393-498340fff6ec",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "982ce76f-2722-4a23-a241-6c3ec76df74c",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"ScriptureReferenceInput\\\". Did you mean \\\"verse\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse1\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Parameter Mismatch- ScriptRef  end book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "696dd687-f1fb-45f6-b4fe-6481a865dba1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f7b0d044-443e-4c27-945f-7c0b9d932e62",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book1\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Parameter Mismatch- ScriptRef  end chapter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "40d1805b-8d8d-42b7-847b-1e105ba5870c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c56a4a66-834b-49ee-a57f-f6cb22f65326",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"ScriptureReferenceInput\\\". Did you mean \\\"chapter\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter1\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  LiteracyMaterial Parameter Mismatch- ScriptRef  end verse",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "36527815-92e8-4e60-ac8d-f7a792bd8df3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "736662a7-ed59-43bb-8e42-b9794b4b5e05",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"ScriptureReferenceInput\\\". Did you mean \\\"verse\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse1\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Get literacyMaterial by Id ( Create LiteracyMaterial )",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "88d229da-51ca-432e-acca-0d3968c5d2b4",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('literacyMaterialScriptRefBookStart')} ${pm.globals.get('literacyMaterialScriptRefChapterStart')}:${pm.globals.get('literacyMaterialScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('literacyMaterialScriptRefBookEnd')} ${pm.globals.get('literacyMaterialScriptRefChapterEnd')}:${pm.globals.get('literacyMaterialScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "74074dd0-a769-48ef-a6f3-37b359fffc2a",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"const moment = require('moment');\r",
									"\r",
									"// Saving data for future use\r",
									"var id = jsonData.data.createLiteracyMaterial.literacyMaterial.id;\r",
									"pm.globals.set(\"literacyMaterialId\", id);\r",
									"\r",
									"// Saving whole literacyMaterial Object to globals for future use\r",
									"var literacyMaterial = JSON.stringify(jsonData.data.createLiteracyMaterial.literacyMaterial);\r",
									"pm.globals.set(\"literacyMaterial_data\", literacyMaterial);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"literacyMaterial\": {\r\n            \"name\": \"{{literacyMaterialName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get LiteracyMaterial By Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5d3394a3-e787-4dd4-bab6-f200c0a69a50",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ee138f88-faba-4086-bf37-318ae89f5498",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var literacyMaterial_data = JSON.parse(pm.variables.get(\"literacyMaterial_data\"));\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verifying literacyMaterial ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.literacyMaterial.id;  \r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"// Verifying returned literacyMaterial info with recently stored literacyMaterial info\r",
									"pm.test(\"Verifying literacyMaterial's createdAt\", function () {\r",
									"    var createdAt = jsonData.data.literacyMaterial.createdAt;\r",
									"    pm.expect(createdAt).to.eql(literacyMaterial_data.createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial Name\", function () {\r",
									"    var literacyMaterialeName = jsonData.data.literacyMaterial.name.value; \r",
									"    pm.expect(literacyMaterialeName).to.eql(literacyMaterial_data.name.value);\r",
									"});\r",
									"\r",
									"\r",
									"//scriptureReferences\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences start book\", function () {\r",
									"    var startBook = jsonData.data.literacyMaterial.scriptureReferences.value[0].start.book; \r",
									"    pm.expect(startBook).to.eql(literacyMaterial_data.scriptureReferences.value[0].start.book); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences start chapter\", function () {\r",
									"    var startChapter = jsonData.data.literacyMaterial.scriptureReferences.value[0].start.chapter; \r",
									"    pm.expect(startChapter).to.eql(literacyMaterial_data.scriptureReferences.value[0].start.chapter); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences start verse\", function () {\r",
									"    var startVerse = jsonData.data.literacyMaterial.scriptureReferences.value[0].start.verse; \r",
									"    pm.expect(startVerse).to.eql(literacyMaterial_data.scriptureReferences.value[0].start.verse); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences start book name\", function () {\r",
									"    var startBookName = jsonData.data.literacyMaterial.scriptureReferences.value[0].start.bookName; \r",
									"    pm.expect(startBookName).to.eql(literacyMaterial_data.scriptureReferences.value[0].start.bookName); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences start label\", function () {\r",
									"    var startLabel = jsonData.data.literacyMaterial.scriptureReferences.value[0].start.label; \r",
									"    pm.expect(startLabel).to.eql(literacyMaterial_data.scriptureReferences.value[0].start.label); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences end book\", function () {\r",
									"    var endBook = jsonData.data.literacyMaterial.scriptureReferences.value[0].start.book; \r",
									"    pm.expect(endBook).to.eql(literacyMaterial_data.scriptureReferences.value[0].start.book); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences end chapter\", function () {\r",
									"    var endChapter = jsonData.data.literacyMaterial.scriptureReferences.value[0].end.chapter; \r",
									"    pm.expect(endChapter).to.eql(literacyMaterial_data.scriptureReferences.value[0].end.chapter); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences end verse\", function () {\r",
									"    var endVerse = jsonData.data.literacyMaterial.scriptureReferences.value[0].end.verse; \r",
									"    pm.expect(endVerse).to.eql(literacyMaterial_data.scriptureReferences.value[0].end.verse); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences end book name\", function () {\r",
									"    var endBookName = jsonData.data.literacyMaterial.scriptureReferences.value[0].end.bookName; \r",
									"    pm.expect(endBookName).to.eql(literacyMaterial_data.scriptureReferences.value[0].end.bookName); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences end label\", function () {\r",
									"    var endLabel = jsonData.data.literacyMaterial.scriptureReferences.value[0].end.label; \r",
									"    pm.expect(endLabel).to.eql(literacyMaterial_data.scriptureReferences.value[0].end.label); \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences label\", function () {\r",
									"    var label = jsonData.data.literacyMaterial.scriptureReferences.value[0].label; \r",
									"    pm.expect(label).to.eql(literacyMaterial_data.scriptureReferences.value[0].label); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying literacyMaterial scriptureReferences total verses\", function () {\r",
									"    var totalVerses = jsonData.data.literacyMaterial.scriptureReferences.value[0].totalVerses; \r",
									"    pm.expect(totalVerses).to.eql(literacyMaterial_data.scriptureReferences.value[0].totalVerses); \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query literacyMaterial($id: ID!) {\r\n  literacyMaterial(id: $id) {\r\n    id\r\n    createdAt\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n    name {\r\n      value\r\n      canRead\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"{{literacyMaterialId}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get LiteracyMaterial By id Mandatory Field Blank - id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "141d8227-7d7f-4461-ae11-f1cac25d722c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "95fcb35f-15cc-4d10-9444-07b3107dc7c0",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is 400\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that language error message is correct\", function () {\r",
									"    var error_language_message = jsonData.errors[0].extensions.errors.id.IsShortId;  \r",
									"    pm.expect(error_language_message).to.eql(\"Invalid ID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query literacyMaterial($id: ID!) {\r\n  literacyMaterial(id: $id) {\r\n    id\r\n    createdAt\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n    name {\r\n      value\r\n      canRead\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get literacyMaterial By id Mandatory Field Removed  - id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4addde3d-984a-4ac8-afa5-85ac94f61038",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aa4598b9-54e6-4daa-8efd-2b834e87e1ce",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query literacyMaterial($id: ID!) {\r\n  literacyMaterial(id: $id) {\r\n    id\r\n    createdAt\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n    name {\r\n      value\r\n      canRead\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get LiteracyMaterial By id Parameter Mismatch - id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "62f36960-0b5e-4d22-bf14-c686173ae46c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "11ad0785-84ef-41d2-84ed-aa9cdcfa469c",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query literacyMaterial($id: ID!) {\r\n  literacyMaterial(id: $id) {\r\n    id\r\n    createdAt\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n    name {\r\n      value\r\n      canRead\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id1\": \"{{literacyMaterialId}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get literacyMaterial By id Parameter Invalid - id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b2f9afe6-e954-44a0-a162-2d55d0629cd5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "59787fc4-389d-4d8c-a84c-bd6f377f3565",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is 400\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that language error message is correct\", function () {\r",
									"    var error_language_message = jsonData.errors[0].extensions.errors.id.IsShortId;  \r",
									"    pm.expect(error_language_message).to.eql(\"Invalid ID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query literacyMaterial($id: ID!) {\r\n  literacyMaterial(id: $id) {\r\n    id\r\n    createdAt\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n    name {\r\n      value\r\n      canRead\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"!@#$%^&\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update LiteracyMaterial Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f31d3673-8b96-4d44-921b-b1526aeb0990",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('literacyMaterialScriptRefBookStart')} ${pm.globals.get('literacyMaterialScriptRefChapterStart')}:${pm.globals.get('literacyMaterialScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('literacyMaterialScriptRefBookEnd')} ${pm.globals.get('literacyMaterialScriptRefChapterEnd')}:${pm.globals.get('literacyMaterialScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "19b26f86-ecd0-4bd2-90f6-4853b284bcdd",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var literacyMaterial_data = JSON.parse(pm.variables.get(\"literacyMaterial_data\"));\r",
									"const moment = require('moment');\r",
									"var lodash = require('lodash');\r",
									"\r",
									"// get literacyMaterial object first having same id as recently updated literacyMaterial's id\r",
									"var myliteracyMaterial = lodash.find(jsonData.data.updateLiteracyMaterial.literacyMaterial, ['id', literacyMaterial_data.id]);\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that literacyMaterial ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateLiteracyMaterial.literacyMaterial.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial's createdAt is in Specific time format\", function () {\r",
									"    var time = jsonData.data.updateLiteracyMaterial.literacyMaterial.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial name is same as requested\", function () {\r",
									"    var name = jsonData.data.updateLiteracyMaterial.literacyMaterial.name.value;\r",
									"    pm.expect(name).to.eql(pm.globals.get('literacyMaterialName'));\r",
									"});\r",
									"\r",
									"\r",
									"//scriptureReferences\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences start book is same as requested\", function () {\r",
									"    var startBook = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.book;\r",
									"    pm.expect(startBook).to.eql(pm.globals.get('literacyMaterialScriptRefBookStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences start chapter is same as requested\", function () {\r",
									"    var startChapter = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.chapter;\r",
									"    pm.expect(startChapter).to.eql(pm.globals.get('literacyMaterialScriptRefChapterStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences start verse is same as requested\", function () {\r",
									"    var startVerse = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.verse;\r",
									"    pm.expect(startVerse).to.eql(pm.globals.get('literacyMaterialScriptRefVerseStart'));\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences start label is same as requested\", function () {\r",
									"    var startLabel = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.label;\r",
									"    pm.expect(startLabel).to.eql(pm.globals.get('literacyMaterialScriptRefLabelStart'));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences end book is same as requested\", function () {\r",
									"    var endBook = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.book;\r",
									"    pm.expect(endBook).to.eql(pm.globals.get('literacyMaterialScriptRefBookEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences end chapter is same as requested\", function () {\r",
									"    var endChapter = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.chapter;\r",
									"    pm.expect(endChapter).to.eql(pm.globals.get('literacyMaterialScriptRefChapterEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences end verse is same as requested\", function () {\r",
									"    var endVerse = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.verse;\r",
									"    pm.expect(endVerse).to.eql(pm.globals.get('literacyMaterialScriptRefVerseEnd'));\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences end label is same as requested\", function () {\r",
									"    var endlabel = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.label;\r",
									"    pm.expect(endlabel).to.eql(pm.globals.get('literacyMaterialScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"//static\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences label is same as requested\", function () {\r",
									"    var label = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].label;\r",
									"    pm.expect(label).to.eql('');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences total verses is same as requested\", function () {\r",
									"    var totalVerses = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].totalVerses;\r",
									"    pm.expect(totalVerses).to.eql(0);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLiteracyMaterial($input: UpdateLiteracyMaterialInput!) {\r\n  updateLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"literacyMaterial\": {\r\n            \"id\": \"{{literacyMaterialId}}\",\r\n            \"name\": \"{{literacyMaterialName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update LiteracyMaterial - Only Required Inputs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8751544a-8bed-4445-812b-1424ab7a5efe",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9f8df98a-2f4f-4818-86bd-2ded1a522cd7",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var literacyMaterial_data = JSON.parse(pm.variables.get(\"literacyMaterial_data\"));\r",
									"const moment = require('moment');\r",
									"var lodash = require('lodash');\r",
									"\r",
									"// get literacyMaterial object first having same id as recently updated literacyMaterial's id\r",
									"var myliteracyMaterial = lodash.find(jsonData.data.updateLiteracyMaterial.literacyMaterial, ['id', literacyMaterial_data.id]);\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that literacyMaterial ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateLiteracyMaterial.literacyMaterial.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial's createdAt is in Specific time format\", function () {\r",
									"    var time = jsonData.data.updateLiteracyMaterial.literacyMaterial.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial name is same as requested\", function () {\r",
									"    var name = jsonData.data.updateLiteracyMaterial.literacyMaterial.name.value;\r",
									"    pm.expect(name).to.eql(pm.globals.get('literacyMaterialName'));\r",
									"});\r",
									"\r",
									"\r",
									"//scriptureReferences\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences start book is same as requested\", function () {\r",
									"    var startBook = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.book;\r",
									"    pm.expect(startBook).to.eql(pm.globals.get('literacyMaterialScriptRefBookStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences start chapter is same as requested\", function () {\r",
									"    var startChapter = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.chapter;\r",
									"    pm.expect(startChapter).to.eql(pm.globals.get('literacyMaterialScriptRefChapterStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences start verse is same as requested\", function () {\r",
									"    var startVerse = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.verse;\r",
									"    pm.expect(startVerse).to.eql(pm.globals.get('literacyMaterialScriptRefVerseStart'));\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences start label is same as requested\", function () {\r",
									"    var startLabel = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].start.label;\r",
									"    pm.expect(startLabel).to.eql(pm.globals.get('literacyMaterialScriptRefLabelStart'));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences end book is same as requested\", function () {\r",
									"    var endBook = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.book;\r",
									"    pm.expect(endBook).to.eql(pm.globals.get('literacyMaterialScriptRefBookEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences end chapter is same as requested\", function () {\r",
									"    var endChapter = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.chapter;\r",
									"    pm.expect(endChapter).to.eql(pm.globals.get('literacyMaterialScriptRefChapterEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences end verse is same as requested\", function () {\r",
									"    var endVerse = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.verse;\r",
									"    pm.expect(endVerse).to.eql(pm.globals.get('literacyMaterialScriptRefVerseEnd'));\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences end label is same as requested\", function () {\r",
									"    var endlabel = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].end.label;\r",
									"    pm.expect(endlabel).to.eql(pm.globals.get('literacyMaterialScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"//static\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences label is same as requested\", function () {\r",
									"    var label = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].label;\r",
									"    pm.expect(label).to.eql('');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterial scriptureReferences total verses is same as requested\", function () {\r",
									"    var totalVerses = jsonData.data.updateLiteracyMaterial.literacyMaterial.scriptureReferences.value[0].totalVerses;\r",
									"    pm.expect(totalVerses).to.eql(0);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLiteracyMaterial($input: UpdateLiteracyMaterialInput!) {\r\n  updateLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"literacyMaterial\": {\r\n            \"id\": \"{{literacyMaterialId}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update LiteracyMaterial Mandatory Field Removed - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61b701ab-6b69-40ad-949b-32e73860f051",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f53f1aca-d14c-4c26-bcca-c91533e2f182",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Field \\\"id\\\" of required type \\\"ID!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLiteracyMaterial($input: UpdateLiteracyMaterialInput!) {\r\n  updateLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update  LiteracyMaterial Mandatory Field Blank - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e06e9b7d-7934-4f49-b202-4935eb0d73a9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fd519926-9d44-4b62-896f-6fe2eafd8b58",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is 400\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors['literacyMaterial.id'].IsShortId;\r",
									"    pm.expect(error_message).to.eql(\"Invalid ID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLiteracyMaterial($input: UpdateLiteracyMaterialInput!) {\r\n  updateLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"id\": \"\",\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update  LiteracyMaterial Not Mandatory Field Removed - Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7228793e-5f19-4733-85e1-a97b7ccad50d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7e19cce4-f8b1-4d02-a363-be78bc999a41",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that literacyMaterial ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateLiteracyMaterial.literacyMaterial.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated literacyMaterialName is equal to previous value\", function () {\r",
									"    var literacyMaterialName = jsonData.data.updateLiteracyMaterial.literacyMaterial.name.value;\r",
									"    pm.expect(literacyMaterialName).to.eql(pm.globals.get('literacyMaterialName'));\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLiteracyMaterial($input: UpdateLiteracyMaterialInput!) {\r\n  updateLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"id\": \"{{literacyMaterialId}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update  LiteracyMaterial Not Mandatory Field Blank - Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "baaf65d4-8bac-46be-9685-8b0574fbd69e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bfce4f05-b1fb-4acc-a400-621076cdeac4",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_code).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error displayName message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors['literacyMaterial.name'].minLength;\r",
									"    pm.expect(error_message).to.eql(\"name must be longer than or equal to 1 characters\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLiteracyMaterial($input: UpdateLiteracyMaterialInput!) {\r\n  updateLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"id\": \"{{literacyMaterialId}}\",\r\n      \"name\": \"\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update  LiteracyMaterial Not Mandatory Field Removed -  startBook",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0533bcfb-513e-40fc-98cb-e5b7e24daadc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7cfc4cc7-8896-4535-8183-e26e769c706e",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLiteracyMaterial($input: UpdateLiteracyMaterialInput!) {\r\n  updateLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"id\": \"{{literacyMaterialId}}\",\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update  LiteracyMaterial Not Mandatory Field Blank -  startBook",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "52dfc895-2532-411d-9ccb-3cc37cdb3e17",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64489707-a94e-400a-86c3-f0892b9fb0f3",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error ScriptureBook message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors['literacyMaterial.scriptureReferences.0.start.book'].ScriptureBook;\r",
									"    pm.expect(error_message).to.eql(\"Not a valid Bible book\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLiteracyMaterial($input: UpdateLiteracyMaterialInput!) {\r\n  updateLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"id\": \"{{literacyMaterialId}}\",\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update  LiteracyMaterial Not Mandatory Field Removed -  endBook",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7eb8ab26-40d8-4c27-87e4-3b8a6f3794d6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b53f0380-fa2c-4fcf-87f9-36f6e5a349e7",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLiteracyMaterial($input: UpdateLiteracyMaterialInput!) {\r\n  updateLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"id\": \"{{literacyMaterialId}}\",\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update  LiteracyMaterial Not Mandatory Field Blank -  endBook",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0d9ee9d8-11ea-4711-826a-01e13203a46a",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefBookEnd', \"Genesis\");\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 3);\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 4);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ca37747-1439-49d6-88b7-1470b778cfa3",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error ScriptureBook message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors['literacyMaterial.scriptureReferences.0.end.book'].ScriptureBook;\r",
									"    pm.expect(error_message).to.eql(\"Not a valid Bible book\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLiteracyMaterial($input: UpdateLiteracyMaterialInput!) {\r\n  updateLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"literacyMaterial\": {\r\n      \"id\": \"{{literacyMaterialId}}\",\r\n      \"name\": \"{{literacyMaterialName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n          \"verse\":{{literacyMaterialScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"\",\r\n          \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n          \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Get All LiteracyMaterial ( Create LiteracyMaterial)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "414a4734-5124-4b0f-a353-2552bb5c711f",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"literacyMaterialName\", \"LiteracyMaterialName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('literacyMaterialScriptRefBookStart')} ${pm.globals.get('literacyMaterialScriptRefChapterStart')}:${pm.globals.get('literacyMaterialScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('literacyMaterialScriptRefBookEnd')} ${pm.globals.get('literacyMaterialScriptRefChapterEnd')}:${pm.globals.get('literacyMaterialScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "82221289-9ae5-4e5a-b2e1-bf432ac42b15",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"var id = jsonData.data.createLiteracyMaterial.literacyMaterial.id;\r",
									"pm.globals.set(\"literacyMaterialId\", id);\r",
									"\r",
									"// Saving whole literacyMaterial Object to globals for future use\r",
									"var literacyMaterial = JSON.stringify(jsonData.data.createLiteracyMaterial.literacyMaterial);\r",
									"pm.globals.set(\"literacyMaterial_data\", literacyMaterial);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"literacyMaterial\": {\r\n            \"name\": \"{{literacyMaterialName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "38e75132-d7a7-4dda-a4ee-3ec0f95d0eb5",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "33e01b78-9e46-4a45-95fa-452dd6ab9a2a",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var literacyMaterial_data = JSON.parse(pm.variables.get(\"literacyMaterial_data\")); // Get stored literacyMaterial object\r",
									"const moment = require('moment');\r",
									"var lodash = require('lodash');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - Pagination\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;\r",
									"    pm.expect(total).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that hasMore is correct\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;\r",
									"    var hasMore = jsonData.data.literacyMaterials.hasMore;\r",
									"    if (Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) < total) {\r",
									"        pm.expect(hasMore).to.eql(true);\r",
									"    } else {\r",
									"        pm.expect(hasMore).to.eql(false);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that number of items returned are exact\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;                  // total returned in response\r",
									"    var returneditems = jsonData.data.literacyMaterials.items.length;   // no. of items returned in response array\r",
									"    var itemCount = Number(pm.globals.get('itemCount'));    // no. of items per page\r",
									"    var page = Number(pm.globals.get('page'));              // page number\r",
									"    var expectedItems = itemCount * page;                   // items we are expecting\r",
									"\r",
									"    if (expectedItems <= total) {\r",
									"        pm.expect(returneditems).to.eql(itemCount);\r",
									"    } else {\r",
									"        if ((expectedItems - total) < itemCount) {\r",
									"            var lastItems = total - ((itemCount * (page - 1)));   // items in last page\r",
									"            pm.expect(returneditems).to.eql(lastItems);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"/**\r",
									" * Setting up 'page' number to be used in next request\r",
									" * For locating recently created Object position on Specific page\r",
									" */\r",
									"var total = jsonData.data.literacyMaterials.total;\r",
									"var itemCount = Number(pm.globals.get('itemCount'));\r",
									"\r",
									"if (total > itemCount) {\r",
									"\r",
									"    if ((total % itemCount) == 0) {\r",
									"        var pageToset = total / itemCount;\r",
									"        pm.globals.set(\"page\", pageToset);\r",
									"    } else {\r",
									"        var pageToset = Math.floor(total / itemCount) + 1;\r",
									"        pm.globals.set(\"page\", pageToset);\r",
									"    }\r",
									"\r",
									"} else {\r",
									"    pm.globals.set(\"page\", 1);  // Set page to 1 if total <= itemCount\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Success - item Object",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "55943e6b-21be-4ad0-9ee1-ea550c4b1c31",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"// Page is set from previous request test script based on total\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a0a8c43b-36a8-45a9-9f85-9cc1657070b9",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var literacyMaterial_data = JSON.parse(pm.variables.get(\"literacyMaterial_data\")); // Get stored literacyMaterial object\r",
									"const moment = require('moment');\r",
									"var lodash = require('lodash');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - Pagination\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;\r",
									"    pm.expect(total).to.be.above(0);\r",
									"});\r",
									"\r",
									"/**\r",
									" * Verifying recently created literacyMaterials's information with LiteracyMaterials object returned within items array\r",
									" */\r",
									"\r",
									"// get LiteracyMaterials object first having same id as recently created LiteracyMaterials's id\r",
									"var myliteracyMaterial = lodash.find(jsonData.data.literacyMaterials.items, ['id', literacyMaterial_data.id]);\r",
									"\r",
									"pm.test(\"Verify that recently created literacyMaterials ID is not blank or null\", function () {\r",
									"    var id = myliteracyMaterial.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created literacyMaterials's createdAt is in Specific time format\", function () {\r",
									"    var time = myliteracyMaterial.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created literacyMaterials's id\", function () {\r",
									"    var id = myliteracyMaterial.id;\r",
									"    pm.expect(id).to.eql(literacyMaterial_data.id);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created literacyMaterials's name\", function () {\r",
									"    var name = myliteracyMaterial.name.value;\r",
									"    pm.expect(name).to.eql(literacyMaterial_data.name.value);\r",
									"});\r",
									"\r",
									"\r",
									"//scriptureReferences\r",
									"pm.test(\"Verifying recently created literacyMaterials scriptureReferences start book\", function () {\r",
									"    var startBook = myliteracyMaterial.scriptureReferences.value[0].start.book;\r",
									"    pm.expect(startBook).to.eql(literacyMaterial_data.scriptureReferences.value[0].start.book);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created literacyMaterials scriptureReferences start chapter\", function () {\r",
									"    var startChapter = myliteracyMaterial.scriptureReferences.value[0].start.chapter;\r",
									"    pm.expect(startChapter).to.eql(literacyMaterial_data.scriptureReferences.value[0].start.chapter);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created literacyMaterials scriptureReferences start verse\", function () {\r",
									"    var startVerse = myliteracyMaterial.scriptureReferences.value[0].start.verse;\r",
									"    pm.expect(startVerse).to.eql(literacyMaterial_data.scriptureReferences.value[0].start.verse);\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verifying recently created literacyMaterials scriptureReferences start label\", function () {\r",
									"    var startLabel = myliteracyMaterial.scriptureReferences.value[0].start.label;\r",
									"    pm.expect(startLabel).to.eql(literacyMaterial_data.scriptureReferences.value[0].start.label);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verifying recently created literacyMaterials scriptureReferences end book\", function () {\r",
									"    var endBook = myliteracyMaterial.scriptureReferences.value[0].end.book;\r",
									"    pm.expect(endBook).to.eql(literacyMaterial_data.scriptureReferences.value[0].end.book);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created literacyMaterials scriptureReferences end chapter\", function () {\r",
									"    var endChapter = myliteracyMaterial.scriptureReferences.value[0].end.chapter;\r",
									"    pm.expect(endChapter).to.eql(literacyMaterial_data.scriptureReferences.value[0].end.chapter);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created literacyMaterials scriptureReferences end verse\", function () {\r",
									"    var endVerse = myliteracyMaterial.scriptureReferences.value[0].end.verse;\r",
									"    pm.expect(endVerse).to.eql(literacyMaterial_data.scriptureReferences.value[0].end.verse);\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verifying recently created literacyMaterials scriptureReferences end label\", function () {\r",
									"    var endLabel = myliteracyMaterial.scriptureReferences.value[0].end.label;\r",
									"    pm.expect(endLabel).to.eql(literacyMaterial_data.scriptureReferences.value[0].end.label);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created literacyMaterials scriptureReferences  label\", function () {\r",
									"    var label = myliteracyMaterial.scriptureReferences.value[0].label;\r",
									"    pm.expect(label).to.eql(literacyMaterial_data.scriptureReferences.value[0].label);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created literacyMaterials scriptureReferences totalVerses\", function () {\r",
									"    var totalVerses = myliteracyMaterial.scriptureReferences.value[0].totalVerses;\r",
									"    pm.expect(totalVerses).to.eql(literacyMaterial_data.scriptureReferences.value[0].totalVerses);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Success - total",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "70987832-f102-4685-b9b9-ba6ad53b0258",
								"exec": [
									"pm.globals.set(\"itemCount\", 10);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e0d8b394-4e54-4115-8e90-03a2a7ea7f99",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - total\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;  \r",
									"    pm.expect(total).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Success - hasMore - True",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4863c023-40b9-4ede-9db7-5c3de3100b30",
								"exec": [
									"pm.globals.set(\"itemCount\", 10);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "55320473-79f3-45a5-bf42-9df7894cb386",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - hasMore\r",
									"pm.test(\"Verify that hasMore is true Only when literacyMaterial items are still available\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;\r",
									"    var hasMore = jsonData.data.literacyMaterials.hasMore;  \r",
									"    if(Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) < total){\r",
									"        pm.expect(hasMore).to.eql(true);\r",
									"    } else {\r",
									"        pm.expect(hasMore).to.eql(false);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Success - hasMore - False",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1b882eb-1dde-42cb-b567-74d6deb82e4a",
								"exec": [
									"pm.globals.set(\"itemCount\", 10);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "688b9784-2a37-4104-8e36-0df776ccfbe2",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - hasMore\r",
									"pm.test(\"Verify that hasMore is false Only when no more literacyMaterial items available\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;\r",
									"    var hasMore = jsonData.data.literacyMaterials.hasMore;  \r",
									"    if(Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) >= total){\r",
									"        pm.expect(hasMore).to.eql(false);\r",
									"    } else{\r",
									"        pm.expect(hasMore).to.eql(true);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that literacyMaterial ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.literacyMaterials.items[0].id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Success - items",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "148fb6be-a2ad-4a70-97e5-e3509ce1e093",
								"exec": [
									"pm.globals.set(\"itemCount\", 10);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ed569886-d663-4af1-921c-a63d4821a8ee",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - no. of items are exact\r",
									"pm.test(\"Verify that number of items returned are exact\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;                  // total returned in response\r",
									"    var returneditems = jsonData.data.literacyMaterials.items.length;   // no. of items returned in response array\r",
									"    var itemCount = Number(pm.globals.get('itemCount'));    // no. of items per page\r",
									"    var page = Number(pm.globals.get('page'));              // page number\r",
									"    var expectedItems = itemCount * page;                   // items we are expecting\r",
									"\r",
									"    if (expectedItems <= total) {\r",
									"        pm.expect(returneditems).to.eql(itemCount);\r",
									"    } else {\r",
									"        if ((expectedItems - total) < itemCount) {\r",
									"            var lastItems = total - ((itemCount * (page - 1)));   // items in last page\r",
									"            pm.expect(returneditems).to.eql(lastItems);\r",
									"        }\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Sort Litercy by Name ( Create Litercy Material)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fc47827c-c036-4b93-9a6b-7990a1a092cb",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"// Changed for sorting purpose\r",
									"pm.globals.set(\"literacyMaterialName\", \"automation_LiteracyMaterialsort\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('literacyMaterialScriptRefBookStart')} ${pm.globals.get('literacyMaterialScriptRefChapterStart')}:${pm.globals.get('literacyMaterialScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('literacyMaterialScriptRefBookEnd')} ${pm.globals.get('literacyMaterialScriptRefChapterEnd')}:${pm.globals.get('literacyMaterialScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "53dca466-5a05-4b47-9353-78416454253d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"literacyMaterial\": {\r\n            \"name\": \"{{literacyMaterialName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for FilterSort Litercy by Name ( Create Litercy Material)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9dd5a1a5-a6b4-447c-918f-6c6b5d3a22c3",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"// Changing name for FILTER + SORT purpose\r",
									"pm.globals.set(\"literacyMaterialName\", \"FilterSortLiteracyName \" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('literacyMaterialScriptRefBookStart')} ${pm.globals.get('literacyMaterialScriptRefChapterStart')}:${pm.globals.get('literacyMaterialScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('literacyMaterialScriptRefBookEnd')} ${pm.globals.get('literacyMaterialScriptRefChapterEnd')}:${pm.globals.get('literacyMaterialScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelEnd', expectedLabelEnd);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6e55290c-4e09-40b2-8f33-cb708482da56",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"literacyMaterial\": {\r\n            \"name\": \"{{literacyMaterialName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Sort Litercy by Name ( Create Litercy Material 2)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "495f1732-0504-437e-b6e5-286b01be8f9a",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"// Changing name for FILTER + SORT purpose\r",
									"pm.globals.set(\"literacyMaterialName\", \"Automation_Litercysort \" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences variables\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('literacyMaterialScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('literacyMaterialScriptRefBookStart')} ${pm.globals.get('literacyMaterialScriptRefChapterStart')}:${pm.globals.get('literacyMaterialScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('literacyMaterialScriptRefBookEnd')} ${pm.globals.get('literacyMaterialScriptRefChapterEnd')}:${pm.globals.get('literacyMaterialScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('literacyMaterialScriptRefLabelEnd', expectedLabelEnd);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "57a61257-344a-4461-a514-50c7209b60e3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLiteracyMaterial($input: CreateLiteracyMaterialInput!) {\r\n  createLiteracyMaterial(input: $input) {\r\n    literacyMaterial {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canEdit\r\n        canRead\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"literacyMaterial\": {\r\n            \"name\": \"{{literacyMaterialName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookStart}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterStart}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{literacyMaterialScriptRefBookEnd}}\",\r\n                    \"chapter\": {{literacyMaterialScriptRefChapterEnd}},\r\n                    \"verse\": {{literacyMaterialScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterialsSuccess - name sorting ASC",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "58bad551-987b-4dd9-acba-12092558b771",
								"exec": [
									"pm.globals.set(\"itemCount\", 100);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cb56a352-d35f-44c3-b2d4-e3bc05c3048f",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var lodash = require('lodash');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;  \r",
									"    pm.expect(total).to.be.above(0);\r",
									"});\r",
									"\r",
									"//Test Specific - Name sorting ASC\r",
									"pm.test(\"Verify that items are sorted by 'name' and orderd by 'ASC' order \", function () {\r",
									"\r",
									"    var responseBody = jsonData.data.literacyMaterials.items;\r",
									"    var expectedSortedOrder = lodash.orderBy(responseBody, item => item.name.value.toLowerCase(), ['asc']);\r",
									"    pm.expect(responseBody).to.eql(expectedSortedOrder);\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials  Success - name sorting DESC",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "795825fd-b3c7-47d9-8204-7352d3c34673",
								"exec": [
									"pm.globals.set(\"itemCount\", 100);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"DESC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7aef3974-e6a9-450a-a93e-97b83d1c9f73",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var lodash = require('lodash');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;  \r",
									"    pm.expect(total).to.be.above(0);\r",
									"});\r",
									"\r",
									"//Test Specific - Name sorting DESC\r",
									"pm.test(\"Verify that items are sorted by 'name' and orderd by 'DESC' order \", function () {\r",
									"\r",
									"    var responseBody = jsonData.data.literacyMaterials.items;\r",
									"    var expectedSortedOrder = lodash.orderBy(responseBody, item => item.name.value.toLowerCase(), ['desc']);\r",
									"    pm.expect(responseBody).to.eql(expectedSortedOrder);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials  Not Mandatory Field Removed - count",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "20ec2403-3427-4cab-95b8-4f4e1e204708",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "baac1d6b-b355-464a-a9fb-8563719afabf",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that number of items returned is equal to total\", function () {\r",
									"    var total = jsonData.data.literacyMaterials.total;\r",
									"    var items = jsonData.data.literacyMaterials.items.length;\r",
									"    if (total <= 25)    // 25 is maximum db items limit returned per page when count is not specified\r",
									"        pm.expect(items).to.eql(total);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterial Not Mandatory Field Blank - sort",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "52ac8139-7543-4be7-849b-281cab441ac1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f11c44f5-874a-4907-a2ae-8d43ab13fe7d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"// Test Specific\r",
									"pm.test(\"PENDING >> Similar to BUG #776(closed-Sprint 13) for Users (Sort Field allows empty value/unusual characters)\", function () {\r",
									"\r",
									"    if (jsonData.data) {\r",
									"        pm.expect(\"BACKEND\").to.eql(\"PENDING\"); // fail forcefully\r",
									"    } else {\r",
									"        pm.expect(\"WRITE TEST CASES\").to.eql(\"ERRORS >>> \" + jsonData.errors[0].message);\r",
									"    }\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"// pm.test(\"Verify that error message is correct\", function () {\r",
									"//     var error_message = jsonData.errors[0].message;  \r",
									"//     pm.expect(error_message).to.include(\"Variable `DESC` not defined\");\r",
									"// });\r",
									"\r",
									"// pm.test(\"Verify that error code is InternalServerError\", function () {\r",
									"//     var error_code = jsonData.errors[0].extensions.code;  \r",
									"//     pm.expect(error_code).to.eql(\"InternalServerError\");\r",
									"// });\r",
									"\r",
									"// pm.test(\"Verify that error status is 500\", function () {\r",
									"//     var error_status = jsonData.errors[0].extensions.status;  \r",
									"//     pm.expect(error_status).to.eql(500);\r",
									"// });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Not Mandatory Field Blank - order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e3658176-947e-4b16-aaf3-e79146fdd85f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fc653663-b185-409c-a16a-e3261a6abc01",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Order\\\" enum\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Parameter Mismatch - count",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "25a72b7d-8e10-4c33-ae97-077a2cb47c31",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "73324ad5-c6d7-44bc-a16c-f2f1ecfe667f",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"LiteracyMaterialListInput\\\". Did you mean \\\"count\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count1\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Parameter Mismatch - page",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f93b2d13-04d9-4653-b525-c095021cdffb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "564e819c-cb60-4e9c-b57a-9b7bbc4505a2",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"LiteracyMaterialListInput\\\". Did you mean \\\"page\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page1\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Parameter Mismatch - sort",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ae7cb25-c542-4b10-8575-e20b124ab830",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8e29e1ba-f262-440a-a8ff-4df24af7a03b",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"LiteracyMaterialListInput\\\". Did you mean \\\"sort\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort1\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Parameter Mismatch - order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f3c696b4-9a19-4e7c-8d5e-2855696f1052",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5ea4c1d6-3dfa-4c02-9d17-b1754d9ccca2",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"LiteracyMaterialListInput\\\". Did you mean \\\"order\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order1\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Parameter  Invalid - count min",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d3be516d-a98f-43ae-90fa-fb4ddb4475b8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2152c677-b645-4541-9785-4f6960b19c75",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that count error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors.count.min;  \r",
									"    pm.expect(error_message).to.eql(\"count must not be less than 1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": 0,\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Parameter  Invalid - count max",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b8bde2bb-dbc4-473f-a7a9-950779a8880f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ccd3d88c-d4fd-4898-86eb-5e745b1fec27",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that count error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors.count.max;  \r",
									"    pm.expect(error_message).to.eql(\"count must not be greater than 100\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": 159,\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Parameter Invalid - page",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2100d459-a313-400e-a467-7b8986846d33",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e00327ed-762a-4087-93ec-dbee2da89d73",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that page error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors.page.min;  \r",
									"    pm.expect(error_message).to.eql(\"page must not be less than 1\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{count}},\r\n        \"page\": 0,\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Parameter Invalid - sort",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c7262467-ca02-48ed-aeb5-f5c4b2d03ae1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "96e60e61-5b28-4ec1-a9c6-bab424a5ed24",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"PENDING >> Similar to BUG #776(closed-Sprint 13) for Users (Sort Field allows empty value/unusual characters)\", function () {\r",
									"\r",
									"    if (jsonData.data) {\r",
									"        pm.expect(\"BACKEND\").to.eql(\"PENDING\"); // fail forcefully\r",
									"    } else {\r",
									"        pm.expect(\"WRITE TEST CASES\").to.eql(\"ERRORS >>> \" + jsonData.errors[0].message);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{count}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"qwerty\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All LiteracyMaterials Parameter Invalid - order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "93573b96-ed6f-4d73-a77c-0dc5454309d7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fb81e674-9463-480c-b020-e582330544cb",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Order\\\" enum\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: LiteracyMaterialListInput!) {\r\n  literacyMaterials(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{count}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"11 #$%% ^&*\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete LiteracyMaterial Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "23f364e7-2ea5-4aff-a771-8a0386e3f225",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aadab79d-0b13-4595-9515-17b918521af8",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that LiteracyMaterial is deleted\", function () {\r",
									"    pm.expect(jsonData.data.deleteLiteracyMaterial).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteLiteracyMaterial($id: ID!) {\r\n  deleteLiteracyMaterial(id: $id)\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"{{literacyMaterialId}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete LiteracyMaterial Mandatory Field Blank - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "37a25e5b-5078-48c5-ae3b-4913b63e13d2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cf86c424-714a-4577-8861-3b6e2aafef15",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is 400\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that education error message is correct\", function () {\r",
									"    var error_education_message = jsonData.errors[0].extensions.errors.id.IsShortId;  \r",
									"    pm.expect(error_education_message).to.eql(\"Invalid ID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteLiteracyMaterial($id: ID!) {\r\n  deleteLiteracyMaterial(id: $id)\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete LiteracyMaterial Mandatory Field Removed  - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c4bf478-72e1-4531-890d-9ffe9547488a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cec51bc5-aecc-4a2a-b982-9b597bca5f86",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteLiteracyMaterial($id: ID!) {\r\n  deleteLiteracyMaterial(id: $id)\r\n}\r\n",
								"variables": "{\r\n  \r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete LiteracyMaterial Parameter Mismatch - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f843c399-0979-4191-8a32-172759b7e133",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "32d00327-d6aa-4270-b38d-6a496cb05ccf",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteLiteracyMaterial($id: ID!) {\r\n  deleteLiteracyMaterial(id: $id)\r\n}\r\n",
								"variables": "{\r\n  \"id1\": \"{{literacyMaterialId}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete LiteracyMaterial Parameter - Invalid - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1af08c76-0738-46dc-8598-e98f42c1d1cd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d9828a1b-0563-4ce3-95de-b1f82c6424a0",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that partnership ID error message is correct\", function () {\r",
									"    var error_partnershipId = jsonData.errors[0].extensions.errors.id.IsShortId;\r",
									"    pm.expect(error_partnershipId).to.eql(\"Invalid ID\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteLiteracyMaterial($id: ID!) {\r\n  deleteLiteracyMaterial(id: $id)\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"---- @@@ hhkjh 2323\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}
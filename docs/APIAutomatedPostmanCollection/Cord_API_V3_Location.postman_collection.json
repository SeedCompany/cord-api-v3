{
	"info": {
		"_postman_id": "030acae8-8636-4ed5-a89f-a5c3e5c9c04f",
		"name": "Cord_API_V3_Location",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Pre-req ( Session + Register + Login ) for Location",
			"item": [
				{
					"name": "Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bab14854-f4fc-49bd-a4d1-2e74be204782",
								"exec": [
									"var response = pm.response.json();\r",
									"pm.globals.set(\"token\", response.data.session.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Write your query or mutation here\r\nquery {\r\n  session(browser: false) {\r\n    user {\r\n      id,\r\n      email\r\n      {\r\n        value\r\n      }\r\n      realFirstName\r\n      {\r\n        value\r\n      }\r\n      createdAt\r\n      displayLastName\r\n      {\r\n         value\r\n      }\r\n      \r\n      \r\n      \r\n    },\r\n    token\r\n  }\r\n}",
								"variables": ""
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fec44f7-58e8-4a2b-ada5-b7add7b6f53f",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// This is safe check to prevent failing futher cases If the Root User is already Created\r",
									"if (jsonData.errors) {\r",
									"    if (jsonData.errors.length) return;\r",
									"}\r",
									"\r",
									"//Saving data for future use\r",
									"var id = jsonData.data.register.user.id;\r",
									"pm.globals.set(\"userid\", id);\r",
									"\r",
									"var user = JSON.stringify(jsonData.data.register.user);\r",
									"pm.globals.set(\"user_data\", user);\r",
									"\r",
									"var email = jsonData.data.register.user.email.value;\r",
									"pm.globals.set(\"email\", email);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d800efd7-8618-413b-889d-c02994ec1e59",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"realFirstName\", \"FirstName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"realLastName\", \"LastName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"email\", \"email\" + moment().format(\"DDMYYYYhhmmss\") + \"@test.com\");\r",
									"pm.globals.set(\"password\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"displayFirstName\", \"DisplayFirstName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"displayLastName\", \"DisplayLastName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"phone\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));\r",
									"\r",
									"var timezoneObject = {\r",
									"    \"name\": \"Europe/Andorra\",\r",
									"    \"lat\": 42.5,\r",
									"    \"long\": 1.5167,\r",
									"    \"countries\": [\r",
									"        {\r",
									"            \"code\": \"AD\",\r",
									"            \"name\": \"Andorra\",\r",
									"            \"zones\": [\r",
									"                {\r",
									"                    \"name\": \"Europe/Andorra\",\r",
									"                    \"lat\": 42.5,\r",
									"                    \"long\": 1.5167,\r",
									"                    \"countries\": [\r",
									"                        {\r",
									"                            \"code\": \"AD\",\r",
									"                            \"name\": \"Andorra\"\r",
									"                        }\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"};\r",
									"pm.globals.set('timezoneObject', JSON.stringify(timezoneObject));\r",
									"pm.globals.set(\"timezone\", timezoneObject.name);\r",
									"\r",
									"pm.globals.set(\"about\", \"I'm Tester\");\r",
									"\r",
									"pm.globals.set(\"userTitle\", \"Tester\");\r",
									"\r",
									"\r",
									"// Taking random value for the User status from pre-defined possible values\r",
									"var userStatusArray = ['Active','Disabled'];\r",
									"var randomNumber = Math.floor(Math.random()*userStatusArray.length);\r",
									"// pm.globals.set('userStatus', userStatusArray[randomNumber]);\r",
									"pm.globals.set(\"userStatus\", \"Active\");\r",
									"\r",
									"pm.globals.set(\"userRoles\", \"ProjectManager\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation register($input: RegisterInput!) {\r\n  register(input: $input) {\r\n    user {\r\n      id\r\n      fullName\r\n      firstName\r\n      avatarLetters\r\n      createdAt\r\n      email {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      phone {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      about {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      status {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      roles {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      title {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      timezone {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          name\r\n          lat\r\n          long\r\n          countries {\r\n            code\r\n            name\r\n            zones {\r\n              name\r\n              lat\r\n              long\r\n              countries {\r\n                code\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      unavailabilities {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          description {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          start\r\n          end\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      organizations {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          name {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          avatarLetters\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      education {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          degree {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          major {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          institution {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"realFirstName\": \"Piyush\",\r\n    \"realLastName\": \"Patel\",\r\n    \"email\" : \"{{login_email}}\",\r\n    \"password\": \"{{login_password}}\",\r\n    \"displayFirstName\": \"{{displayFirstName}}\",\r\n    \"displayLastName\": \"{{displayLastName}}\",\r\n    \"phone\": \"{{phone}}\",\r\n    \"timezone\": \"{{timezone}}\",\r\n    \"about\": \"{{about}}\",\r\n    \"status\": \"{{userStatus}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ddd440b7-4e8e-4bbd-8760-68cfe92c816e",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var id = jsonData.data.login.user.id;",
									"pm.globals.set(\"userid\", id);",
									"",
									"var email = jsonData.data.login.user.email.value;",
									"pm.globals.set(\"email\", email);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "393f76b8-74a6-4a9e-9e0e-5c5c4691c89a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation login($input: LoginInput!) {\r\n  login(input: $input) {\r\n    user {\r\n      id\r\n      fullName\r\n      firstName\r\n      avatarLetters\r\n      createdAt\r\n      email {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      phone {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      about {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      status {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      roles {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      title {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      timezone {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          name\r\n          lat\r\n          long\r\n          countries {\r\n            code\r\n            name\r\n            zones {\r\n              name\r\n              lat\r\n              long\r\n              countries {\r\n                code\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      unavailabilities {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          description {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          start\r\n          end\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      organizations {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          name {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          avatarLetters\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      education {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          degree {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          major {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          institution {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n   \"input\": {\r\n      \"email\": \"{{login_email}}\",\r\n      \"password\": \"{{login_password}}\"\r\n   }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Funding Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d34dbc6-deaa-4d9c-95a3-970728456883",
								"exec": [
									"var jsonData = pm.response.json();",
									"const moment = require('moment');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"",
									"pm.test(\"Verify that fundingAccount ID is not blank or null\", function () {",
									"    var id = jsonData.data.createFundingAccount.fundingAccount.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"",
									"    // Saving data for future use",
									"    pm.globals.set(\"fundingAccountid\", id);",
									"});",
									"",
									"",
									"// Saving whole fundingAccount Object to globals for future use",
									"var fundingAccount = JSON.stringify(jsonData.data.createFundingAccount.fundingAccount);",
									"pm.globals.set(\"fundingAccount_data\", fundingAccount);",
									"",
									"pm.test(\"Verify that fundingAccount's createdAt is in Specific time format\", function () {",
									"    var time = jsonData.data.createFundingAccount.fundingAccount.createdAt;",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();",
									"    pm.expect(isValidTime).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify that fundingAccount Name is same as requested\", function () {",
									"    var fundingAccountName = jsonData.data.createFundingAccount.fundingAccount.name.value;",
									"    pm.expect(fundingAccountName).to.eql(pm.globals.get('fundingAccountName'));",
									"});",
									"",
									"pm.test(\"Verify that fundingAccount accountNumber is same as requested\", function () {",
									"    var accountNumber = jsonData.data.createFundingAccount.fundingAccount.accountNumber.value;",
									"    pm.expect(accountNumber).to.eql(pm.globals.get('accountNumber'));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3d1c3f54-3965-4f3e-90fb-9eee73594e86",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set('fundingAccountName', \"FundingAccountName_\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set('accountNumber', _.random(0, 9));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFundingAccount($input: CreateFundingAccountInput!) {\r\n  createFundingAccount(input: $input) {\r\n    fundingAccount {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      accountNumber {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"fundingAccount\": {\r\n            \"name\": \"{{fundingAccountName}}\",\r\n            \"accountNumber\": {{accountNumber}}\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b501b44e-de92-45fc-81f6-31942f1ef461",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "32a20047-88bf-4909-8449-54a857b453ac",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Location",
			"item": [
				{
					"name": "Create Location Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2254efaf-ee58-4039-84c3-13a938285821",
								"exec": [
									"var jsonData = pm.response.json();",
									"const moment = require('moment');",
									"var lodash = require('lodash');",
									"",
									"var fundingAccount_data = JSON.parse(pm.globals.get('fundingAccount_data'));",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that location ID is not blank or null\", function () {",
									"    var id = jsonData.data.createLocation.location.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"",
									"    // Saving data for future use",
									"    pm.globals.set(\"locationid\", id);",
									"});",
									"",
									"// Saving whole location Object to globals for future use",
									"var location = JSON.stringify(jsonData.data.createLocation.location);",
									"pm.globals.set(\"location_data\", location);",
									"",
									"pm.test(\"Verify that location's createdAt is in Specific time format\", function () {",
									"    var time = jsonData.data.createLocation.location.createdAt;",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();",
									"    pm.expect(isValidTime).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify that location Name is same as requested\", function () {",
									"    var locationName = jsonData.data.createLocation.location.name.value;",
									"    pm.expect(locationName).to.eql(pm.globals.get('locationName'));",
									"});",
									"",
									"pm.test(\"Verify that location type is same as requested\", function () {",
									"    var type = jsonData.data.createLocation.location.type.value;",
									"    pm.expect(type).to.eql(pm.globals.get('locationType'));",
									"});",
									"",
									"pm.test(\"Verify that location sensitivity is same as requested\", function () {",
									"    var sensitivity = jsonData.data.createLocation.location.sensitivity;",
									"    pm.expect(sensitivity).to.eql(pm.globals.get('locationSensitivity'));",
									"});",
									"",
									"pm.test(\"Verify that location isoAlpha3 code  is same as requested\", function () {",
									"    var isoAlpha3 = jsonData.data.createLocation.location.isoAlpha3.value;",
									"    pm.expect(isoAlpha3).to.eql(pm.globals.get('isoAlpha3'));",
									"});",
									"",
									"// Verify fundingAccount details",
									"pm.test(\"Verifying fundingAccount ID\", function () {",
									"    var id = jsonData.data.createLocation.location.fundingAccount.value.id;",
									"    pm.expect(id).to.eql(fundingAccount_data.id);",
									"});",
									"",
									"pm.test(\"Verifying fundingAccount createdAt\", function () {",
									"    var createdAt = jsonData.data.createLocation.location.fundingAccount.value.createdAt;",
									"    pm.expect(createdAt).to.eql(fundingAccount_data.createdAt);",
									"});",
									"",
									"pm.test(\"Verifying fundingAccount name\", function () {",
									"    var name = jsonData.data.createLocation.location.fundingAccount.value.name.value;",
									"    pm.expect(name).to.eql(fundingAccount_data.name.value);",
									"});",
									"",
									"pm.test(\"Verifying fundingAccount accountNumber\", function () {",
									"    var accountNumber = jsonData.data.createLocation.location.fundingAccount.value.accountNumber.value;",
									"    pm.expect(accountNumber).to.eql(fundingAccount_data.accountNumber.value);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9f7bad1c-1fac-4bed-844f-723fada5f0b3",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"locationName\", \"LocationName\" + moment().format(\"DDMMhhmmss\"));\r",
									"\r",
									"// Taking random value for the locationType from pre-defined possible values\r",
									"var optionsArray = ['City',\r",
									"    'County',\r",
									"    'State',\r",
									"    'Country',\r",
									"    'CrossBorderArea'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('locationType', optionsArray[randomNumber]);\r",
									"\r",
									"// Taking random value for the locationSensitivity from pre-defined possible values\r",
									"var optionsArray = ['Low', 'Medium', 'High'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('locationSensitivity', optionsArray[randomNumber]);\r",
									"\r",
									"// Taking random value for the isoAlpha3 from pre-defined possible values\r",
									"var optionsArray = ['ABW',\r",
									"    'USA',\r",
									"    'ALA',\r",
									"    'IND',\r",
									"    'AUS'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('isoAlpha3', optionsArray[randomNumber]);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      canDelete\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\",\r\n            \"fundingAccountId\": \"{{fundingAccountid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location  Mandatory Field Blank - Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "034c7307-fa75-4fc2-9f0c-ac2df0c2ae1b",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that minLength message is correct\", function () {",
									"    var minLength_message = jsonData.errors[0].extensions.errors['location.name'].minLength;",
									"    pm.expect(minLength_message).to.eql(\"name must be longer than or equal to 1 characters\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "da39a667-baf9-4d33-965b-841691723ceb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\",\r\n            \"fundingAccountId\": \"{{fundingAccountid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location  Mandatory Field Removed  - Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61079b8d-0dcb-4e50-a454-bd4998e1ad19",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"name\\\" of required type \\\"String!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a459e72-1acd-410a-beb9-c216fb6f6d10",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\",\r\n            \"fundingAccountId\": \"{{fundingAccountid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location  Mandatory Field Blank - Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8790c373-8793-4de7-bdf3-895e25266ed8",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"LocationType\\\" enum\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8e2d8444-b941-4e64-83d5-6a4b1163c02b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\",\r\n            \"fundingAccountId\": \"{{fundingAccountid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location  Mandatory Field Removed  - Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7e0604b-188b-4196-b136-901c93ea8428",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"type\\\" of required type \\\"LocationType!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e006ac0c-422a-48d7-bce3-dc169aa5c763",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\",\r\n            \"fundingAccountId\": \"{{fundingAccountid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location  Mandatory Field Blank - Sensitivity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f3b3596-4bb1-423c-965e-10ffb8a3c114",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Sensitivity\\\" enum\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "426955f8-8112-4167-9316-7c5d65a684e2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\",\r\n            \"fundingAccountId\": \"{{fundingAccountid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location  Mandatory Field Removed  - Sensitivity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f5d6b86-f895-4f2a-9ec3-a97f1bfc507f",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"sensitivity\\\" of required type \\\"Sensitivity!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8324f9ab-3030-41be-a816-6ef29daabae3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\",\r\n            \"fundingAccountId\": \"{{fundingAccountid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location  Not Mandatory Field Blank - isoAlpha3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5cbea15-8de8-4ffa-b899-4d4864be40af",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"pm.test(\"Verify that isoAlpha3 are null\", function () {",
									"    var isoAlpha3 = jsonData.data.createLocation.location.isoAlpha3.value;",
									"    pm.expect(isoAlpha3).to.eql(null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b7235568-499a-4212-a745-c4ff2a97a47c",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"locationName\", \"LocationName\" + moment().format(\"DDMMhhmmss\"));\r",
									"\r",
									"// Taking random value for the locationType from pre-defined possible values\r",
									"var optionsArray = ['City', 'County', 'State', 'Country', 'CrossBorderArea'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('locationType', optionsArray[randomNumber]);\r",
									"\r",
									"// // Taking random value for the locationSensitivity from pre-defined possible values\r",
									"var optionsArray = ['Low', 'Medium', 'High'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('locationSensitivity', optionsArray[randomNumber]);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"\",\r\n            \"fundingAccountId\": \"{{fundingAccountid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location  Not Mandatory Field Removed  - isoAlpha3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2eb528c0-c004-4643-8f43-d56033c1f6ea",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that location ID is not blank or null\", function () {",
									"    var id = jsonData.data.createLocation.location.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"",
									"});",
									"",
									"pm.test(\"Verify that isoAlpha3 are null\", function () {",
									"    var isoAlpha3 = jsonData.data.createLocation.location.isoAlpha3.value;",
									"    pm.expect(isoAlpha3).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2c29b8ba-d523-467a-a3eb-7e4efb6bd2ec",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"locationName\", \"LocationName\" + moment().format(\"DDMMhhmmss\"));\r",
									"\r",
									"// Taking random value for the locationType from pre-defined possible values\r",
									"var optionsArray = ['City', 'County', 'State', 'Country', 'CrossBorderArea'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('locationType', optionsArray[randomNumber]);\r",
									"\r",
									"// // Taking random value for the locationSensitivity from pre-defined possible values\r",
									"var optionsArray = ['Low', 'Medium', 'High'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('locationSensitivity', optionsArray[randomNumber]);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"fundingAccountId\": \"{{fundingAccountid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location  Not Mandatory Field Blank - fundingAccountId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5429d814-3971-4bab-8e5a-b5be1024267b",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that minLength message is correct\", function () {",
									"    var fundingAccountId_message = jsonData.errors[0].extensions.errors['location.fundingAccountId'].IsId;",
									"    pm.expect(fundingAccountId_message).to.eql(\"Invalid ID\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fd5eca7a-e5df-4bae-a342-b64c1a2cc4cb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\",\r\n            \"fundingAccountId\": \"\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location  Not Mandatory Field Removed  - fundingAccountId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "765f5fe4-eab1-4018-944e-cd8ea1342ae7",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that location ID is not blank or null\", function () {",
									"    var id = jsonData.data.createLocation.location.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"",
									"});",
									"",
									"pm.test(\"Verify that fundingAccount are null\", function () {",
									"    var fundingAccount = jsonData.data.createLocation.location.fundingAccount.value;",
									"    pm.expect(fundingAccount).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5f9c151d-c8a2-42be-ade6-e9c3029ec030",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"locationName\", \"LocationName\" + moment().format(\"DDMMhhmmss\"));\r",
									"\r",
									"// Taking random value for the locationType from pre-defined possible values\r",
									"var optionsArray = ['City', 'County', 'State', 'Country', 'CrossBorderArea'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('locationType', optionsArray[randomNumber]);\r",
									"\r",
									"// // Taking random value for the locationSensitivity from pre-defined possible values\r",
									"var optionsArray = ['Low', 'Medium', 'High'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('locationSensitivity', optionsArray[randomNumber]);\r",
									"\r",
									"\r",
									"// Taking random value for the isoAlpha3 from pre-defined possible values\r",
									"var optionsArray = ['ABW',\r",
									"    'USA',\r",
									"    'ALA',\r",
									"    'IND',\r",
									"    'AUS'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('isoAlpha3', optionsArray[randomNumber]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location Success - Only Required Inputs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c77fe61-7861-4419-8f3f-db268321f7d7",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that location ID is not blank or null\", function () {",
									"    var id = jsonData.data.createLocation.location.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"",
									"});",
									"",
									"pm.test(\"Verify that isoAlpha3 are null\", function () {",
									"    var isoAlpha3 = jsonData.data.createLocation.location.isoAlpha3.value;",
									"    pm.expect(isoAlpha3).to.eql(null);",
									"});",
									"",
									"pm.test(\"Verify that fundingAccount are null\", function () {",
									"    var fundingAccount = jsonData.data.createLocation.location.fundingAccount.value;",
									"    pm.expect(fundingAccount).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d3ddb714-d81d-4f4b-9cac-a30ddafbc19c",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"locationName\", \"LocationName\" + moment().format(\"DDMMhhmmss\"));\r",
									"\r",
									"// Taking random value for the locationType from pre-defined possible values\r",
									"var optionsArray = ['City', 'County', 'State', 'Country', 'CrossBorderArea'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('locationType', optionsArray[randomNumber]);\r",
									"\r",
									"// // Taking random value for the locationSensitivity from pre-defined possible values\r",
									"var optionsArray = ['Low', 'Medium', 'High'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('locationSensitivity', optionsArray[randomNumber]);\r",
									"\r",
									"// Taking random value for the isoAlpha3 from pre-defined possible values\r",
									"var optionsArray = ['ABW',\r",
									"    'USA',\r",
									"    'ALA',\r",
									"    'IND',\r",
									"    'AUS'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('isoAlpha3', optionsArray[randomNumber]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location Parameter Mismatch - Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b3e865a-0284-45d7-8c06-3db6c2b55455",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"name\\\" of required type \\\"String!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9e0b3aaa-409b-45e9-afec-1f8b068e8ab0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name1\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\",\r\n            \"fundingAccountId\": \"{{fundingAccountid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location Parameter Mismatch - Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d3ee73f-3bd4-42f2-9e81-bcaef0b96644",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"type\\\" of required type \\\"LocationType!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "91f16906-238d-4e01-bf54-69e42da1eeaf",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"type1\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\",\r\n            \"fundingAccountId\": \"{{fundingAccountid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location Parameter Mismatch - Sensitivity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ac76303-2703-4a9f-9d9f-8e2b70783fb5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"sensitivity\\\" of required type \\\"Sensitivity!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fee867e9-3759-430a-93ce-03d2a431bfff",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity1\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\",\r\n            \"fundingAccountId\": \"{{fundingAccountid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location Parameter Mismatch - isoAlpha3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2cfa70a-cb1c-4d84-ac76-d8bb74cce372",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"isoAlpha31\\\" is not defined by type \\\"CreateLocation\\\". Did you mean \\\"isoAlpha3\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "339df5af-f3a8-4c86-bbcd-ea8d4c3aa69e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha31\": \"{{isoAlpha3}}\",\r\n            \"fundingAccountId\": \"{{fundingAccountid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location Parameter Mismatch - fundingAccountId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c851394-a6e1-4388-b4cc-82cb1bbcfc7f",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"fundingAccountId1\\\" is not defined by type \\\"CreateLocation\\\". Did you mean \\\"fundingAccountId\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e9350f3c-1077-4726-8138-5a121f443cfb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\",\r\n            \"fundingAccountId1\": \"{{fundingAccountid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location Parameter Invalid  - Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11d17fea-501f-4d27-ac45-ad1efdf07445",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"LocationType\\\" enum\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d64a6dc6-cab1-414b-9a95-45c7c71dc7a0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"!@#$%^&8\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\",\r\n            \"fundingAccountId\": \"{{fundingAccountid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location Parameter Invalid  - Sensitivity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c3c2b3c-34e8-4a06-b2f6-ab686ae4e40c",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Sensitivity\\\" enum\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "129debf3-6ef6-4a55-8d1c-a9a8f8dbd2c1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"!@#$%^&*\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\",\r\n            \"fundingAccountId\": \"{{fundingAccountid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location Parameter Invalid  - isoAlpha3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8dde081-3e7c-468f-82bb-d5dd002d6593",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors['location.isoAlpha3']['ISO-3166-1-Alpha-3'];",
									"    pm.expect(error_message).to.eql(\"Invalid ISO-3166-1 alpha-3 country code\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3eeed4bd-88d4-4a57-9c84-5e0ed223f9ae",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"locationName\", \"LocationName\" + moment().format(\"DDMMhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"@#$%^&\",\r\n            \"fundingAccountId\": \"{{fundingAccountid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Location Parameter Invalid  - fundingAccountId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62e1a0c9-0c52-43a2-9d82-e4fc22b4011f",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that minLength message is correct\", function () {",
									"    var fundingAccountId_message = jsonData.errors[0].extensions.errors['location.fundingAccountId'].IsId;",
									"    pm.expect(fundingAccountId_message).to.eql(\"Invalid ID\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "17ed6267-79c8-4ec4-94b7-3947f575b439",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\",\r\n            \"fundingAccountId\": \"@#$%^&*()_\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Location by Id Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9015fbab-7029-48dd-8152-7b25caf94eea",
								"exec": [
									"var jsonData = pm.response.json();",
									"var location_data = JSON.parse(pm.globals.get('location_data'));",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that location ID is not blank or null\", function () {",
									"    var id = jsonData.data.location.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"// Verifying location info",
									"pm.test(\"Verify that location is returned for requested location ID\", function () {",
									"    var id = jsonData.data.location.id;",
									"    pm.expect(id).to.eql(pm.variables.get(\"locationid\"));",
									"});",
									"",
									"pm.test(\"Verifying location's createdAt\", function () {",
									"    var createdAt = jsonData.data.location.createdAt;",
									"    pm.expect(createdAt).to.eql(location_data.createdAt);",
									"});",
									"",
									"pm.test(\"Verifying location name\", function () {",
									"    var name = jsonData.data.location.name.value;",
									"    pm.expect(name).to.eql(location_data.name.value);",
									"});",
									"",
									"pm.test(\"Verifying location type\", function () {",
									"    var type = jsonData.data.location.type.value;",
									"    pm.expect(type).to.eql(location_data.type.value);",
									"});",
									"",
									"pm.test(\"Verifying location sensitivity\", function () {",
									"    var sensitivity = jsonData.data.location.sensitivity;",
									"    pm.expect(sensitivity).to.eql(location_data.sensitivity);",
									"});",
									"",
									"pm.test(\"Verifying location isoAlpha3\", function () {",
									"    var isoAlpha3 = jsonData.data.location.isoAlpha3.value;",
									"    pm.expect(isoAlpha3).to.eql(location_data.isoAlpha3.value);",
									"});",
									"",
									"// Verify fundingAccount details",
									"pm.test(\"Verifying fundingAccount ID\", function () {",
									"    var id = jsonData.data.location.fundingAccount.value.id;",
									"    pm.expect(id).to.eql(location_data.fundingAccount.value.id);",
									"});",
									"",
									"pm.test(\"Verifying fundingAccount createdAt\", function () {",
									"    var createdAt = jsonData.data.location.fundingAccount.value.createdAt;",
									"    pm.expect(createdAt).to.eql(location_data.fundingAccount.value.createdAt);",
									"});",
									"",
									"pm.test(\"Verifying fundingAccount name\", function () {",
									"    var name = jsonData.data.location.fundingAccount.value.name.value;",
									"    pm.expect(name).to.eql(location_data.fundingAccount.value.name.value);",
									"});",
									"",
									"pm.test(\"Verifying fundingAccount accountNumber\", function () {",
									"    var accountNumber = jsonData.data.location.fundingAccount.value.accountNumber.value;",
									"    pm.expect(accountNumber).to.eql(location_data.fundingAccount.value.accountNumber.value);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query location($id: ID!) {\r\n  location(id: $id) {\r\n    id\r\n    createdAt\r\n    name {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    type {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    sensitivity\r\n    isoAlpha3 {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n    fundingAccount {\r\n      value {\r\n        id\r\n        createdAt\r\n        name {\r\n          value\r\n          canEdit\r\n          canRead\r\n        }\r\n        accountNumber {\r\n          value\r\n          canEdit\r\n          canRead\r\n        }\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"id\": \"{{locationid}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Location by Id Mandatory Field Blank - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b08a9f8-fd98-455a-ab5b-59119f1c7c14",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors.id.IsId;",
									"    pm.expect(error_message).to.eql(\"Invalid ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query location($id: ID!) {\r\n  location(id: $id) {\r\n    id\r\n    createdAt\r\n    name {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    type {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    sensitivity\r\n    isoAlpha3 {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n    fundingAccount {\r\n      value {\r\n        id\r\n        createdAt\r\n        name {\r\n          value\r\n          canEdit\r\n          canRead\r\n        }\r\n        accountNumber {\r\n          value\r\n          canEdit\r\n          canRead\r\n        }\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"id\": \"\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Location by Id Parameter Mismatch - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b267c344-274b-417f-a081-a5ec80cae458",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query location($id: ID!) {\r\n  location(id: $id) {\r\n    id\r\n    createdAt\r\n    name {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    type {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    sensitivity\r\n    isoAlpha3 {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n    fundingAccount {\r\n      value {\r\n        id\r\n        createdAt\r\n        name {\r\n          value\r\n          canEdit\r\n          canRead\r\n        }\r\n        accountNumber {\r\n          value\r\n          canEdit\r\n          canRead\r\n        }\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"id1\": \"{{locationid}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Location by Id Parameter Invalid  - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2464011c-7dc5-4a44-823e-6d16e37f7b94",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors.id.IsId;",
									"    pm.expect(error_message).to.eql(\"Invalid ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query location($id: ID!) {\r\n  location(id: $id) {\r\n    id\r\n    createdAt\r\n    name {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    type {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    sensitivity\r\n    isoAlpha3 {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n    fundingAccount {\r\n      value {\r\n        id\r\n        createdAt\r\n        name {\r\n          value\r\n          canEdit\r\n          canRead\r\n        }\r\n        accountNumber {\r\n          value\r\n          canEdit\r\n          canRead\r\n        }\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"id\": \"@#$%^&*()_\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e22b9828-3ecf-4a83-b656-99e1fa5394de",
								"exec": [
									"var jsonData = pm.response.json();",
									"const moment = require('moment');",
									"var fundingAccount_data = JSON.parse(pm.globals.get('fundingAccount_data'));",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that ID is not blank or null\", function () {",
									"    var id = jsonData.data.updateLocation.location.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"// Saving data for future use",
									"var location = jsonData.data.updateLocation.location;",
									"pm.globals.set('location_data', JSON.stringify(location));",
									"",
									"pm.test(\"Verify that location data is updated exactly for requested location ID\", function () {",
									"    var id = jsonData.data.updateLocation.location.id;",
									"    pm.expect(id).to.eql(pm.variables.get(\"locationid\"));",
									"});",
									"",
									"pm.test(\"Verify that location's createdAt is in Specific time format\", function () {",
									"    var time = jsonData.data.updateLocation.location.createdAt;",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();",
									"    pm.expect(isValidTime).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify updated location name is same as requested\", function () {",
									"    pm.expect(jsonData.data.updateLocation.location.name.value).to.eql(pm.globals.get(\"locationName\"));",
									"});",
									"",
									"pm.test(\"Verify updated location type is same as requested\", function () {",
									"    pm.expect(jsonData.data.updateLocation.location.type.value).to.eql(pm.globals.get(\"locationType\"));",
									"});",
									"",
									"pm.test(\"Verify updated location name is same as requested\", function () {",
									"    pm.expect(jsonData.data.updateLocation.location.sensitivity).to.eql(pm.globals.get(\"locationSensitivity\"));",
									"});",
									"",
									"pm.test(\"Verify updated location isoAlpha3 is same as requested\", function () {",
									"    pm.expect(jsonData.data.updateLocation.location.isoAlpha3.value).to.eql(pm.globals.get(\"isoAlpha3\"));",
									"});",
									"",
									"// Verify fundingAccount details",
									"pm.test(\"Verifying fundingAccount ID\", function () {",
									"    var id = jsonData.data.updateLocation.location.fundingAccount.value.id;",
									"    pm.expect(id).to.eql(fundingAccount_data.id);",
									"});",
									"",
									"pm.test(\"Verifying fundingAccount createdAt\", function () {",
									"    var createdAt = jsonData.data.updateLocation.location.fundingAccount.value.createdAt;",
									"    pm.expect(createdAt).to.eql(fundingAccount_data.createdAt);",
									"});",
									"",
									"pm.test(\"Verifying fundingAccount name\", function () {",
									"    var name = jsonData.data.updateLocation.location.fundingAccount.value.name.value;",
									"    pm.expect(name).to.eql(fundingAccount_data.name.value);",
									"});",
									"",
									"pm.test(\"Verifying fundingAccount accountNumber\", function () {",
									"    var accountNumber = jsonData.data.updateLocation.location.fundingAccount.value.accountNumber.value;",
									"    pm.expect(accountNumber).to.eql(fundingAccount_data.accountNumber.value);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "33df78e2-2422-4495-9db3-f5a5945feb32",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"locationName\", \"LocationName\" + moment().format(\"DDMMhhmmss\"));\r",
									"\r",
									"// Taking random value for the locationType from pre-defined possible values\r",
									"var optionsArray = ['City', 'County', 'State', 'Country', 'CrossBorderArea'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('locationType', optionsArray[randomNumber]);\r",
									"\r",
									"// // Taking random value for the locationSensitivity from pre-defined possible values\r",
									"var optionsArray = ['Low', 'Medium', 'High'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('locationSensitivity', optionsArray[randomNumber]);\r",
									"\r",
									"// Taking random value for the isoAlpha3 from pre-defined possible values\r",
									"var optionsArray = ['ABW',\r",
									"    'USA',\r",
									"    'ALA',\r",
									"    'IND',\r",
									"    'AUS'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('isoAlpha3', optionsArray[randomNumber]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLocation($input: UpdateLocationInput!) {\r\n  updateLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      canDelete\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"id\": \"{{locationid}}\",\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location Success Only Required Inputs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "085b6bca-2c7b-43b7-8b66-2f8b4f833d39",
								"exec": [
									"var jsonData = pm.response.json();",
									"const moment = require('moment');",
									"var fundingAccount_data = JSON.parse(pm.globals.get('fundingAccount_data'));",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that ID is not blank or null\", function () {",
									"    var id = jsonData.data.updateLocation.location.id;  ",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that location data is updated exactly for requested location ID\", function () {",
									"    var id = jsonData.data.updateLocation.location.id;",
									"    pm.expect(id).to.eql(pm.variables.get(\"locationid\"));",
									"});",
									"",
									"pm.test(\"Verify updated location name is same as previous value\", function () {",
									"    pm.expect(jsonData.data.updateLocation.location.name.value).to.eql(pm.globals.get(\"locationName\"));",
									"});",
									"",
									"pm.test(\"Verify updated location type is same as previous value\", function () {",
									"    pm.expect(jsonData.data.updateLocation.location.type.value).to.eql(pm.globals.get(\"locationType\"));",
									"});",
									"",
									"pm.test(\"Verify updated location sensitivity is same as previous value\", function () {",
									"    pm.expect(jsonData.data.updateLocation.location.sensitivity).to.eql(pm.globals.get(\"locationSensitivity\"));",
									"});",
									"",
									"pm.test(\"Verify updated location isoAlpha3 is same as previous value\", function () {",
									"    pm.expect(jsonData.data.updateLocation.location.isoAlpha3.value).to.eql(pm.globals.get(\"isoAlpha3\"));",
									"});",
									"",
									"// Verify fundingAccount details",
									"pm.test(\"Verifying fundingAccount ID\", function () {",
									"    var id = jsonData.data.updateLocation.location.fundingAccount.value.id;",
									"    pm.expect(id).to.eql(fundingAccount_data.id);",
									"});",
									"",
									"pm.test(\"Verifying fundingAccount createdAt\", function () {",
									"    var createdAt = jsonData.data.updateLocation.location.fundingAccount.value.createdAt;",
									"    pm.expect(createdAt).to.eql(fundingAccount_data.createdAt);",
									"});",
									"",
									"pm.test(\"Verifying fundingAccount name\", function () {",
									"    var name = jsonData.data.updateLocation.location.fundingAccount.value.name.value;",
									"    pm.expect(name).to.eql(fundingAccount_data.name.value);",
									"});",
									"",
									"pm.test(\"Verifying fundingAccount accountNumber\", function () {",
									"    var accountNumber = jsonData.data.updateLocation.location.fundingAccount.value.accountNumber.value;",
									"    pm.expect(accountNumber).to.eql(fundingAccount_data.accountNumber.value);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4f4641b4-938b-4dc0-8dd8-b869e9621e7f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLocation($input: UpdateLocationInput!) {\r\n  updateLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"id\": \"{{locationid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location  Mandatory Field Removed - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba4042ff-8a06-412e-a585-0987c989da52",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"id\\\" of required type \\\"ID!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "250d28bc-4a61-4a56-bd00-ae2bf7087349",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLocation($input: UpdateLocationInput!) {\r\n  updateLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location  Mandatory Field Blank - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "950566c8-7e92-46ee-898a-26743b26bd61",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_code = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_code).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that error locationId message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors['location.id'].IsId;",
									"    pm.expect(error_message).to.include(\"Invalid ID\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6cd9e0ca-ba4b-4a3f-baa0-a373085af4f7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLocation($input: UpdateLocationInput!) {\r\n  updateLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"id\": \"\",\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location Not Mandatory Field Removed - Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "12c5e140-4d6b-4b9c-b999-9f6228b484b5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that location ID is not blank or null\", function () {",
									"    var id = jsonData.data.updateLocation.location.id.value;;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that locations name is equal to previous value\", function () {",
									"    var locationName = jsonData.data.updateLocation.location.name.value;",
									"    pm.expect(locationName).to.eql(pm.globals.get('locationName'));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6c1c392f-135a-47dc-ab62-3f4b2d15e9e4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLocation($input: UpdateLocationInput!) {\r\n  updateLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"id\": \"{{locationid}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location Not Mandatory Field Blank  - Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2b10c99-60cb-43ac-a8eb-83223beb812b",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that minLength message is correct\", function () {",
									"    var minLength_message = jsonData.errors[0].extensions.errors['location.name'].minLength;",
									"    pm.expect(minLength_message).to.eql(\"name must be longer than or equal to 1 characters\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27612a8f-50b1-4748-99e3-bcfbe4574a17",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLocation($input: UpdateLocationInput!) {\r\n  updateLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"id\": \"{{locationid}}\",\r\n            \"name\": \"\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location Not Mandatory Field Removed - Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1216e99b-0498-4285-a0d9-ec6452555658",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that location ID is not blank or null\", function () {",
									"    var id = jsonData.data.updateLocation.location.id.value;;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that locations type is equal to previous value\", function () {",
									"    var type = jsonData.data.updateLocation.location.type.value;",
									"    pm.expect(type).to.eql(pm.globals.get('locationType'));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9b0f371d-2d5f-4337-a606-f65f933a6269",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLocation($input: UpdateLocationInput!) {\r\n  updateLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"id\": \"{{locationid}}\",\r\n            \"name\": \"{{locationName}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location Not Mandatory Field Blank  - Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ed8d9c8-3a2f-4dc9-89a6-21a2e67f8a4a",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"LocationType\\\" enum\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "25da7731-b099-4ba0-a27f-f055bcf0b707",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLocation($input: UpdateLocationInput!) {\r\n  updateLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"id\": \"{{locationid}}\",\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location Not Mandatory Field Removed  - Sensitivity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "431f5ad7-35ee-4746-8005-bc465a177034",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that location ID is not blank or null\", function () {",
									"    var id = jsonData.data.updateLocation.location.id.value;;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that locations sensitivity is equal to previous value\", function () {",
									"    var sensitivity = jsonData.data.updateLocation.location.sensitivity;",
									"    pm.expect(sensitivity).to.eql(pm.globals.get('locationSensitivity'));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "273f45d3-0548-43c6-802b-53c595365d29",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLocation($input: UpdateLocationInput!) {\r\n  updateLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"id\": \"{{locationid}}\",\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location Not Mandatory Field Blank  - Sensitivity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6c96571-f730-4f1b-91c1-05b428f8e578",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Sensitivity\\\" enum\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3fc679a4-20a5-46be-abb9-3ee7472e672a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLocation($input: UpdateLocationInput!) {\r\n  updateLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"id\": \"{{locationid}}\",\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location Not Mandatory Field Removed - isoAlpha3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5c5d09c-29c3-4382-ad20-c74a9b1f0efa",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that location ID is not blank or null\", function () {",
									"    var id = jsonData.data.updateLocation.location.id.value;;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that locations isoAlpha3 is equal to previous value\", function () {",
									"    var isoAlpha3 = jsonData.data.updateLocation.location.isoAlpha3.value;",
									"    pm.expect(isoAlpha3).to.eql(pm.globals.get('isoAlpha3'));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "02b65be7-e87b-4952-96fe-1c9389d61d5f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLocation($input: UpdateLocationInput!) {\r\n  updateLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"id\": \"{{locationid}}\",\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location Not Mandatory Field Blank  - isoAlpha3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c51ba80c-e766-4e97-9ee5-21f04ad68dc1",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that isoAlpha3 are null\", function () {",
									"    var isoAlpha3 = jsonData.data.updateLocation.location.isoAlpha3.value;",
									"    pm.expect(isoAlpha3).to.eql(null);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c84d3df7-0866-4221-aebd-5f1fb624915d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLocation($input: UpdateLocationInput!) {\r\n  updateLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"id\": \"{{locationid}}\",\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location Parameter Mismatch - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b8745b13-1dbb-402a-9d06-25bfdbe42b22",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Field \\\"id\\\" of required type \\\"ID!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8383ac2f-89a1-4aaf-bfa1-dba1f3956d56",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLocation($input: UpdateLocationInput!) {\r\n  updateLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"id1\": \"{{locationid}}\",\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location Parameter Mismatch - Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2d27ef8-9631-465e-b0b4-cb52a5bdc94f",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Field \\\"name1\\\" is not defined by type \\\"UpdateLocation\\\". Did you mean \\\"name\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "380cb920-bc53-4aab-ae4f-7eb944291eaa",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLocation($input: UpdateLocationInput!) {\r\n  updateLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"id\": \"{{locationid}}\",\r\n            \"name1\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location Parameter Mismatch - type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af1b669e-7231-4c5c-9f4f-1b10ff22464e",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Field \\\"type1\\\" is not defined by type \\\"UpdateLocation\\\". Did you mean \\\"type\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3c225803-70ec-4b52-9ab6-8e1b51ef517a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLocation($input: UpdateLocationInput!) {\r\n  updateLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"id\": \"{{locationid}}\",\r\n            \"name\": \"{{locationName}}\",\r\n            \"type1\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location Parameter Mismatch - Sensitivity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d61c6e2a-f8d6-4ee6-a594-14bca91f5b64",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Field \\\"sensitivity1\\\" is not defined by type \\\"UpdateLocation\\\". Did you mean \\\"sensitivity\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4409f68d-d3ee-499e-9a5a-bee334703240",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLocation($input: UpdateLocationInput!) {\r\n  updateLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"id\": \"{{locationid}}\",\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity1\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location Parameter Mismatch - isoAlpha3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd373e1a-cd73-4f9e-a791-7ffe26adf114",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"UpdateLocation\\\". Did you mean \\\"isoAlpha3\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "94c83b47-d5a8-46c7-9365-e4fbd83a7d82",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLocation($input: UpdateLocationInput!) {\r\n  updateLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"id\": \"{{locationid}}\",\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3$$$\": \"{{isoAlpha3}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location Parameter Invalid  - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38b3d819-efe3-4a8a-8d91-77ad87cddf7f",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that location id  message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors['location.id'].IsId;",
									"    pm.expect(error_message).to.eql(\"Invalid ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3994c590-3e1b-4997-b27d-0ad894f79e9d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLocation($input: UpdateLocationInput!) {\r\n  updateLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"id\": \"!@#$%^&\",\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location Parameter Invalid  - Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85adb9bf-3104-4f2a-9240-dc0db86665f3",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"LocationType\\\" enum\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1f417f0d-6b77-4086-ad84-dc03d13adb0b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLocation($input: UpdateLocationInput!) {\r\n  updateLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"id\": \"{{locationid}}\",\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"!@#$%^&*9\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Location Parameter Invalid  - Sensitivity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "608c7cc5-81a0-44a4-baa8-4c8e76c36bd9",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Sensitivity\\\" enum\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9b765e48-aba1-430e-a24b-04a52d81f59c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateLocation($input: UpdateLocationInput!) {\r\n  updateLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"id\": \"{{locationid}}\",\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"@#$%^&*\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Location Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7422af84-b299-48d2-9ec2-4ad534366bc4",
								"exec": [
									"var lodash = require('lodash');",
									"",
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - Pagination",
									"pm.test(\"Verify that total is greater than Zero\", function () {",
									"    var total = jsonData.data.locations.total;",
									"    pm.expect(total).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Verify that hasMore is correct\", function () {",
									"    var total = jsonData.data.locations.total;",
									"    var hasMore = jsonData.data.locations.hasMore;",
									"    if (Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) < total) {",
									"        pm.expect(hasMore).to.eql(true);",
									"    } else {",
									"        pm.expect(hasMore).to.eql(false);",
									"    }",
									"});",
									"//Test Specific - no. of items are exact",
									"pm.test(\"Verify that number of items returned are exact\", function () {",
									"    var total = jsonData.data.locations.total;                  // total returned in response",
									"    var returneditems = jsonData.data.locations.items.length;   // no. of items returned in response array",
									"    console.log('returneditems=',returneditems)",
									"    var itemCount = Number(pm.globals.get('itemCount'));    // no. of items per page",
									"    var page = Number(pm.globals.get('page'));              // page number",
									"    var expectedItems = itemCount * page;                   // items we are expecting",
									"",
									"    if (expectedItems <= total) {",
									"        pm.expect(returneditems).to.eql(itemCount);",
									"    } else {",
									"        if ((expectedItems - total) < itemCount) {",
									"            var lastItems = total - ((itemCount * (page - 1)));   // items in last page",
									"            pm.expect(returneditems).to.eql(lastItems);",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Setting up 'page' number to be used in next request",
									" * For locating recently created Object position on Specific page",
									" */",
									"var total = jsonData.data.locations.total;",
									"var itemCount = Number(pm.globals.get('itemCount'));",
									"",
									"if (total > itemCount) {",
									"",
									"    if ((total % itemCount) == 0) {",
									"        var pageToset = total / itemCount;",
									"        pm.globals.set(\"page\", pageToset);",
									"    } else {",
									"        var pageToset = Math.floor(total / itemCount) + 1;",
									"        pm.globals.set(\"page\", pageToset);",
									"    }",
									"",
									"} else {",
									"    pm.globals.set(\"page\", 1);  // Set page to 1 if total <= itemCount",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3caff875-a072-451d-af96-36bfefd0e59e",
								"exec": [
									"pm.globals.set(\"itemCount\",25);\r",
									"pm.globals.set(\"page\",1);\r",
									"pm.globals.set('order', \"DESC\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query locationList($input: LocationListInput!) {\r\n  locations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Location Success - item Object",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc917494-6ee9-41e3-8e50-876926c5ce0c",
								"exec": [
									"var jsonData = pm.response.json();",
									"var location_data = JSON.parse(pm.variables.get(\"location_data\")); // Get stored Location object",
									"var lodash = require('lodash');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - Pagination",
									"pm.test(\"Verify that total is greater than Zero\", function () {",
									"    var total = jsonData.data.locations.total;",
									"    pm.expect(total).to.be.above(0);",
									"});",
									"",
									"/**",
									" * Verifying recently created locations's information with Locations object returned within items array",
									" */",
									"",
									"// get locations object first having same id as recently created locations's id",
									"var myLocation = lodash.find(jsonData.data.locations.items, ['id', location_data.id]);",
									"",
									"pm.test(\"Verify that recently created locations ID is not blank or null\", function () {",
									"    var id = myLocation.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verifying recently created locations's createdAt\", function () {",
									"    var createdAt = myLocation.createdAt;",
									"    pm.expect(createdAt).to.eql(location_data.createdAt);",
									"});",
									"",
									"pm.test(\"Verifying recently created locations's id\", function () {",
									"    var id = myLocation.id;",
									"    pm.expect(id).to.eql(location_data.id);",
									"});",
									"",
									"pm.test(\"Verifying recently created locations's name\", function () {",
									"    var name = myLocation.name.value;",
									"    pm.expect(name).to.eql(location_data.name.value);",
									"});",
									"",
									"pm.test(\"Verifying recently created locations's type\", function () {",
									"    var type = myLocation.type.value;",
									"    pm.expect(type).to.eql(location_data.type.value);",
									"});",
									"",
									"pm.test(\"Verifying recently created locations's sensitivity\", function () {",
									"    var sensitivity = myLocation.sensitivity;",
									"    pm.expect(sensitivity).to.eql(location_data.sensitivity);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "065bdb90-7c43-4400-bde9-b125914f51af",
								"exec": [
									"pm.globals.set(\"itemCount\",25);\r",
									"// Page is set from previous request test script based on total\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query locationList($input: LocationListInput!) {\r\n  locations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Location Success - total",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa0f1298-7f7d-4920-a883-a19fe646bd73",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - total",
									"pm.test(\"Verify that total is greater than Zero\", function () {",
									"    var total = jsonData.data.locations.total;  ",
									"    pm.expect(total).to.be.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4c6ebce0-c253-4e87-90e8-3d4406c0eca7",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query locationList($input: LocationListInput!) {\r\n  locations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Location Success -  hasMore - True",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "68cd0122-f218-4522-91fa-16604110d2c4",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - hasMore",
									"pm.test(\"Verify that hasMore is true Only when education items are still available\", function () {",
									"    var total = jsonData.data.locations.total;",
									"    var hasMore = jsonData.data.locations.hasMore;  ",
									"    if(Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) < total){",
									"        pm.expect(hasMore).to.eql(true);",
									"    } else {",
									"        pm.expect(hasMore).to.eql(false);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6e0880d1-a2d6-4189-ac57-bc2ad471be4d",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query locationList($input: LocationListInput!) {\r\n  locations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Location Success -  hasMore - False",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9156435e-bf5b-4b87-81bb-180da671dcd8",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - hasMore",
									"pm.test(\"Verify that hasMore is false Only when no more location items available\", function () {",
									"    var total = jsonData.data.locations.total;",
									"    var hasMore = jsonData.data.locations.hasMore;  ",
									"    if(Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) >= total){",
									"        pm.expect(hasMore).to.eql(false);",
									"    } else{",
									"        pm.expect(hasMore).to.eql(true);",
									"    }",
									"});",
									"",
									"pm.test(\"Verify that location ID is not blank or null\", function () {",
									"    var id = jsonData.data.locations.items[0].id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7642f7cc-9e33-417b-98cd-886319ed735c",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query locationList($input: LocationListInput!) {\r\n  locations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Location Success  -  items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7accafd8-863b-4b35-bdb0-a5b460ff60c1",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - no. of items are exact",
									"pm.test(\"Verify that number of items returned are exact\", function () {",
									"    var total = jsonData.data.locations.total;                  // total returned in response",
									"    var returneditems = jsonData.data.locations.items.length;   // no. of items returned in response array",
									"    var itemCount = Number(pm.globals.get('itemCount'));    // no. of items per page",
									"    var page = Number(pm.globals.get('page'));              // page number",
									"    var expectedItems = itemCount * page;                   // items we are expecting",
									"",
									"    if (expectedItems <= total) {",
									"        pm.expect(returneditems).to.eql(itemCount);",
									"    } else {",
									"        if ((expectedItems - total) < itemCount) {",
									"            var lastItems = total - ((itemCount * (page - 1)));   // items in last page",
									"            pm.expect(returneditems).to.eql(lastItems);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "70cfbe62-3a4d-4836-9694-8f3747f9e8e9",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query locationList($input: LocationListInput!) {\r\n  locations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Sort Location  by name  (Create Location)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a57b6c1-d336-4179-8f5a-ea8de0e88b1d",
								"exec": [
									"var jsonData = pm.response.json();",
									"const moment = require('moment');",
									"var lodash = require('lodash');",
									"",
									"var fundingAccount_data = JSON.parse(pm.globals.get('fundingAccount_data'));",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that location ID is not blank or null\", function () {",
									"    var id = jsonData.data.createLocation.location.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"",
									"    // Saving data for future use",
									"    pm.globals.set(\"locationid\", id);",
									"});",
									"",
									"// Saving whole location Object to globals for future use",
									"var location = JSON.stringify(jsonData.data.createLocation.location);",
									"pm.globals.set(\"location_data\", location);",
									"",
									"pm.test(\"Verify that location's createdAt is in Specific time format\", function () {",
									"    var time = jsonData.data.createLocation.location.createdAt;",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();",
									"    pm.expect(isValidTime).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify that location Name is same as requested\", function () {",
									"    var locationName = jsonData.data.createLocation.location.name.value;",
									"    pm.expect(locationName).to.eql(pm.globals.get('locationName'));",
									"});",
									"",
									"pm.test(\"Verify that location type is same as requested\", function () {",
									"    var type = jsonData.data.createLocation.location.type.value;",
									"    pm.expect(type).to.eql(pm.globals.get('locationType'));",
									"});",
									"",
									"pm.test(\"Verify that location sensitivity is same as requested\", function () {",
									"    var sensitivity = jsonData.data.createLocation.location.sensitivity;",
									"    pm.expect(sensitivity).to.eql(pm.globals.get('locationSensitivity'));",
									"});",
									"",
									"pm.test(\"Verify that location isoAlpha3 code  is same as requested\", function () {",
									"    var isoAlpha3 = jsonData.data.createLocation.location.isoAlpha3.value;",
									"    pm.expect(isoAlpha3).to.eql(pm.globals.get('isoAlpha3'));",
									"});",
									"",
									"// Verify fundingAccount details",
									"pm.test(\"Verifying fundingAccount ID\", function () {",
									"    var id = jsonData.data.createLocation.location.fundingAccount.value.id;",
									"    pm.expect(id).to.eql(fundingAccount_data.id);",
									"});",
									"",
									"pm.test(\"Verifying fundingAccount createdAt\", function () {",
									"    var createdAt = jsonData.data.createLocation.location.fundingAccount.value.createdAt;",
									"    pm.expect(createdAt).to.eql(fundingAccount_data.createdAt);",
									"});",
									"",
									"pm.test(\"Verifying fundingAccount name\", function () {",
									"    var name = jsonData.data.createLocation.location.fundingAccount.value.name.value;",
									"    pm.expect(name).to.eql(fundingAccount_data.name.value);",
									"});",
									"",
									"pm.test(\"Verifying fundingAccount accountNumber\", function () {",
									"    var accountNumber = jsonData.data.createLocation.location.fundingAccount.value.accountNumber.value;",
									"    pm.expect(accountNumber).to.eql(fundingAccount_data.accountNumber.value);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "59f85784-17fb-4da6-97ee-0acf9214fcce",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"locationName\", \"auto_LocationSort\" + moment().format(\"DDMMhhmmss\"));\r",
									"\r",
									"// Taking random value for the locationType from pre-defined possible values\r",
									"var optionsArray = ['City',\r",
									"    'County',\r",
									"    'State',\r",
									"    'Country',\r",
									"    'CrossBorderArea'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('locationType', optionsArray[randomNumber]);\r",
									"\r",
									"// Taking random value for the locationSensitivity from pre-defined possible values\r",
									"var optionsArray = ['Low', 'Medium', 'High'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('locationSensitivity', optionsArray[randomNumber]);\r",
									"\r",
									"// Taking random value for the isoAlpha3 from pre-defined possible values\r",
									"var optionsArray = ['ABW',\r",
									"    'USA',\r",
									"    'ALA',\r",
									"    'IND',\r",
									"    'AUS'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('isoAlpha3', optionsArray[randomNumber]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\",\r\n            \"fundingAccountId\": \"{{fundingAccountid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Sort Location  by name  (Create Location 2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab4addd7-2698-4edf-84ea-f03a243c7c96",
								"exec": [
									"var jsonData = pm.response.json();",
									"const moment = require('moment');",
									"var lodash = require('lodash');",
									"",
									"var fundingAccount_data = JSON.parse(pm.globals.get('fundingAccount_data'));",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that location ID is not blank or null\", function () {",
									"    var id = jsonData.data.createLocation.location.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"",
									"    // Saving data for future use",
									"    pm.globals.set(\"locationid\", id);",
									"});",
									"",
									"// Saving whole location Object to globals for future use",
									"var location = JSON.stringify(jsonData.data.createLocation.location);",
									"pm.globals.set(\"location_data\", location);",
									"",
									"pm.test(\"Verify that location's createdAt is in Specific time format\", function () {",
									"    var time = jsonData.data.createLocation.location.createdAt;",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();",
									"    pm.expect(isValidTime).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify that location Name is same as requested\", function () {",
									"    var locationName = jsonData.data.createLocation.location.name.value;",
									"    pm.expect(locationName).to.eql(pm.globals.get('locationName'));",
									"});",
									"",
									"pm.test(\"Verify that location type is same as requested\", function () {",
									"    var type = jsonData.data.createLocation.location.type.value;",
									"    pm.expect(type).to.eql(pm.globals.get('locationType'));",
									"});",
									"",
									"pm.test(\"Verify that location sensitivity is same as requested\", function () {",
									"    var sensitivity = jsonData.data.createLocation.location.sensitivity;",
									"    pm.expect(sensitivity).to.eql(pm.globals.get('locationSensitivity'));",
									"});",
									"",
									"pm.test(\"Verify that location isoAlpha3 code  is same as requested\", function () {",
									"    var isoAlpha3 = jsonData.data.createLocation.location.isoAlpha3.value;",
									"    pm.expect(isoAlpha3).to.eql(pm.globals.get('isoAlpha3'));",
									"});",
									"",
									"// Verify fundingAccount details",
									"pm.test(\"Verifying fundingAccount ID\", function () {",
									"    var id = jsonData.data.createLocation.location.fundingAccount.value.id;",
									"    pm.expect(id).to.eql(fundingAccount_data.id);",
									"});",
									"",
									"pm.test(\"Verifying fundingAccount createdAt\", function () {",
									"    var createdAt = jsonData.data.createLocation.location.fundingAccount.value.createdAt;",
									"    pm.expect(createdAt).to.eql(fundingAccount_data.createdAt);",
									"});",
									"",
									"pm.test(\"Verifying fundingAccount name\", function () {",
									"    var name = jsonData.data.createLocation.location.fundingAccount.value.name.value;",
									"    pm.expect(name).to.eql(fundingAccount_data.name.value);",
									"});",
									"",
									"pm.test(\"Verifying fundingAccount accountNumber\", function () {",
									"    var accountNumber = jsonData.data.createLocation.location.fundingAccount.value.accountNumber.value;",
									"    pm.expect(accountNumber).to.eql(fundingAccount_data.accountNumber.value);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eaab3a60-8826-4889-b308-a3c567112034",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"locationName\", \"Auto_LocationSort\" + moment().format(\"DDMMhhmmss\"));\r",
									"\r",
									"// Taking random value for the locationType from pre-defined possible values\r",
									"var optionsArray = ['City',\r",
									"    'County',\r",
									"    'State',\r",
									"    'Country',\r",
									"    'CrossBorderArea'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('locationType', optionsArray[randomNumber]);\r",
									"\r",
									"// Taking random value for the locationSensitivity from pre-defined possible values\r",
									"var optionsArray = ['Low', 'Medium', 'High'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('locationSensitivity', optionsArray[randomNumber]);\r",
									"\r",
									"// Taking random value for the isoAlpha3 from pre-defined possible values\r",
									"var optionsArray = ['ABW',\r",
									"    'USA',\r",
									"    'ALA',\r",
									"    'IND',\r",
									"    'AUS'];\r",
									"var randomNumber = Math.floor(Math.random() * optionsArray.length);\r",
									"pm.globals.set('isoAlpha3', optionsArray[randomNumber]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createLocation($input: CreateLocationInput!) {\r\n  createLocation(input: $input) {\r\n    location {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"location\": {\r\n            \"name\": \"{{locationName}}\",\r\n            \"type\": \"{{locationType}}\",\r\n            \"sensitivity\": \"{{locationSensitivity}}\",\r\n            \"isoAlpha3\": \"{{isoAlpha3}}\",\r\n            \"fundingAccountId\": \"{{fundingAccountid}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Location Success  - Name sorting ASC",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "46b271e4-c8a9-45b0-9e54-c6ba3e7bd844",
								"exec": [
									"pm.globals.set(\"itemCount\",25);\r",
									"pm.globals.set(\"page\",1);\r",
									"pm.globals.set('order', \"DESC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d403a65e-b244-4ca9-993d-8193e142b27d",
								"exec": [
									"var jsonData = pm.response.json();",
									"var lodash = require('lodash');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - Name sorting ASC",
									"pm.test(\"Verify that items are sorted by 'NAME' and orderd by 'ASC' order \", function () {",
									"",
									"    var responseBody = jsonData.data.locations.items;",
									"    var expectedSortedOrder = lodash.orderBy(responseBody, item => item.name.value.toLowerCase(),['asc']);",
									"    pm.expect(responseBody).to.eql(expectedSortedOrder);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query locationList($input: LocationListInput!) {\r\n  locations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Location Success  - Name sorting DESC",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89958aa8-ff10-48a2-b13f-0feb45d4545b",
								"exec": [
									"var jsonData = pm.response.json();",
									"var lodash = require('lodash');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - Name sorting DESC",
									"pm.test(\"Verify that items are sorted by 'NAME' and orderd by 'DESC' order \", function () {",
									"",
									"    var responseBody = jsonData.data.locations.items;",
									"    var expectedSortedOrder = lodash.orderBy(responseBody, item => item.name.value.toLowerCase(), ['desc']);",
									"    pm.expect(responseBody).to.eql(expectedSortedOrder);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "37cdde31-1416-4091-8b8d-af6af07d403b",
								"exec": [
									"pm.globals.set(\"itemCount\",25);\r",
									"pm.globals.set(\"page\",1);\r",
									"pm.globals.set('order', \"DESC\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query locationList($input: LocationListInput!) {\r\n  locations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Location Not Mandatory Field Removed - count",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1de9eea3-e2e7-4d3c-98c9-6638e45ce39e",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that number of items returned is equal to total\", function () {",
									"    var total = jsonData.data.locations.total;",
									"    var items = jsonData.data.locations.items.length;",
									"    if (total <= 25)    // 25 is maximum db items limit returned per page when count is not specified",
									"        pm.expect(items).to.eql(total);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fd7c8761-8823-4cc3-a70f-5d78b5fe4f5b",
								"exec": [
									"pm.globals.set(\"page\",1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query locationList($input: LocationListInput!) {\r\n  locations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Location Not Mandatory Field Blank - sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4ecaf68-9c57-46bf-8d5e-e9f559666718",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Invalid input\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 500\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(500);",
									"});",
									"",
									"pm.test(\"Verify that error code is InternalServerError\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"InternalServerError\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "70f1daa1-9b1a-4779-a161-2757b7219e76",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query locationList($input: LocationListInput!) {\r\n  locations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Location Not Mandatory Field Blank - order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab057311-56f4-4e0e-9e94-174d0bf6c27f",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Order\\\" enum.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9251792b-8657-48b8-b67b-da81316c6522",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query locationList($input: LocationListInput!) {\r\n  locations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Location Parameter Mismatch - count",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6bc067f-bf26-4cf6-93f0-7331dd0dc1a0",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"LocationListInput\\\". Did you mean \\\"count\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b149d2a8-12b3-4368-96e6-aaeabcbe1e18",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query locationList($input: LocationListInput!) {\r\n  locations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count1\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Location Parameter Mismatch - page",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4044606d-39e1-4295-a526-175a8014654b",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"LocationListInput\\\". Did you mean \\\"page\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "04389168-5ae0-4633-b62a-e11cfec0e5d5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query locationList($input: LocationListInput!) {\r\n  locations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page1\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Location Parameter Mismatch - sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec3c8c19-5848-495d-9bc7-9be680affa30",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"LocationListInput\\\". Did you mean \\\"sort\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5d710ba6-d30f-496c-b08c-8c7f5eb76ce0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query locationList($input: LocationListInput!) {\r\n  locations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort1\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Location Parameter Mismatch - order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ea0f342-0a6e-4122-b645-622bacb5ed1e",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"LocationListInput\\\". Did you mean \\\"order\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "36c3423b-2b32-4d5a-ac57-de5ec14be271",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query locationList($input: LocationListInput!) {\r\n  locations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order1\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Location Parameter Invalid - count min",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "682d8270-69fe-4b9f-bf2d-5c7fbdcb7d96",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that count error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors.count.min;",
									"    pm.expect(error_message).to.eql(\"count must not be less than 1\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "77bcb2fd-50a4-4f2d-aa95-d319f35b9895",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query locationList($input: LocationListInput!) {\r\n  locations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": 0,\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Location Parameter Invalid - count max",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95aea0e1-0946-4ce2-9f13-fbd6f7fd0ae6",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that count error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors.count.max;",
									"    pm.expect(error_message).to.eql(\"count must not be greater than 100\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9d5593b9-a30d-408a-9f8a-cfcc997a2286",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query locationList($input: LocationListInput!) {\r\n  locations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": 159,\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Location Parameter Invalid - page",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "489ede19-2c8e-484a-ad21-8f46ed7398de",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that page error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors.page.min;  ",
									"    pm.expect(error_message).to.eql(\"page must not be less than 1\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9608435c-039a-4701-86a0-75bc69e2d06c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query locationList($input: LocationListInput!) {\r\n  locations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": 0,\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Location Parameter Invalid - sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0340d874-294c-48ba-9117-2217b871299e",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"PENDING >> Similar to BUG #776(closed-Sprint 13) for Users (Sort Field allows empty value/unusual characters)\", function () {",
									"",
									"    if (jsonData.data) {",
									"        pm.expect(\"BACKEND\").to.eql(\"PENDING\"); // fail forcefully",
									"    } else {",
									"        pm.expect(\"WRITE TEST CASES\").to.eql(\"ERRORS >>> \" + jsonData.errors[0].message);",
									"    }",
									"});",
									"",
									"// pm.test(\"Verify that error message is correct\", function () {",
									"//     var error_message = jsonData.errors[0].message;  ",
									"//     pm.expect(error_message).to.include(\"Invalid input\");",
									"// });",
									"",
									"// pm.test(\"Verify that error code is InternalServerError\", function () {",
									"//     var error_code = jsonData.errors[0].extensions.code;  ",
									"//     pm.expect(error_code).to.eql(\"InternalServerError\");",
									"// });",
									"",
									"// pm.test(\"Verify that error status is 500\", function () {",
									"//     var error_status = jsonData.errors[0].extensions.status;  ",
									"//     pm.expect(error_status).to.eql(500);",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5a263500-8915-4582-9f9b-161ca166f691",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query locationList($input: LocationListInput!) {\r\n  locations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"abcd\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Location Parameter Invalid - order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a99993c-6d5c-41d3-a700-072adc7b49ca",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Order\\\" enum\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a26e4ce9-eddf-4015-a49b-08879208cf36",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query locationList($input: LocationListInput!) {\r\n  locations(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      type {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      sensitivity\r\n      isoAlpha3 {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      isoCountry {\r\n        country\r\n        alpha2\r\n        alpha3\r\n        numeric\r\n      }\r\n      fundingAccount {\r\n        value {\r\n          id\r\n          createdAt\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          accountNumber {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"ASCENDING\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Location - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53a8ff54-4a95-443c-a759-b64197b42f0b",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that education is deleted\", function () {",
									"    pm.expect(jsonData.data.deleteLocation).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9cf6fe23-63e3-45fd-9c8f-e4b407ea24f1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteLocation($id: ID!) {\r\n  deleteLocation(id:$id)\r\n}",
								"variables": "{\r\n    \"id\": \"{{locationid}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Location Mandatory Field Blank - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7cede91-62c2-4fcd-8474-72fb2746d416",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is 400\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that location error message is correct\", function () {",
									"    var error_location_message = jsonData.errors[0].extensions.errors.id.IsId;",
									"    pm.expect(error_location_message).to.eql(\"Invalid ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "469eac7f-8cfd-453c-8cc0-7ebdd4dda0bc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteLocation($id: ID!) {\r\n  deleteLocation(id:$id)\r\n}",
								"variables": "{\r\n    \"id\": \"\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Location Mandatory Field Removed  - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db6e5db0-f6e1-4792-ba4f-decd0d49d097",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_message = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_message).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "06f1ab7c-1524-4d8e-8d27-1e15b99ccc9e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteLocation($id: ID!) {\r\n  deleteLocation(id:$id)\r\n}",
								"variables": "{\r\n    \r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Location Parameter  Mismatch - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e68981f4-236e-4476-9e72-b6482ba13a07",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_message = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_message).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f623e093-bbe4-4303-9e4f-10ee66a868df",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteLocation($id: ID!) {\r\n  deleteLocation(id:$id)\r\n}",
								"variables": "{\r\n    \"id1\": \"{{locationid}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Location Parameter - Invalid - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54dba668-96f4-4f41-9353-9d5d9b11bdc7",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is 400\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that location error message is correct\", function () {",
									"    var error_location_message = jsonData.errors[0].extensions.errors.id.IsId;",
									"    pm.expect(error_location_message).to.eql(\"Invalid ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3a1a0aeb-7fbc-4a64-8c84-f064fd61e06d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteLocation($id: ID!) {\r\n  deleteLocation(id:$id)\r\n}",
								"variables": "{\r\n    \"id\": \"!@#$%^&*\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Location  Parameter  Invalid - Deleted Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71c5fb69-92e4-4a84-9b6e-607a252971fb",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.eql(\"Could not find organization\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_status).to.eql(400);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6919077d-b211-4951-b1db-e08df8081894",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteLocation($id: ID!) {\r\n  deleteLocation(id:$id)\r\n}",
								"variables": "{\r\n    \"id\": \"{{locationid}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"protocolProfileBehavior": {}
}
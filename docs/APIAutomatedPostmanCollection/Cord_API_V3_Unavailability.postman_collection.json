{
	"info": {
		"_postman_id": "34265d4a-ffed-4aa3-8278-4325334df4b1",
		"name": "Cord_API_V3_Unavailability",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Pre-req ( Session + Register + Login ) for Unavailability",
			"item": [
				{
					"name": "Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "309304e0-fb0e-45bc-865e-22eae5cffcd2",
								"exec": [
									"var response = pm.response.json();\r",
									"pm.globals.set(\"token\", response.data.session.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Write your query or mutation here\r\nquery {\r\n  session(browser: false) {\r\n    user {\r\n      id,\r\n      email\r\n      {\r\n        value\r\n      }\r\n      realFirstName\r\n      {\r\n        value\r\n      }\r\n      createdAt\r\n      displayLastName\r\n      {\r\n         value\r\n      }\r\n      \r\n      \r\n      \r\n    },\r\n    token\r\n  }\r\n}",
								"variables": ""
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ebc3119-4183-4f03-99b4-af66dd4e43c3",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// This is safe check to prevent failing futher cases If the Root User is already Created\r",
									"if (jsonData.errors) {\r",
									"    if (jsonData.errors.length) return;\r",
									"}\r",
									"\r",
									"//Saving data for future use\r",
									"var id = jsonData.data.register.user.id;\r",
									"pm.globals.set(\"userid\", id);\r",
									"\r",
									"var user = JSON.stringify(jsonData.data.register.user);\r",
									"pm.globals.set(\"user_data\", user);\r",
									"\r",
									"var email = jsonData.data.register.user.email.value;\r",
									"pm.globals.set(\"email\", email);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "626b5562-03d3-4d48-9696-a75b0b87b1f8",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"realFirstName\", \"FirstName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"realLastName\", \"LastName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"email\", \"email\" + moment().format(\"DDMYYYYhhmmss\") + \"@test.com\");\r",
									"pm.globals.set(\"password\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"displayFirstName\", \"DisplayFirstName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"displayLastName\", \"DisplayLastName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"phone\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));\r",
									"\r",
									"var timezoneObject = {\r",
									"    \"name\": \"Europe/Andorra\",\r",
									"    \"lat\": 42.5,\r",
									"    \"long\": 1.5167,\r",
									"    \"countries\": [\r",
									"        {\r",
									"            \"code\": \"AD\",\r",
									"            \"name\": \"Andorra\",\r",
									"            \"zones\": [\r",
									"                {\r",
									"                    \"name\": \"Europe/Andorra\",\r",
									"                    \"lat\": 42.5,\r",
									"                    \"long\": 1.5167,\r",
									"                    \"countries\": [\r",
									"                        {\r",
									"                            \"code\": \"AD\",\r",
									"                            \"name\": \"Andorra\"\r",
									"                        }\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"};\r",
									"pm.globals.set('timezoneObject', JSON.stringify(timezoneObject));\r",
									"pm.globals.set(\"timezone\", timezoneObject.name);\r",
									"\r",
									"pm.globals.set(\"about\", \"I'm Tester\");\r",
									"\r",
									"pm.globals.set(\"userTitle\", \"Tester\");\r",
									"\r",
									"\r",
									"// Taking random value for the User status from pre-defined possible values\r",
									"var userStatusArray = ['Active','Disabled'];\r",
									"var randomNumber = Math.floor(Math.random()*userStatusArray.length);\r",
									"// pm.globals.set('userStatus', userStatusArray[randomNumber]);\r",
									"pm.globals.set(\"userStatus\", \"Active\");\r",
									"\r",
									"pm.globals.set(\"userRoles\", \"ProjectManager\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation register($input: RegisterInput!) {\r\n  register(input: $input) {\r\n    user {\r\n      id\r\n      fullName\r\n      firstName\r\n      avatarLetters\r\n      createdAt\r\n      email {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      phone {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      about {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      status {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      roles {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      title {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      timezone {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          name\r\n          lat\r\n          long\r\n          countries {\r\n            code\r\n            name\r\n            zones {\r\n              name\r\n              lat\r\n              long\r\n              countries {\r\n                code\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      unavailabilities {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          description {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          start\r\n          end\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      organizations {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          name {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          avatarLetters\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      education {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          degree {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          major {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          institution {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"realFirstName\": \"Piyush\",\r\n    \"realLastName\": \"Patel\",\r\n    \"email\" : \"{{login_email}}\",\r\n    \"password\": \"{{login_password}}\",\r\n    \"displayFirstName\": \"{{displayFirstName}}\",\r\n    \"displayLastName\": \"{{displayLastName}}\",\r\n    \"phone\": \"{{phone}}\",\r\n    \"timezone\": \"{{timezone}}\",\r\n    \"about\": \"{{about}}\",\r\n    \"status\": \"{{userStatus}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bdac89e8-0162-4a86-b375-67df37fbfc6c",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var id = jsonData.data.login.user.id;",
									"pm.globals.set(\"userid\", id);",
									"",
									"var email = jsonData.data.login.user.email.value;",
									"pm.globals.set(\"email\", email);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "726e8537-a04f-4d7a-b9dd-98dae644add5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation login($input: LoginInput!) {\r\n  login(input: $input) {\r\n    user {\r\n      id\r\n      fullName\r\n      firstName\r\n      avatarLetters\r\n      createdAt\r\n      email {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      phone {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      about {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      status {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      roles {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      title {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      timezone {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          name\r\n          lat\r\n          long\r\n          countries {\r\n            code\r\n            name\r\n            zones {\r\n              name\r\n              lat\r\n              long\r\n              countries {\r\n                code\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      unavailabilities {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          description {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          start\r\n          end\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      organizations {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          name {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          avatarLetters\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      education {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          degree {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          major {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          institution {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n   \"input\": {\r\n      \"email\": \"{{login_email}}\",\r\n      \"password\": \"{{login_password}}\"\r\n   }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "056a82dc-78b2-4417-bb4b-4a938d4a4881",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cd65acd9-60f2-4ae5-bd04-95fa7dedd502",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Unavailability",
			"item": [
				{
					"name": "Create Unavailability Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d8251c2-1d63-4191-81ad-ef7d4679d2b2",
								"exec": [
									"const moment = require('moment');\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that unavailability ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.createUnavailability.unavailability.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"\r",
									"    // Saving data for future use\r",
									"    pm.globals.set(\"unavailabilityId\", id);\r",
									"});\r",
									"\r",
									"// Saving whole Unavailability Object to globals for future use\r",
									"var unavailability = JSON.stringify(jsonData.data.createUnavailability.unavailability);\r",
									"pm.globals.set(\"unavailability_data\", unavailability);\r",
									"\r",
									"pm.test(\"Verify that unavailability createdAt is in Specific time format\", function () {\r",
									"    var time = jsonData.data.createUnavailability.unavailability.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that unavailability description is same as requested\", function () {\r",
									"    var description = jsonData.data.createUnavailability.unavailability.description.value;\r",
									"    pm.expect(description).to.eql(pm.globals.get('description'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that unavailability start is same as requested\", function () {\r",
									"    var start = jsonData.data.createUnavailability.unavailability.start.value;\r",
									"    pm.expect(start).to.eql(pm.globals.get('unavailabilityStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that unavailability end is same as requested\", function () {\r",
									"    var end = jsonData.data.createUnavailability.unavailability.end.value;\r",
									"    pm.expect(end).to.eql(pm.globals.get('unavailabilityEnd'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "32e6e504-3a71-4d86-b344-2594a221853d",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"description\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Libero volutpat sed cras ornare arcu dui vivamus arcu. Dui nunc mattis enim ut tellus elementum sagittis vitae. Pharetra sit amet aliquam id diam maecenas ultricies mi. Quis vel eros donec ac odio tempor orci. Faucibus purus in massa tempor nec. Imperdietbbbb proin fermentum leo vel orci porta non pulvinar. Nulla facilisi nullam vehicula ipsum a arcu cursus.\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"unavailabilityStart\", moment().format(\"YYYY-MM-DDTHH:mm:ss.SSSZ\"));\r",
									"\r",
									"pm.globals.set(\"unavailabilityEnd\", moment().format(\"YYYY-MM-DDTHH:mm:ss.SSSZ\"))\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createUnavailability($input: CreateUnavailabilityInput!) {\r\n  createUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      createdAt\r\n      canDelete\r\n      start\r\n      end\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"userId\": \"{{userid}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Unavailability Mandatory  Field Blank -  userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "539f60df-6cd7-4920-8189-25556e0ce205",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that userId error message is correct\", function () {\r",
									"    var error_organizationId = jsonData.errors[0].extensions.errors['unavailability.userId'].IsId;\r",
									"    pm.expect(error_organizationId).to.eql(\"Invalid ID\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7fd15363-dfb5-4927-8551-0ba254d3f0b0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createUnavailability($input: CreateUnavailabilityInput!) {\r\n  createUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"userId\": \"\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Unavailability Mandatory  Field Removed -  userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3837a092-be44-47c0-88d9-31c41156e31c",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"userId\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d5124a93-d12d-421a-a52b-0420e35c0ebd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createUnavailability($input: CreateUnavailabilityInput!) {\r\n  createUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Unavailability Mandatory  Field  Blank  -  Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a49200f-7849-4036-ae0d-eede33f44b93",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that unavailability ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.createUnavailability.unavailability.id;\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that unavailability description is null\", function () {\r",
									"    var description = jsonData.data.createUnavailability.unavailability.description.value;\r",
									"    pm.expect(description).to.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "31183e90-bec5-4cfc-bced-97070b7d6bdc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createUnavailability($input: CreateUnavailabilityInput!) {\r\n  createUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"userId\": \"{{userid}}\",\r\n            \"description\": \"\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Unavailability Mandatory  Field Removed -  Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89354de0-51ee-4769-9c84-4f59bdc0f85e",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"description\\\" of required type \\\"String!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fb823f9d-44c1-4c98-aee9-2630a5ca1f60",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createUnavailability($input: CreateUnavailabilityInput!) {\r\n  createUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"userId\": \"{{userid}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Unavailability Mandatory  Field  Blank  - unavailabilityStart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "240a956b-6174-456f-b473-3289aff5900c",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that unavailabilityStart_error message is correct\", function () {\r",
									"    var unavailabilityStart_error = jsonData.errors[0].extensions.errors['unavailability.start'].isIso8601;\r",
									"    pm.expect(unavailabilityStart_error).to.eql(\"Invalid ISO-8601 date string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9eab61ee-dbda-47c6-81ab-dadc3a5bfb0f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createUnavailability($input: CreateUnavailabilityInput!) {\r\n  createUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"userId\": \"{{userid}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Unavailability Mandatory  Field  Removed  - unavailabilityStart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3579b039-dd02-4754-a1a5-db95832ec54e",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"start\\\" of required type \\\"DateTime!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cbf97cd1-55c0-4f27-8d2b-33d08c279a4a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createUnavailability($input: CreateUnavailabilityInput!) {\r\n  createUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"userId\": \"{{userid}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Unavailability Mandatory  Field  Blank  - unavailabilityEnd",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a290f772-3b60-4c03-985a-58283302526b",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that unavailabilityEnd_error message is correct\", function () {\r",
									"    var unavailabilityStart_error = jsonData.errors[0].extensions.errors['unavailability.end'].isIso8601;\r",
									"    pm.expect(unavailabilityStart_error).to.eql(\"Invalid ISO-8601 date string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "73ec89c8-d59a-45d7-9e42-3fbceb4573d2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createUnavailability($input: CreateUnavailabilityInput!) {\r\n  createUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"userId\": \"{{userid}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Unavailability Mandatory  Field  Removed - unavailabilityEnd",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87c3f04d-f71c-446b-8c3c-ef4f3e608c94",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"end\\\" of required type \\\"DateTime!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b948131f-e1dd-4e94-b35a-d3d38eacbb69",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createUnavailability($input: CreateUnavailabilityInput!) {\r\n  createUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"userId\": \"{{userid}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Unavailability Parameter  Mismatch  - userID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ebbc8bca-32cc-4753-9031-b67db9d778bf",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"userId\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a930c88a-1c02-4ce5-9e2e-2f03ca857c16",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createUnavailability($input: CreateUnavailabilityInput!) {\r\n  createUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"userId1\": \"{{userid}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Unavailability Parameter  Mismatch - Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba49599a-a658-42b2-a8f9-67bc6644cca2",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"description\\\" of required type \\\"String!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "813771f2-88ce-45d2-81aa-3b6f75765b5a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createUnavailability($input: CreateUnavailabilityInput!) {\r\n  createUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"userId\": \"{{userid}}\",\r\n            \"description1\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Unavailability Parameter  Mismatch  - unavailabilityStart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "338d28d3-e6b9-43d7-a85f-b899075f3499",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"start\\\" of required type \\\"DateTime!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "94c3d1a8-fe11-46cc-adfb-b1766780bd29",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createUnavailability($input: CreateUnavailabilityInput!) {\r\n  createUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"userId\": \"{{userid}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"start1\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Unavailability Parameter  Mismatch - unavailabilityEnd",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1026978c-eb59-4dc8-b5c3-a840c3d698ec",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"end\\\" of required type \\\"DateTime!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6f5d328f-0c4b-4ee7-afd8-f29fa9b6d28c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createUnavailability($input: CreateUnavailabilityInput!) {\r\n  createUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"userId\": \"{{userid}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end1\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Unavailability Parameter  Invalid - userID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff275d8c-7e8e-4c4c-a68a-cc10c056cdc5",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that userId error message is correct\", function () {\r",
									"    var error_organizationId = jsonData.errors[0].extensions.errors['unavailability.userId'].IsId;  \r",
									"    pm.expect(error_organizationId).to.eql(\"Invalid ID\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9699a814-b6fc-4503-a404-1a399dc120fc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createUnavailability($input: CreateUnavailabilityInput!) {\r\n  createUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"userId\": \"!@#$%^\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Unavailability Parameter  Invalid - Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fbc28739-a598-40f9-98b2-e3ef932b07f4",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"String cannot represent a non string value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2ae75488-187c-41b0-8dc7-181a9fb35fa5",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"\r",
									"pm.globals.set(\"description\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Libero volutpat sed cras ornare arcu dui vivamus arcu. Dui nunc mattis enim ut tellus elementum sagittis vitae. Pharetra sit amet aliquam id diam maecenas ultricies mi. Quis vel eros donec ac odio tempor orci. Faucibus purus in massa tempor nec. Imperdiet proin fermentum leo vel orci porta non pulvinar. Nulla facilisi nullam vehicula ipsum a arcu cursus.  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Elit at imperdiet dui accumsan sit amet nulla facilisi. Malesuada pellentesque elit eget gravida cum sociis natoque. Diam sollicitudin tempor id eu. Lectus arcu bibendum at varius vel. Pharetra sit amet aliquam id diam. Sit amet venenatis urna cursus eget nunc scelerisque viverra mauris. Scelerisque purus semper eget duis at tellus at urna. Ullamcorper eget nulla facilisi etiam. Nascetur ridiculus mus mauris vitae ultricies. Eu feugiat pretium nibh ipsum consequat nisl vel pretium lectus. Tempor id eu nisl nunc. Velit aliquet sagittis id consectetur purus ut faucibus pulvinar. Convallis convallis tellus id interdum velit laoreet. Vitae auctor eu augue ut lectus arcu. Sapien et ligula ullamcorper malesuada proin libero nunc consequat. Suspendisse ultrices gravida dictum fusce ut placerat orci nulla. Pulvinar neque laoreet suspendisse interdum consectetur libero. Sed vulputate odio ut enim blandit.Euismod quis viverra nibh cras pulvinar mattis nunc sed blandit. Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Duis at consectetur lorem donec massa sapien. In tellus integer feugiat scelerisque varius. Turpis egestas sed tempus urna et pharetra pharetra massa massa. Nibh sed pulvinar proin gravida hendrerit lectus a. Enim nunc faucibus a pellentesque sit amet porttitor eget dolor. Imperdiet sed euismod nisi porta lorem. Odio tempor orci dapibus ultrices in iaculis nunc sed. Proin nibh nisl condimentum id venenatis.Tellus cras adipiscing enim eu turpis egestas pretium. Sit amet facilisis magna etiam tempor orci eu. Scelerisque purus semper eget duis at tellus at urna condimentum. Dictum fusce ut placerat orci nulla pellentesque dignissim enim sit. Sit amet luctus venenatis lectus magna fringilla urna porttitor rhoncus. Nisl suscipit adipiscing bibendum est ultricies integer. At urna condimentum mattis pellentesque id nibh tortor id aliquet. Augue eget arcu dictum varius duis at consectetur. Morbi tincidunt augue interdum velit euismod in. Urna nunc id cursus metus aliquam eleifend mi in nulla. Aenean vel elit scelerisque mauris pellentesque pulvinar. Tincidunt arcu non sodales neque sodales ut etiam sit. Mauris in aliquam sem fringilla. Ornare quam viverra orci sagittis eu.Amet volutpat consequat mauris nunc. Rhoncus est pellentesque elit ullamcorper. Risus nec feugiat in fermentum posuere urna nec. Pellentesque massa placerat duis ultricies. Morbi leo urna molestie at. Sed cras ornare arcu dui vivamus arcu felis. Adipiscing bibendum est ultricies integer quis auctor elit sed vulputate. Laoreet suspendisse interdum consectetur libero id faucibus nisl. Risus sed vulputate odio ut. Nunc mattis enim ut tellus. Turpis egestas integer eget aliquet. Non arcu risus quis varius quam. Elementum facilisis leo vel fringilla est.Nunc congue nisi vitae suscipit tellus mauris a diam. In egestas erat imperdiet sed euismod nisi porta lorem mollis. Senectus et netus et malesuada. Tincidunt lobortis feugiat vivamus at. Adipiscing vitae proin sagittis nisl rhoncus mattis. Aenean sed adipiscing diam donec adipiscing. Molestie a iaculis at erat pellentesque adipiscing. Neque egestas congue quisque egestas diam in arcu cursus euismod. Mattis rhoncus urna neque viverra justo. Nibh praesent tristique magna sit amet. Ultrices tincidunt arcu non sodales neque sodales ut etiam. In est ante in nibh mauris cursus. Tellus mauris a diam maecenas. Nibh venenatis cras sed felis eget velit aliquet sagittis id.Consequat ac felis donec et odio pellentesque. Suspendisse potenti nullam ac tortor vitae purus faucibus. Quam vulputate dignissim suspendisse in est ante. At lectus urna duis convallis convallis tellus id. Tellus id interdum velit laoreet id donec ultrices. Amet cursus sit amet dictum sit amet justo donec. Eget mi proin sed libero enim. Sit amet facilisis magna etiam tempor orci eu lobortis elementum. Platea dictumst quisque sagittis purus sit amet volutpat. Mattis pellentesque id nibh tortor id aliquet lectus proin nibh. Luctus venenatis lectus magna fringilla urna. Ut sem viverra aliquet eget sit amet tellus cras adipiscing. Velit scelerisque in dictum non consectetur a erat. Erat imperdiet sed euismod nisi porta lorem mollis. Nullam non nisi est sit amet facilisis magna etiam.Elementum eu facilisis sed odio. Sit amet volutpat consequat mauris nunc congue nisi vitae. Interdum velit euismod in pellentesque massa placerat duis. Tincidunt praesent semper feugiat nibh sed. At erat pellentesque adipiscing commodo elit at imperdiet dui. Senectus et netus et malesuada fames ac turpis egestas integer. Ipsum faucibus vitae aliquet nec ullamcorper. Ac turpis egestas integer eget. Ut tortor pretium viverra suspendisse potenti nullam ac tortor vitae. Nisl rhoncus mattis rhoncus urna neque viverra justo.Sit amet venenatis urna cursus eget nunc. Placerat orci nulla pellentesque dignissim enim sit amet. Nec sagittis aliquam malesuada bibendum arcu vitae. Tellus orci ac auctor augue mauris augue neque gravida in. Egestas integer eget aliquet nibh praesent. Posuere ac ut consequat semper viverra. Facilisis magna etiam tempor orci eu lobortis elementum nibh. In massa tempor nec feugiat nisl. Urna nec tincidunt praesent semper feugiat nibh sed pulvinar proin. Egestas sed tempus urna et. Sit amet risus nullam eget felis. Porta lorem mollis aliquam ut porttitor leo a. Viverra mauris in aliquam sem fringilla ut morbi tincidunt augue.Blandit turpis cursus in hac habitasse platea dictumst. Ut eu sem integer vitae justo eget. Tempus urna et pharetra pharetra massa. Risus feugiat in ante metus dictum at tempor commodo. Quis auctor elit sed vulputate mi sit amet mauris commodo. Massa eget egestas purus viverra accumsan. Urna duis convallis convallis tellus id interdum velit laoreet. Elementum facilisis leo vel fringilla. Euismod lacinia at quis risus sed vulputate odio ut. Eu tincidunt tortor aliquam nulla facilisi cras fermentum odio eu. Non quam lacus suspendisse faucibus. Eget mi proin sed libero enim sed. Orci dapibus ultrices in iaculis nunc sed augue. Pellentesque elit eget gravida cum sociis natoque. Lobortis elementum nibh tellus molestie nunc non blandit.Pellentesque pulvinar pellentesque habitant morbi tristique senectus et. Dis parturient montes nascetur ridiculus mus mauris. Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam. In cursus turpis massa tincidunt dui ut ornare. Lorem sed risus ultricies tristique nulla. Vestibulum morbi blandit cursus risus at ultrices mi tempus. Fringilla urna porttitor rhoncus dolor purus non enim praesent. Amet nulla facilisi morbi tempus iaculis urna id volutpat. In arcu cursus euismod quis viverra nibh cras pulvinar. Suspendisse ultrices gravida dictum fusce ut placerat orci nulla pellentesque. Quam adipiscing vitae proin sagittis nisl rhoncus mattis rhoncus urna. Suscipit adipiscing bibendum est ultricies integer. Eros donec ac odio tempor orci. Montes nascetur ridiculus mus mauris vitae. Elit pellentesque habitant morbi tristique senectus et. Urna nec tincidunt praesent semper feugiat nibh sed.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Elit at imperdiet dui accumsan sit amet nulla facilisi. Malesuada pellentesque elit eget gravida cum sociis natoque. Diam sollicitudin tempor id eu. Lectus arcu bibendum at varius vel. Pharetra sit amet aliquam id diam. Sit amet venenatis urna cursus eget nunc scelerisque viverra mauris. Scelerisque purus semper eget duis at tellus at urna. Ullamcorper eget nulla facilisi etiam. Nascetur ridiculus mus mauris vitae ultricies. Eu feugiat pretium nibh ipsum consequat nisl vel pretium lectus. Tempor id eu nisl nunc. Velit aliquet sagittis id consectetur purus ut faucibus pulvinar. Convallis convallis tellus id interdum velit laoreet. Vitae auctor eu augue ut lectus arcu. Sapien et ligula ullamcorper malesuada proin libero nunc consequat. Suspendisse ultrices gravida dictum fusce ut placerat orci nulla. Pulvinar neque laoreet suspendisse interdum consectetur libero. Sed vulputate odio ut enim blandit.Euismod quis viverra nibh cras pulvinar mattis nunc sed blandit. Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Duis at consectetur lorem donec massa sapien. In tellus integer feugiat scelerisque varius. Turpis egestas sed tempus urna et pharetra pharetra massa massa. Nibh sed pulvinar proin gravida hendrerit lectus a. Enim nunc faucibus a pellentesque sit amet porttitor eget dolor. Imperdiet sed euismod nisi porta lorem. Odio tempor orci dapibus ultrices in iaculis nunc sed. Proin nibh nisl condimentum id venenatis.Tellus cras adipiscing enim eu turpis egestas pretium. Sit amet facilisis magna etiam tempor orci eu. Scelerisque purus semper eget duis at tellus at urna condimentum. Dictum fusce ut placerat orci nulla pellentesque dignissim enim sit. Sit amet luctus venenatis lectus magna fringilla urna porttitor rhoncus. Nisl suscipit adipiscing bibendum est ultricies integer. At urna condimentum mattis pellentesque id nibh tortor id aliquet. Augue eget arcu dictum varius duis at consectetur. Morbi tincidunt augue interdum velit euismod in. Urna nunc id cursus metus aliquam eleifend mi in nulla. Aenean vel elit scelerisque mauris pellentesque pulvinar. Tincidunt arcu non sodales neque sodales ut etiam sit. Mauris in aliquam sem fringilla. Ornare quam viverra orci sagittis eu.Amet volutpat consequat mauris nunc. Rhoncus est pellentesque elit ullamcorper. Risus nec feugiat in fermentum posuere urna nec. Pellentesque massa placerat duis ultricies. Morbi leo urna molestie at. Sed cras ornare arcu dui vivamus arcu felis. Adipiscing bibendum est ultricies integer quis auctor elit sed vulputate. Laoreet suspendisse interdum consectetur libero id faucibus nisl. Risus sed vulputate odio ut. Nunc mattis enim ut tellus. Turpis egestas integer eget aliquet. Non arcu risus quis varius quam. Elementum facilisis leo vel fringilla est.Nunc congue nisi vitae suscipit tellus mauris a diam. In egestas erat imperdiet sed euismod nisi porta lorem mollis. Senectus et netus et malesuada. Tincidunt lobortis feugiat vivamus at. Adipiscing vitae proin sagittis nisl rhoncus mattis. Aenean sed adipiscing diam donec adipiscing. Molestie a iaculis at erat pellentesque adipiscing. Neque egestas congue quisque egestas diam in arcu cursus euismod. Mattis rhoncus urna neque viverra justo. Nibh praesent tristique magna sit amet. Ultrices tincidunt arcu non sodales neque sodales ut etiam. In est ante in nibh mauris cursus. Tellus mauris a diam maecenas. Nibh venenatis cras sed felis eget velit aliquet sagittis id.Consequat ac felis donec et odio pellentesque. Suspendisse potenti nullam ac tortor vitae purus faucibus. Quam vulputate dignissim suspendisse in est ante. At lectus urna duis convallis convallis tellus id. Tellus id interdum velit laoreet id donec ultrices. Amet cursus sit amet dictum sit amet justo donec. Eget mi proin sed libero enim. Sit amet facilisis magna etiam tempor orci eu lobortis elementum. Platea dictumst quisque sagittis purus sit amet volutpat. Mattis pellentesque id nibh tortor id aliquet lectus proin nibh. Luctus venenatis lectus magna fringilla urna. Ut sem viverra aliquet eget sit amet tellus cras adipiscing. Velit scelerisque in dictum non consectetur a erat. Erat imperdiet sed euismod nisi porta lorem mollis. Nullam non nisi est sit amet facilisis magna etiam.Elementum eu facilisis sed odio. Sit amet volutpat consequat mauris nunc congue nisi vitae. Interdum velit euismod in pellentesque massa placerat duis. Tincidunt praesent semper feugiat nibh sed. At erat pellentesque adipiscing commodo elit at imperdiet dui. Senectus et netus et malesuada fames ac turpis egestas integer. Ipsum faucibus vitae aliquet nec ullamcorper. Ac turpis egestas integer eget. Ut tortor pretium viverra suspendisse potenti nullam ac tortor vitae. Nisl rhoncus mattis rhoncus urna neque viverra justo.Sit amet venenatis urna cursus eget nunc. Placerat orci nulla pellentesque dignissim enim sit amet. Nec sagittis aliquam malesuada bibendum arcu vitae. Tellus orci ac auctor augue mauris augue neque gravida in. Egestas integer eget aliquet nibh praesent. Posuere ac ut consequat semper viverra. Facilisis magna etiam tempor orci eu lobortis elementum nibh. In massa tempor nec feugiat nisl. Urna nec tincidunt praesent semper feugiat nibh sed pulvinar proin. Egestas sed tempus urna et. Sit amet risus nullam eget felis. Porta lorem mollis aliquam ut porttitor leo a. Viverra mauris in aliquam sem fringilla ut morbi tincidunt augue.Blandit turpis cursus in hac habitasse platea dictumst. Ut eu sem integer vitae justo eget. Tempus urna et pharetra pharetra massa. Risus feugiat in ante metus dictum at tempor commodo. Quis auctor elit sed vulputate mi sit amet mauris commodo. Massa eget egestas purus viverra accumsan. Urna duis convallis convallis tellus id interdum velit laoreet. Elementum facilisis leo vel fringilla. Euismod lacinia at quis risus sed vulputate odio ut. Eu tincidunt tortor aliquam nulla facilisi cras fermentum odio eu. Non quam lacus suspendisse faucibus. Eget mi proin sed libero enim sed. Orci dapibus ultrices in iaculis nunc sed augue. Pellentesque elit eget gravida cum sociis natoque. Lobortis elementum nibh tellus molestie nunc non blandit.ellentesque pulvinar pellentesque habitant morbi tristique senectus et. Dis parturient montes nascetur ridiculus mus mauris. Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam. In cursus turpis massa tincidunt dui ut ornare. Lorem sed risus ultricies tristique nulla. Vestibulum morbi blandit cursus risus at ultrices mi tempus. Fringilla urna porttitor rhoncus dolor purus non enim praesent. Amet nulla facilisi morbi tempus iaculis urna id volutpat. In arcu cursus euismod quis viverra nibh cras pulvinar. Suspendisse ultrices gravida dictum fusce ut placerat orci nulla pellentesque. Quam adipiscing vitae proin sagittis nisl rhoncus mattis rhoncus urna. Suscipit adipiscing bibendum est ultricies integer. Eros donec ac odio tempor orci. Montes nascetur ridiculus mus mauris vitae. Elit pellentesque habitant morbi tristique senectus et. Urna nec tincidunt praesent semper feugiat nibh sed.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Elit at imperdiet dui accumsan sit amet nulla facilisi. Malesuada pellentesque elit eget gravida cum sociis natoque. Diam sollicitudin tempor id eu. Lectus arcu bibendum at varius vel. Pharetra sit amet aliquam id diam. Sit amet venenatis urna cursus eget nunc scelerisque viverra mauris. Scelerisque purus semper eget duis at tellus at urna. Ullamcorper eget nulla facilisi etiam. Nascetur ridiculus mus mauris vitae ultricies. Eu feugiat pretium nibh ipsum consequat nisl vel pretium lectus. Tempor id eu nisl nunc. Velit aliquet sagittis id consectetur purus ut faucibus pulvinar. Convallis convallis tellus id interdum velit laoreet. Vitae auctor eu augue ut lectus arcu. Sapien et ligula ullamcorper malesuada proin libero nunc consequat. Suspendisse ultrices gravida dictum fusce ut placerat orci nulla. Pulvinar neque laoreet suspendisse interdum consectetur libero. Sed vulputate odio ut enim blandit.Euismod quis viverra nibh cras pulvinar mattis nunc sed blandit. Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Duis at consectetur lorem donec massa sapien. In tellus integer feugiat scelerisque varius. Turpis egestas sed tempus urna et pharetra pharetra massa massa. Nibh sed pulvinar proin gravida hendrerit lectus a. Enim nunc faucibus a pellentesque sit amet porttitor eget dolor. Imperdiet sed euismod nisi porta lorem. Odio tempor orci dapibus ultrices in iaculis nunc sed. Proin nibh nisl condimentum id venenatis.Tellus cras adipiscing enim eu turpis egestas pretium. Sit amet facilisis magna etiam tempor orci eu. Scelerisque purus semper eget duis at tellus at urna condimentum. Dictum fusce ut placerat orci nulla pellentesque dignissim enim sit. Sit amet luctus venenatis lectus magna fringilla urna porttitor rhoncus. Nisl suscipit adipiscing bibendum est ultricies integer. At urna condimentum mattis pellentesque id nibh tortor id aliquet. Augue eget arcu dictum varius duis at consectetur. Morbi tincidunt augue interdum velit euismod in. Urna nunc id cursus metus aliquam eleifend mi in nulla. Aenean vel elit scelerisque mauris pellentesque pulvinar. Tincidunt arcu non sodales neque sodales ut etiam sit. Mauris in aliquam sem fringilla. Ornare quam viverra orci sagittis eu.Amet volutpat consequat mauris nunc. Rhoncus est pellentesque elit ullamcorper. Risus nec feugiat in fermentum posuere urna nec. Pellentesque massa placerat duis ultricies. Morbi leo urna molestie at. Sed cras ornare arcu dui vivamus arcu felis. Adipiscing bibendum est ultricies integer quis auctor elit sed vulputate. Laoreet suspendisse interdum consectetur libero id faucibus nisl. Risus sed vulputate odio ut. Nunc mattis enim ut tellus. Turpis egestas integer eget aliquet. Non arcu risus quis varius quam. Elementum facilisis leo vel fringilla est.Nunc congue nisi vitae suscipit tellus mauris a diam. In egestas erat imperdiet sed euismod nisi porta lorem mollis. Senectus et netus et malesuada. Tincidunt lobortis feugiat vivamus at. Adipiscing vitae proin sagittis nisl rhoncus mattis. Aenean sed adipiscing diam donec adipiscing. Molestie a iaculis at erat pellentesque adipiscing. Neque egestas congue quisque egestas diam in arcu cursus euismod. Mattis rhoncus urna neque viverra justo. Nibh praesent tristique magna sit amet. Ultrices tincidunt arcu non sodales neque sodales ut etiam. In est ante in nibh mauris cursus. Tellus mauris a diam maecenas. Nibh venenatis cras sed felis eget velit aliquet sagittis id.Consequat ac felis donec et odio pellentesque. Suspendisse potenti nullam ac tortor vitae purus faucibus. Quam vulputate dignissim suspendisse in est ante. At lectus urna duis convallis convallis tellus id. Tellus id interdum velit laoreet id donec ultrices. Amet cursus sit amet dictum sit amet justo donec. Eget mi proin sed libero enim. Sit amet facilisis magna etiam tempor orci eu lobortis elementum. Platea dictumst quisque sagittis purus sit amet volutpat. Mattis pellentesque id nibh tortor id aliquet lectus proin nibh. Luctus venenatis lectus magna fringilla urna. Ut sem viverra aliquet eget sit amet tellus cras adipiscing. Velit scelerisque in dictum non consectetur a erat. Erat imperdiet sed euismod nisi porta lorem mollis. Nullam non nisi est sit amet facilisis magna etiam.Elementum eu facilisis sed odio. Sit amet volutpat consequat mauris nunc congue nisi vitae. Interdum velit euismod in pellentesque massa placerat duis. Tincidunt praesent semper feugiat nibh sed. At erat pellentesque adipiscing commodo elit at imperdiet dui. Senectus et netus et malesuada fames ac turpis egestas integer. Ipsum faucibus vitae aliquet nec ullamcorper. Ac turpis egestas integer eget. Ut tortor pretium viverra suspendisse potenti nullam ac tortor vitae. Nisl rhoncus mattis rhoncus urna neque viverra justo.Sit amet venenatis urna cursus eget nunc. Placerat orci nulla pellentesque dignissim enim sit amet. Nec sagittis aliquam malesuada bibendum arcu vitae. Tellus orci ac auctor augue mauris augue neque gravida in. Egestas integer eget aliquet nibh praesent. Posuere ac ut consequat semper viverra. Facilisis magna etiam tempor orci eu lobortis elementum nibh. In massa tempor nec feugiat nisl. Urna nec tincidunt praesent semper feugiat nibh sed pulvinar proin. Egestas sed tempus urna et. Sit amet risus nullam eget felis. Porta lorem mollis aliquam ut porttitor leo a. Viverra mauris in aliquam sem fringilla ut morbi tincidunt augue.Blandit turpis cursus in hac habitasse platea dictumst. Ut eu sem integer vitae justo eget. Tempus urna et pharetra pharetra massa. Risus feugiat in ante metus dictum at tempor commodo. Quis auctor elit sed vulputate mi sit amet mauris commodo. Massa eget egestas purus viverra accumsan. Urna duis convallis convallis tellus id interdum velit laoreet. Elementum facilisis leo vel fringilla. Euismod lacinia at quis risus sed vulputate odio ut. Eu tincidunt tortor aliquam nulla facilisi cras fermentum odio eu. Non quam lacus suspendisse faucibus. Eget mi proin sed libero enim sed. Orci dapibus ultrices in iaculis nunc sed augue. Pellentesque elit eget gravida cum sociis natoque. Lobortis elementum nibh tellus molestie nunc non blandit.llentesque pulvinar pellentesque habitant morbi tristique senectus et. Dis parturient montes nascetur ridiculus mus mauris. Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam. In cursus turpis massa tincidunt dui ut ornare. Lorem sed risus ultricies tristique nulla. Vestibulum morbi blandit cursus risus at ultrices mi tempus. Fringilla urna porttitor rhoncus dolor purus non enim praesent. Amet nulla facilisi morbi tempus iaculis urna id volutpat. In arcu cursus euismod quis viverra nibh cras pulvinar. Suspendisse ultrices gravida dictum fusce ut placerat orci nulla pellentesque. Quam adipiscing vitae proin sagittis nisl rhoncus mattis rhoncus urna. Suscipit adipiscing bibendum est ultricies integer. Eros donec ac odio tempor orci. Montes nascetur ridiculus mus mauris vitae. Elit pellentesque habitant morbi tristique senectus et. Urna nec tincidunt praesent semper feugiat nibh sed.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. In nibh mauris cursus mattis molestie a iaculis at. Viverra accumsan in nisl nisi scelerisque. Pretium lectus quam id leo in vitae turpis massa. Id diam vel quam elementum pulvinar. Quis ipsum suspendisse ultrices gravida. Aliquam etiam erat velit scelerisque. Massa sapien faucibus et molestie ac feugiat sed lectus. Sapien et ligula ullamcorper malesuada proin libero nunc consequat. Blandit aliquam etiam erat velit scelerisque in dictum non consectetur. Convallis tellus id interdum velit laoreet id donec ultrices tincidunt. Nibh ipsum consequat nisl vel pretium lectus. Aliquam sem et tortor consequat id porta nibh venenatis. Sit amet dictum sit amet justo. Porttitor lacus luctus accumsan tortor posuere. Purus in massa tempor nec. Sagittis nisl rhoncus mattis rhoncus urna neque. Diam vel quam elementum pulvinar etiam non quam lacus.Varius morbi enim nunc faucibus. Turpis in eu mi bibendum neque egestas. In vitae turpis massa sed elementum tempus egestas sed. Orci dapibus ultrices in iaculis nunc sed. Fermentum odio eu feugiat pretium nibh. Euismod lacinia at quis risus. In ornare quam viverra orci sagittis eu volutpat. Suscipit tellus mauris a diam maecenas sed enim ut. Pellentesque pulvinar pellentesque habitant morbi tristique. Pellentesque habitant morbi tristique senectus et netus et. Pretium viverra suspendisse potenti nullam ac tortor vitae. Sagittis id consectetur purus ut. Turpis egestas sed tempus urna et pharetra pharetra massa. Porttitor leo a diam sollicitudin. Imperdiet massa tincidunt nunc pulvinar sapien et. Pharetra sit amet aliquam id diam maecenas ultricies mi eget. Id eu nisl nunc mi ipsum faucibus vitae aliquet. At volutpat diam ut venenatis tellus in metus vulputate. Nunc id cursus metus aliquam eleifend mi. Magna eget est lorem ipsum dolor sit amet consectetur.Lacus laoreet non curabitur gravida arcu ac. Lorem sed risus ultricies tristique nulla aliquet enim tortor at. Blandit volutpat maecenas volutpat blandit aliquam etiam. Ut venenatis tellus in metus vulputate eu scelerisque. Dignissim cras tincidunt lobortis feugiat vivamus at augue eget. Mauris pellentesque pulvinar pellentesque habitant. Aliquet porttitor lacus luctus accumsan. Tincidunt eget nullam non nisi est sit amet facilisis magna. Ut tellus elementum sagittis vitae et leo duis. Facilisis leo vel fringilla est ullamcorper eget. Justo donec enim diam vulputate ut pharetra sit amet. Consectetur adipiscing elit pellentesque habitant morbi tristique senectus et netus.Etiam non quam lacus suspendisse faucibus. Cras semper auctor neque vitae tempus quam. Leo a diam sollicitudin tempor id eu nisl. Cursus in hac habitasse platea dictumst quisque. Nulla facilisi etiam dignissim diam quis enim. At in tellus integer feugiat scelerisque varius. Et tortor at risus viverra adipiscing at in. Nec tincidunt praesent semper feugiat nibh. Quam pellentesque nec nam aliquam sem et tortor consequat id. Odio tempor orci dapibus ultrices in iaculis nunc sed augue. Ut morbi tincidunt augue interdum. Nunc pulvinar sapien et ligula ullamcorper. Urna cursus eget nunc scelerisque viverra. Eu consequat ac felis donec et odio pellentesque diam. Euismod nisi porta lorem mollis aliquam ut. Sit amet risus nullam eget felis. Non pulvinar neque laoreet suspendisse interdum consectetur libero id faucibus. Dui sapien eget mi proin sed. Et malesuada fames ac turpis.Blandit massa enim nec dui nunc mattis. Facilisi morbi tempus iaculis urna id. Nulla aliquet porttitor lacus luctus accumsan tortor posuere ac ut. Odio ut sem nulla pharetra diam sit amet. Quis imperdiet massa tincidunt nunc pulvinar sapien. Adipiscing elit pellentesque habitant morbi. Orci porta non pulvinar neque laoreet suspendisse interdum. Sit amet mauris commodo quis imperdiet massa tincidunt nunc. Consectetur libero id faucibus nisl tincidunt eget. Habitasse platea dictumst quisque sagittis.Consequat nisl vel pretium lectus. Leo vel orci porta non pulvinar neque laoreet suspendisse. Pellentesque elit eget gravida cum sociis. Pellentesque pulvinar pellentesque habitant morbi tristique senectus et netus. Euismod in pellentesque massa placerat. Montes nascetur ridiculus mus mauris vitae ultricies leo. Viverra nibh cras pulvinar mattis nunc sed blandit libero. Ornare arcu dui vivamus arcu felis bibendum. Tincidunt vitae semper quis lectus nulla at volutpat diam. Cursus turpis massa tincidunt dui ut. Et molestie ac feugiat sed lectus vestibulum.Dictumst quisque sagittis purus sit amet. Fusce ut placerat orci nulla pellentesque dignissim enim. Odio morbi quis commodo odio aenean sed. Eget arcu dictum varius duis at. Platea dictumst quisque sagittis purus sit amet. Ultrices mi tempus imperdiet nulla malesuada pellentesque elit. Justo donec enim diam vulputate ut pharetra. Ullamcorper velit sed ullamcorper morbi tincidunt ornare massa. Porttitor lacus luctus accumsan tortor posuere ac ut consequat semper. Pellentesque habitant morbi tristique senectus. Facilisi nullam vehicula ipsum a arcu. Sed velit dignissim sodales ut eu sem. Pellentesque id nibh tortor id aliquet lectus. Nunc sed augue lacus viverra. Odio morbi quis commodo odio aenean sed. Non curabitur gravida arcu ac tortor dignissim convallis aenean et.Interdum posuere lorem ipsum dolor sit amet consectetur. Pulvinar etiam non quam lacus suspendisse faucibus interdum posuere. Egestas egestas fringilla phasellus faucibus. Sed blandit libero volutpat sed cras ornare arcu dui vivamus. Vestibulum mattis ullamcorper velit sed ullamcorper morbi. Pulvinar mattis nunc sed blandit. Fames ac turpis egestas maecenas pharetra convallis posuere morbi leo. Purus faucibus ornare suspendisse sed nisi lacus sed. Viverra nibh cras pulvinar mattis nunc sed blandit libero volutpat. Quisque sagittis purus sit amet volutpat consequat mauris nunc. Ut sem nulla pharetra diam sit amet nisl suscipit adipiscing. Aliquet nec ullamcorper sit amet risus nullam eget felis. Eget lorem dolor sed viverra ipsum nunc aliquet bibendum. Platea dictumst quisque sagittis purus sit. Morbi tempus iaculis urna id volutpat lacus laoreet non curabitur. Quisque non tellus orci ac auctor augue mauris augue. Turpis egestas integer eget aliquet nibh praesent tristique magna sit.Integer vitae justo eget magna fermentum. Eleifend quam adipiscing vitae proin sagittis. Diam donec adipiscing tristique risus nec feugiat in fermentum posuere. Id neque aliquam vestibulum morbi blandit cursus. Ut sem viverra aliquet eget sit amet tellus. Est sit amet facilisis magna etiam. Euismod quis viverra nibh cras pulvinar mattis. Tincidunt nunc pulvinar sapien et ligula ullamcorper malesuada. Ipsum suspendisse ultrices gravida dictum. Urna duis convallis convallis tellus id interdum velit. Vitae tempus quam pellentesque nec. Vitae turpis massa sed elementum tempus egestas sed. Integer feugiat scelerisque varius morbi.Sed turpis tincidunt id aliquet. Sit amet porttitor eget dolor morbi non arcu. Est placerat in egestas erat. Ac tincidunt vitae semper quis lectus nulla. Quam pellentesque nec nam aliquam sem et tortor consequat id. Volutpat lacus laoreet non curabitur gravida. Justo donec enim diam vulputate. Pellentesque habitant morbi tristique senectus et netus et. In metus vulputate eu scelerisque felis imperdiet proin fermentum leo. Urna porttitor rhoncus dolor purus.Sit amet tellus cras adipiscing enim. Gravida neque convallis a cras semper. Arcu dui vivamus arcu felis bibendum ut tristique. Sit amet luctus venenatis lectus magna fringilla urna porttitor rhoncus. Enim neque volutpat ac tincidunt vitae semper. Arcu cursus euismod quis viverra nibh. Quis vel eros donec ac odio tempor. Magna eget est lorem ipsum dolor sit amet consectetur. Congue mauris rhoncus aenean vel elit scelerisque mauris pellentesque pulvinar. Gravida cum sociis natoque penatibus et magnis dis. Egestas maecenas pharetra convallis posuere morbi leo urna. Consectetur lorem donec massa sapien faucibus et.Nunc sed blandit libero volutpat sed cras. Volutpat consequat mauris nunc congue nisi vitae suscipit tellus mauris. Lobortis scelerisque fermentum dui faucibus in ornare quam. Eget sit amet tellus cras adipiscing enim eu turpis. Mi in nulla posuere sollicitudin aliquam ultrices sagittis. In metus vulputate eu scelerisque felis imperdiet proin fermentum. Amet luctus venenatis lectus magna fringilla. Viverra tellus in hac habitasse platea dictumst vestibulum rhoncus est. Ipsum a arcu cursus vitae. Vitae ultricies leo integer malesuada nunc. Amet mattis vulputate enim nulla aliquet porttitor lacus luctus. Tempus egestas sed sed risus. Quisque id diam vel quam elementum pulvinar etiam non. Faucibus vitae aliquet nec ullamcorper sit amet risus. Viverra nam libero justo laoreet sit amet cursus.Dui sapien eget mi proin sed libero enim sed. At augue eget arcu dictum varius duis at consectetur. Sollicitudin ac orci phasellus egestas tellus rutrum tellus pellentesque. Etiam erat velit scelerisque in dictum non consectetur a erat. Phasellus egestas tellus rutrum tellus pellentesque. Commodo odio aenean sed adipiscing. Odio pellentesque diam volutpat commodo sed egestas egestas fringilla. Senectus et netus et malesuada fames ac turpis egestas. Euismod quis viverra nibh cras pulvinar mattis nunc. Aliquam ut porttitor leo a diam. Ultricies mi eget mauris pharetra et ultrices neque ornare. Faucibus in ornare quam viverra orci sagittis eu. Facilisis magna etiam tempor orci eu lobortis elementum nibh tellus. Eget duis at tellus at urna condimentum mattis pellentesque. Id nibh tortor id aliquet lectus proin nibh nisl condimentum. Ut etiam sit amet nisl purus in mollis. Ipsum faucibus vitae aliquet nec ullamcorper sit amet risus. Eros in cursus turpis massa tincidunt dui ut ornare lectus. Ac orci phasellus egestas tellus rutrum tellus. Mauris in aliquam sem fringilla.mperdiet sed euismod nisi porta lorem mollis aliquam ut porttitor. Ut consequat semper viverra nam libero. Augue neque gravida in fermentum et sollicitudin. Ultrices sagittis orci a scelerisque purus semper eget duis. Consequat mauris nunc congue nisi. Consequat semper viverra nam libero justo laoreet sit. Sociis natoque penatibus et magnis dis parturient. Sem integer vitae justo eget magna fermentum iaculis. Viverra aliquet eget sit amet tellus cras adipiscing enim. Bibendum enim facilisis gravida neque convallis a. Justo nec ultrices dui sapien eget mi proin sed libero. At auctor urna nunc id cursus metus. Cras sed felis eget velit aliquet sagittis id consectetur purus. Id faucibus nisl tincidunt eget nullam non nisi est. Tincidunt lobortis feugiat vivamus at augue. Non diam phasellus vestibulum lorem sed risus ultricies tristique nulla.Magna sit amet purus gravida quis. Eros in cursus turpis massa tincidunt. Nunc scelerisque viverra mauris in aliquam. Imperdiet proin fermentum leo vel orci. Aliquet porttitor lacus luctus accumsan tortor posuere. Cursus euismod quis viverra nibh cras pulvinar mattis nunc. Aliquam sem et tortor consequat id. Euismod quis viverra nibh cras pulvinar mattis nunc sed blandit. Tellus pellentesque eu tincidunt tortor aliquam nulla. Aliquet porttitor lacus luctus accumsan tortor posuere ac ut. Vitae sapien pellentesque habitant morbi tristique senectus et. Leo integer malesuada nunc vel risus commodo viverra maecenas. Etiam tempor orci eu lobortis elementum. Tempor nec feugiat nisl pretium fusce id velit ut. Nisl tincidunt eget nullam non. Id consectetur purus ut faucibus pulvinar elementum.Urna et pharetra pharetra massa. Enim ut tellus elementum sagittis vitae et leo duis ut. Sem fringilla ut morbi tincidunt augue interdum velit euismod. Diam phasellus vestibulum lorem sed risus. Venenatis tellus in metus vulputate eu scelerisque felis imperdiet proin. Felis donec et odio pellentesque diam volutpat commodo. Quis auctor elit sed vulputate. Lectus magna fringilla urna porttitor. Eget est lorem ipsum dolor sit amet consectetur. Eget magna fermentum iaculis eu non. Ut tristique et egestas quis ipsum suspendisse ultrices gravida. Cursus turpis massa tincidunt dui ut ornare. Scelerisque felis imperdiet proin fermentum leo vel orci. Laoreet id donec ultrices tincidunt arcu. Id donec ultrices tincidunt arcu non.Laoreet sit amet cursus sit amet. Amet mauris commodo quis imperdiet massa tincidunt nunc. Non diam phasellus vestibulum lorem sed risus ultricies tristique. Mattis vulputate enim nulla aliquet porttitor lacus luctus accumsan. Lacus laoreet non curabitur gravida arcu ac. Viverra suspendisse potenti nullam ac tortor vitae purus faucibus. Ut venenatis tellus in metus vulputate eu. Tellus cras adipiscing enim eu turpis egestas. Augue ut lectus arcu bibendum at. Ut etiam sit amet nisl purus in mollis nunc. Aliquam purus sit amet luctus venenatis lectus magna. Odio ut sem nulla pharetra diam sit. Facilisis volutpat est velit egestas dui id ornare arcu odio. Eu augue ut lectus arcu bibendum at. Eleifend donec pretium vulputate sapien nec. Justo laoreet sit amet cursus sit amet dictum sit amet. Tortor consequat id porta nibh venenatis cras. Felis eget nunc lobortis mattis.Eget dolor morbi non arcu risus quis varius. Urna nec tincidunt praesent semper feugiat nibh. Ultrices in iaculis nunc sed. Laoreet non curabitur gravida arcu ac tortor dignissim. Nunc eget lorem dolor sed. Quis risus sed vulputate odio ut enim blandit volutpat. Vehicula ipsum a arcu cursus. Natoque penatibus et magnis dis parturient montes nascetur ridiculus mus. Suspendisse faucibus interdum posuere lorem ipsum. Penatibus et magnis dis parturient montes nascetur ridiculus mus. Donec pretium vulputate sapien nec sagittis aliquam malesuada bibendum arcu. Gravida neque convallis a cras semper auctor neque vitae. Mi bibendum neque egestas congue quisque egestas diam. Purus gravida quis blandit turpis cursus in hac habitasse platea. Sit amet tellus cras adipiscing enim eu turpis egestas. Integer feugiat scelerisque varius morbi enim nunc. Mauris rhoncus aenean vel elit. Quis imperdiet massa tincidunt nunc pulvinar sapien et. Montes nascetur ridiculus mus mauris.A condimentum vitae sapien pellentesque habitant. Viverra aliquet eget sit amet tellus cras. Egestas quis ipsum suspendisse ultrices gravida dictum fusce ut placerat. Lacus sed turpis tincidunt id aliquet risus feugiat. Diam donec adipiscing tristique risus. Eros in cursus turpis massa tincidunt dui ut ornare. Urna nec tincidunt praesent semper. Turpis egestas pretium aenean pharetra. Pellentesque habitant morbi tristique senectus et. Facilisis leo vel fringilla est ullamcorper eget nulla facilisi. Habitasse platea dictumst quisque sagittis purus sit amet volutpat consequat. Nisi porta lorem mollis aliquam. Pretium lectus quam id leo in. Cras semper auctor neque vitae tempus quam pellentesque.uis lectus nulla at volutpat diam ut venenatis tellus in. Nullam eget felis eget nunc lobortis mattis aliquam faucibus purus. Nulla pellentesque dignissim enim sit amet. Felis imperdiet proin fermentum leo vel. Placerat in egestas erat imperdiet. Proin sed libero enim sed. Augue mauris augue neque gravida in. Mollis nunc sed id semper risus in hendrerit gravida. Malesuada pellentesque elit eget gravida. Suspendisse in est ante in nibh mauris cursus mattis. Odio facilisis mauris sit amet massa vitae. Laoreet sit amet cursus sit amet dictum sit amet. Justo eget magna fermentum iaculis eu non. Ullamcorper a lacus vestibulum sed arcu non odio. Quisque sagittis purus sit amet volutpat consequat mauris. Auctor urna nunc id cursus metus aliquam eleifend. Ut tristique et egestas quis ipsum. Aenean vel elit scelerisque mauris. Dignissim convallis aenean et tortor at risus.Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. In nibh mauris cursus mattis molestie a iaculis at. Viverra accumsan in nisl nisi scelerisque. Pretium lectus quam id leo in vitae turpis massa. Id diam vel quam elementum pulvinar. Quis ipsum suspendisse ultrices gravida. Aliquam etiam erat velit scelerisque. Massa sapien faucibus et molestie ac feugiat sed lectus. Sapien et ligula ullamcorper malesuada proin libero nunc consequat. Blandit aliquam etiam erat velit scelerisque in dictum non consectetur. Convallis tellus id interdum velit laoreet id donec ultrices tincidunt. Nibh ipsum consequat nisl vel pretium lectus. Aliquam sem et tortor consequat id porta nibh venenatis. Sit amet dictum sit amet justo. Porttitor lacus luctus accumsan tortor posuere. Purus in massa tempor nec. Sagittis nisl rhoncus mattis rhoncus urna neque. Diam vel quam elementum pulvinar etiam non quam lacus.Varius morbi enim nunc faucibus. Turpis in eu mi bibendum neque egestas. In vitae turpis massa sed elementum tempus egestas sed. Orci dapibus ultrices in iaculis nunc sed. Fermentum odio eu feugiat pretium nibh. Euismod lacinia at quis risus. In ornare quam viverra orci sagittis eu volutpat. Suscipit tellus mauris a diam maecenas sed enim ut. Pellentesque pulvinar pellentesque habitant morbi tristique. Pellentesque habitant morbi tristique senectus et netus et. Pretium viverra suspendisse potenti nullam ac tortor vitae. Sagittis id consectetur purus ut. Turpis egestas sed tempus urna et pharetra pharetra massa. Porttitor leo a diam sollicitudin. Imperdiet massa tincidunt nunc pulvinar sapien et. Pharetra sit amet aliquam id diam maecenas ultricies mi eget. Id eu nisl nunc mi ipsum faucibus vitae aliquet. At volutpat diam ut venenatis tellus in metus vulputate. Nunc id cursus metus aliquam eleifend mi. Magna eget est lorem ipsum dolor sit amet consectetur.Lacus laoreet non curabitur gravida arcu ac. Lorem sed risus ultricies tristique nulla aliquet enim tortor at. Blandit volutpat maecenas volutpat blandit aliquam etiam. Ut venenatis tellus in metus vulputate eu scelerisque. Dignissim cras tincidunt lobortis feugiat vivamus at augue eget. Mauris pellentesque pulvinar pellentesque habitant. Aliquet porttitor lacus luctus accumsan. Tincidunt eget nullam non nisi est sit amet facilisis magna. Ut tellus elementum sagittis vitae et leo duis. Facilisis leo vel fringilla est ullamcorper eget. Justo donec enim diam vulputate ut pharetra sit amet. Consectetur adipiscing elit pellentesque habitant morbi tristique senectus et netus.Etiam non quam lacus suspendisse faucibus. Cras semper auctor neque vitae tempus quam. Leo a diam sollicitudin tempor id eu nisl. Cursus in hac habitasse platea dictumst quisque. Nulla facilisi etiam dignissim diam quis enim. At in tellus integer feugiat scelerisque varius. Et tortor at risus viverra adipiscing at in. Nec tincidunt praesent semper feugiat nibh. Quam pellentesque nec nam aliquam sem et tortor consequat id. Odio tempor orci dapibus ultrices in iaculis nunc sed augue. Ut morbi tincidunt augue interdum. Nunc pulvinar sapien et ligula ullamcorper. Urna cursus eget nunc scelerisque viverra. Eu consequat ac felis donec et odio pellentesque diam. Euismod nisi porta lorem mollis aliquam ut. Sit amet risus nullam eget felis. Non pulvinar neque laoreet suspendisse interdum consectetur libero id faucibus. Dui sapien eget mi proin sed. Et malesuada fames ac turpis.Blandit massa enim nec dui nunc mattis. Facilisi morbi tempus iaculis urna id. Nulla aliquet porttitor lacus luctus accumsan tortor posuere ac ut. Odio ut sem nulla pharetra diam sit amet. Quis imperdiet massa tincidunt nunc pulvinar sapien. Adipiscing elit pellentesque habitant morbi. Orci porta non pulvinar neque laoreet suspendisse interdum. Sit amet mauris commodo quis imperdiet massa tincidunt nunc. Consectetur libero id faucibus nisl tincidunt eget. Habitasse platea dictumst quisque sagittis.Consequat nisl vel pretium lectus. Leo vel orci porta non pulvinar neque laoreet suspendisse. Pellentesque elit eget gravida cum sociis. Pellentesque pulvinar pellentesque habitant morbi tristique senectus et netus. Euismod in pellentesque massa placerat. Montes nascetur ridiculus mus mauris vitae ultricies leo. Viverra nibh cras pulvinar mattis nunc sed blandit libero. Ornare arcu dui vivamus arcu felis bibendum. Tincidunt vitae semper quis lectus nulla at volutpat diam. Cursus turpis massa tincidunt dui ut. Et molestie ac feugiat sed lectus vestibulum.Dictumst quisque sagittis purus sit amet. Fusce ut placerat orci nulla pellentesque dignissim enim. Odio morbi quis commodo odio aenean sed. Eget arcu dictum varius duis at. Platea dictumst quisque sagittis purus sit amet. Ultrices mi tempus imperdiet nulla malesuada pellentesque elit. Justo donec enim diam vulputate ut pharetra. Ullamcorper velit sed ullamcorper morbi tincidunt ornare massa. Porttitor lacus luctus accumsan tortor posuere ac ut consequat semper. Pellentesque habitant morbi tristique senectus. Facilisi nullam vehicula ipsum a arcu. Sed velit dignissim sodales ut eu sem. Pellentesque id nibh tortor id aliquet lectus. Nunc sed augue lacus viverra. Odio morbi quis commodo odio aenean sed. Non curabitur gravida arcu ac tortor dignissim convallis aenean et.Interdum posuere lorem ipsum dolor sit amet consectetur. Pulvinar etiam non quam lacus suspendisse faucibus interdum posuere. Egestas egestas fringilla phasellus faucibus. Sed blandit libero volutpat sed cras ornare arcu dui vivamus. Vestibulum mattis ullamcorper velit sed ullamcorper morbi. Pulvinar mattis nunc sed blandit. Fames ac turpis egestas maecenas pharetra convallis posuere morbi leo. Purus faucibus ornare suspendisse sed nisi lacus sed. Viverra nibh cras pulvinar mattis nunc sed blandit libero volutpat. Quisque sagittis purus sit amet volutpat consequat mauris nunc. Ut sem nulla pharetra diam sit amet nisl suscipit adipiscing. Aliquet nec ullamcorper sit amet risus nullam eget felis. Eget lorem dolor sed viverra ipsum nunc aliquet bibendum. Platea dictumst quisque sagittis purus sit. Morbi tempus iaculis urna id volutpat lacus laoreet non curabitur. Quisque non tellus orci ac auctor augue mauris augue. Turpis egestas integer eget aliquet nibh praesent tristique magna sit.Integer vitae justo eget magna fermentum. Eleifend quam adipiscing vitae proin sagittis. Diam donec adipiscing tristique risus nec feugiat in fermentum posuere. Id neque aliquam vestibulum morbi blandit cursus. Ut sem viverra aliquet eget sit amet tellus. Est sit amet facilisis magna etiam. Euismod quis viverra nibh cras pulvinar mattis. Tincidunt nunc pulvinar sapien et ligula ullamcorper malesuada. Ipsum suspendisse ultrices gravida dictum. Urna duis convallis convallis tellus id interdum velit. Vitae tempus quam pellentesque nec. Vitae turpis massa sed elementum tempus egestas sed. Integer feugiat scelerisque varius morbi.Sed turpis tincidunt id aliquet. Sit amet porttitor eget dolor morbi non arcu. Est placerat in egestas erat. Ac tincidunt vitae semper quis lectus nulla. Quam pellentesque nec nam aliquam sem et tortor consequat id. Volutpat lacus laoreet non curabitur gravida. Justo donec enim diam vulputate. Pellentesque habitant morbi tristique senectus et netus et. In metus vulputate eu scelerisque felis imperdiet proin fermentum leo. Urna porttitor rhoncus dolor purus.Sit amet tellus cras adipiscing enim. Gravida neque convallis a cras semper. Arcu dui vivamus arcu felis bibendum ut tristique. Sit amet luctus venenatis lectus magna fringilla urna porttitor rhoncus. Enim neque volutpat ac tincidunt vitae semper. Arcu cursus euismod quis viverra nibh. Quis vel eros donec ac odio tempor. Magna eget est lorem ipsum dolor sit amet consectetur. Congue mauris rhoncus aenean vel elit scelerisque mauris pellentesque pulvinar. Gravida cum sociis natoque penatibus et magnis dis. Egestas maecenas pharetra convallis posuere morbi leo urna. Consectetur lorem donec massa sapien faucibus et.Nunc sed blandit libero volutpat sed cras. Volutpat consequat mauris nunc congue nisi vitae suscipit tellus mauris. Lobortis scelerisque fermentum dui faucibus in ornare quam. Eget sit amet tellus cras adipiscing enim eu turpis. Mi in nulla posuere sollicitudin aliquam ultrices sagittis. In metus vulputate eu scelerisque felis imperdiet proin fermentum. Amet luctus venenatis lectus magna fringilla. Viverra tellus in hac habitasse platea dictumst vestibulum rhoncus est. Ipsum a arcu cursus vitae. Vitae ultricies leo integer malesuada nunc. Amet mattis vulputate enim nulla aliquet porttitor lacus luctus. Tempus egestas sed sed risus. Quisque id diam vel quam elementum pulvinar etiam non. Faucibus vitae aliquet nec ullamcorper sit amet risus. Viverra nam libero justo laoreet sit amet cursus.Dui sapien eget mi proin sed libero enim sed. At augue eget arcu dictum varius duis at consectetur. Sollicitudin ac orci phasellus egestas tellus rutrum tellus pellentesque. Etiam erat velit scelerisque in dictum non consectetur a erat. Phasellus egestas tellus rutrum tellus pellentesque. Commodo odio aenean sed adipiscing. Odio pellentesque diam volutpat commodo sed egestas egestas fringilla. Senectus et netus et malesuada fames ac turpis egestas. Euismod quis viverra nibh cras pulvinar mattis nunc. Aliquam ut porttitor leo a diam. Ultricies mi eget mauris pharetra et ultrices neque ornare. Faucibus in ornare quam viverra orci sagittis eu. Facilisis magna etiam tempor orci eu lobortis elementum nibh tellus. Eget duis at tellus at urna condimentum mattis pellentesque. Id nibh tortor id aliquet lectus proin nibh nisl condimentum. Ut etiam sit amet nisl purus in mollis. Ipsum faucibus vitae aliquet nec ullamcorper sit amet risus. Eros in cursus turpis massa tincidunt dui ut ornare lectus. Ac orci phasellus egestas tellus rutrum tellus. Mauris in aliquam sem fringilla.mperdiet sed euismod nisi porta lorem mollis aliquam ut porttitor. Ut consequat semper viverra nam libero. Augue neque gravida in fermentum et sollicitudin. Ultrices sagittis orci a scelerisque purus semper eget duis. Consequat mauris nunc congue nisi. Consequat semper viverra nam libero justo laoreet sit. Sociis natoque penatibus et magnis dis parturient. Sem integer vitae justo eget magna fermentum iaculis. Viverra aliquet eget sit amet tellus cras adipiscing enim. Bibendum enim facilisis gravida neque convallis a. Justo nec ultrices dui sapien eget mi proin sed libero. At auctor urna nunc id cursus metus. Cras sed felis eget velit aliquet sagittis id consectetur purus. Id faucibus nisl tincidunt eget nullam non nisi est. Tincidunt lobortis feugiat vivamus at augue. Non diam phasellus vestibulum lorem sed risus ultricies tristique nulla.Magna sit amet purus gravida quis. Eros in cursus turpis massa tincidunt. Nunc scelerisque viverra mauris in aliquam. Imperdiet proin fermentum leo vel orci. Aliquet porttitor lacus luctus accumsan tortor posuere. Cursus euismod quis viverra nibh cras pulvinar mattis nunc. Aliquam sem et tortor consequat id. Euismod quis viverra nibh cras pulvinar mattis nunc sed blandit. Tellus pellentesque eu tincidunt tortor aliquam nulla. Aliquet porttitor lacus luctus accumsan tortor posuere ac ut. Vitae sapien pellentesque habitant morbi tristique senectus et. Leo integer malesuada nunc vel risus commodo viverra maecenas. Etiam tempor orci eu lobortis elementum. Tempor nec feugiat nisl pretium fusce id velit ut. Nisl tincidunt eget nullam non. Id consectetur purus ut faucibus pulvinar elementum.Urna et pharetra pharetra massa. Enim ut tellus elementum sagittis vitae et leo duis ut. Sem fringilla ut morbi tincidunt augue interdum velit euismod. Diam phasellus vestibulum lorem sed risus. Venenatis tellus in metus vulputate eu scelerisque felis imperdiet proin. Felis donec et odio pellentesque diam volutpat commodo. Quis auctor elit sed vulputate. Lectus magna fringilla urna porttitor. Eget est lorem ipsum dolor sit amet consectetur. Eget magna fermentum iaculis eu non. Ut tristique et egestas quis ipsum suspendisse ultrices gravida. Cursus turpis massa tincidunt dui ut ornare. Scelerisque felis imperdiet proin fermentum leo vel orci. Laoreet id donec ultrices tincidunt arcu. Id donec ultrices tincidunt arcu non.Laoreet sit amet cursus sit amet. Amet mauris commodo quis imperdiet massa tincidunt nunc. Non diam phasellus vestibulum lorem sed risus ultricies tristique. Mattis vulputate enim nulla aliquet porttitor lacus luctus accumsan. Lacus laoreet non curabitur gravida arcu ac. Viverra suspendisse potenti nullam ac tortor vitae purus faucibus. Ut venenatis tellus in metus vulputate eu. Tellus cras adipiscing enim eu turpis egestas. Augue ut lectus arcu bibendum at. Ut etiam sit amet nisl purus in mollis nunc. Aliquam purus sit amet luctus venenatis lectus magna. Odio ut sem nulla pharetra diam sit. Facilisis volutpat est velit egestas dui id ornare arcu odio. Eu augue ut lectus arcu bibendum at. Eleifend donec pretium vulputate sapien nec. Justo laoreet sit amet cursus sit amet dictum sit amet. Tortor consequat id porta nibh venenatis cras. Felis eget nunc lobortis mattis.Eget dolor morbi non arcu risus quis varius. Urna nec tincidunt praesent semper feugiat nibh. Ultrices in iaculis nunc sed. Laoreet non curabitur gravida arcu ac tortor dignissim. Nunc eget lorem dolor sed. Quis risus sed vulputate odio ut enim blandit volutpat. Vehicula ipsum a arcu cursus. Natoque penatibus et magnis dis parturient montes nascetur ridiculus mus. Suspendisse faucibus interdum posuere lorem ipsum. Penatibus et magnis dis parturient montes nascetur ridiculus mus. Donec pretium vulputate sapien nec sagittis aliquam malesuada bibendum arcu. Gravida neque convallis a cras semper auctor neque vitae. Mi bibendum neque egestas congue quisque egestas diam. Purus gravida quis blandit turpis cursus in hac habitasse platea. Sit amet tellus cras adipiscing enim eu turpis egestas. Integer feugiat scelerisque varius morbi enim nunc. Mauris rhoncus aenean vel elit. Quis imperdiet massa tincidunt nunc pulvinar sapien et. Montes nascetur ridiculus mus mauris.A condimentum vitae sapien pellentesque habitant. Viverra aliquet eget sit amet tellus cras. Egestas quis ipsum suspendisse ultrices gravida dictum fusce ut placerat. Lacus sed turpis tincidunt id aliquet risus feugiat. Diam donec adipiscing tristique risus. Eros in cursus turpis massa tincidunt dui ut ornare. Urna nec tincidunt praesent semper. Turpis egestas pretium aenean pharetra. Pellentesque habitant morbi tristique senectus et. Facilisis leo vel fringilla est ullamcorper eget nulla facilisi. Habitasse platea dictumst quisque sagittis purus sit amet volutpat consequat. Nisi porta lorem mollis aliquam. Pretium lectus quam id leo in. Cras semper auctor neque vitae tempus quam pellentesque.Quis lectus nulla at volutpat diam ut venenatis tellus in. Nullam eget felis eget nunc lobortis mattis aliquam faucibus purus. Nulla pellentesque dignissim enim sit amet. Felis imperdiet proin fermentum leo vel. Placerat in egestas erat imperdiet. Proin sed libero enim sed. Augue mauris augue neque gravida in. Mollis nunc sed id semper risus in hendrerit gravida. Malesuada pellentesque elit eget gravida. Suspendisse in est ante in nibh mauris cursus mattis. Odio facilisis mauris sit amet massa vitae. Laoreet sit amet cursus sit amet dictum sit amet. Justo eget magna fermentum iaculis eu non. Ullamcorper a lacus vestibulum sed arcu non odio. Quisque sagittis purus sit amet volutpat consequat mauris. Auctor urna nunc id cursus metus aliquam eleifend. Ut tristique et egestas quis ipsum. Aenean vel elit scelerisque mauris. Dignissim convallis aenean et tortor at risus.\" + moment().format(\"DDMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createUnavailability($input: CreateUnavailabilityInput!) {\r\n  createUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"userId\": \"{{userid}}\",\r\n            \"description\": 123,\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Unavailability Parameter  Invalid - unavailabilityStart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fedc4bbc-62d7-40b1-9881-6e838e2a761b",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that userId error message is correct\", function () {\r",
									"    var error_unavailability = jsonData.errors[0].extensions.errors['unavailability.start'].isIso8601;  \r",
									"    pm.expect(error_unavailability).to.eql(\"Invalid ISO-8601 date string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5b2fbc34-168a-496d-b3bd-a8f96543fecd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createUnavailability($input: CreateUnavailabilityInput!) {\r\n  createUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"userId\": \"{{userid}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"!@#$%^&*\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Unavailability Parameter  Invalid -  unavailabilityEnd",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ce8c92f-c6cd-4cc1-8822-35f5f67b7d21",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that userId error message is correct\", function () {\r",
									"    var error_unavailability = jsonData.errors[0].extensions.errors['unavailability.end'].isIso8601;  \r",
									"    pm.expect(error_unavailability).to.eql(\"Invalid ISO-8601 date string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "541ead03-f429-41ab-a898-f43095269f0e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createUnavailability($input: CreateUnavailabilityInput!) {\r\n  createUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"userId\": \"{{userid}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"!@#$%^&*(\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Unavailability By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb398a52-4de2-4992-971a-798e1e699f4b",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var unavailability_data = JSON.parse(pm.variables.get(\"unavailability_data\"));\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verifying unavailability ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.unavailability.id;  \r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"// Verifying returned unavailability info with recently stored unavailability info\r",
									"pm.test(\"Verifying unavailability's createdAt\", function () {\r",
									"    var createdAt = jsonData.data.unavailability.createdAt;\r",
									"    pm.expect(createdAt).to.eql(unavailability_data.createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying unavailability Description\", function () {\r",
									"    var description = jsonData.data.unavailability.description.value; \r",
									"    pm.expect(description).to.eql(unavailability_data.description.value);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying unavailability start\", function () {\r",
									"    var start = jsonData.data.unavailability.start.value; \r",
									"    pm.expect(start).to.eql(unavailability_data.start.value);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying unavailability end\", function () {\r",
									"    var end = jsonData.data.unavailability.end.value; \r",
									"    pm.expect(end).to.eql(unavailability_data.end.value);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query unavailability($id: ID!) {\r\n  unavailability(id: $id) {\r\n    id\r\n    createdAt\r\n    description {\r\n      value\r\n      canRead\r\n      canEdit\r\n    }\r\n    start\r\n    end\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"{{unavailabilityId}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Unavailability By id Mandatory Field Blank - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd145897-2b35-41eb-ad10-3f68dd1b1ddc",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that userId error message is correct\", function () {\r",
									"    var error_unavailabilityId = jsonData.errors[0].extensions.errors.id.IsId;  \r",
									"    pm.expect(error_unavailabilityId).to.eql(\"Invalid ID\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query unavailability($id: ID!) {\r\n  unavailability(id: $id) {\r\n    id\r\n    createdAt\r\n    description {\r\n      value\r\n      canRead\r\n      canEdit\r\n    }\r\n    start\r\n    end\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Unavailability By id Mandatory Field Removed  - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e380b2d7-5656-4f52-847d-bb5ce4eb4254",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query unavailability($id: ID!) {\r\n  unavailability(id: $id) {\r\n    id\r\n    createdAt\r\n    description {\r\n      value\r\n      canRead\r\n      canEdit\r\n    }\r\n    start\r\n    end\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Unavailability By id Parameter Mismatch - id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad9a5d4e-6548-46d7-800a-e870bb589566",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query unavailability($id: ID!) {\r\n  unavailability(id: $id) {\r\n    id\r\n    createdAt\r\n    description {\r\n      value\r\n      canRead\r\n      canEdit\r\n    }\r\n    start\r\n    end\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id1\": \"{{unavailabilityId}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Unavailability By id Parameter Invalid - id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03881b82-9199-48f8-a68d-0a941b0f9239",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that userId error message is correct\", function () {\r",
									"    var error_unavailabilityId = jsonData.errors[0].extensions.errors.id.IsId;  \r",
									"    pm.expect(error_unavailabilityId).to.eql(\"Invalid ID\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query unavailability($id: ID!) {\r\n  unavailability(id: $id) {\r\n    id\r\n    createdAt\r\n    description {\r\n      value\r\n      canRead\r\n      canEdit\r\n    }\r\n    start\r\n    end\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"!@#$%^&*\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unavailability Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20cb9de3-5364-4e60-abe3-e0111efddf37",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var unavailability_data = JSON.parse(pm.variables.get(\"unavailability_data\"));\r",
									"const moment = require('moment');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that unavailability ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateUnavailability.unavailability.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated unavailability description is same as requested\", function () {\r",
									"    var description = jsonData.data.updateUnavailability.unavailability.description.value;\r",
									"    pm.expect(description).to.eql(pm.globals.get('description'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated unavailability start is same as requested\", function () {\r",
									"    var start = jsonData.data.updateUnavailability.unavailability.start.value;\r",
									"    pm.expect(start).to.eql(pm.globals.get('unavailabilityStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated unavailability end is same as requested\", function () {\r",
									"    var end = jsonData.data.updateUnavailability.unavailability.end.value;\r",
									"    pm.expect(end).to.eql(pm.globals.get('unavailabilityEnd'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e5240fb-e530-417c-a46c-23380f313754",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"description\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Libero volutpat sed cras ornare arcu dui vivamus arcu. Dui nunc mattis enim ut tellus elementum sagittis vitae. Pharetra sit amet aliquam id diam maecenas ultricies mi. Quis vel eros donec ac odio tempor orci. Faucibus purus.\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUnavailability($input: UpdateUnavailabilityInput!) {\r\n  updateUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"id\": \"{{unavailabilityId}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unavailability Success - Only Required Inputs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3382f0e-49cb-4e20-8add-09de672c6d37",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that unavailability ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateUnavailability.unavailability.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated unavailability description is same as previous value\", function () {\r",
									"    var description = jsonData.data.updateUnavailability.unavailability.description.value;\r",
									"    pm.expect(description).to.eql(pm.globals.get('description'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated unavailability start is same as previous value\", function () {\r",
									"    var start = jsonData.data.updateUnavailability.unavailability.start.value;\r",
									"    pm.expect(start).to.eql(pm.globals.get('unavailabilityStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated unavailability end is same as previous value\", function () {\r",
									"    var end = jsonData.data.updateUnavailability.unavailability.end.value;\r",
									"    pm.expect(end).to.eql(pm.globals.get('unavailabilityEnd'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b4d218b1-4182-4733-aad7-bfa9e74ac596",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUnavailability($input: UpdateUnavailabilityInput!) {\r\n  updateUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"id\": \"{{unavailabilityId}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unavailability Mandatory Field Removed - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d075378f-71da-481d-bb0d-f9b17d7a72f9",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eb850229-1204-4199-9229-006f9c0d44b6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUnavailability($input: UpdateUnavailabilityInput!) {\r\n  updateUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unavailability Mandatory Field Blank - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f2d21d8-f006-4653-88c0-c69dbb6792cf",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that userId error message is correct\", function () {\r",
									"    var error_organizationId = jsonData.errors[0].extensions.errors['unavailability.id'].IsId;  \r",
									"    pm.expect(error_organizationId).to.eql(\"Invalid ID\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fa55e86b-4804-410d-9ba6-5adad6bc24d7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUnavailability($input: UpdateUnavailabilityInput!) {\r\n  updateUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"id\": \"\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unavailability Not Mandatory Field Removed - Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5c74cd3-f26d-4af4-bc3b-e102102b3abc",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that unavailability ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateUnavailability.unavailability.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated unavailability description is equal to previous value\", function () {\r",
									"    var description = jsonData.data.updateUnavailability.unavailability.description.value;\r",
									"    pm.expect(description).to.eql(pm.globals.get('description'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ef1b5bba-a17b-4591-accd-450521894dc8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUnavailability($input: UpdateUnavailabilityInput!) {\r\n  updateUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"id\": \"{{unavailabilityId}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unavailability Not Mandatory Field Blank - Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd6f4451-aeca-4b46-8f72-8fefa538a3c0",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that unavailability ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateUnavailability.unavailability.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated unavailability description is null\", function () {\r",
									"    var description = jsonData.data.updateUnavailability.unavailability.description.value;\r",
									"    pm.expect(description).to.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6bba296b-5772-416b-bbee-4bd2a3d95905",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUnavailability($input: UpdateUnavailabilityInput!) {\r\n  updateUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"id\": \"{{unavailabilityId}}\",\r\n            \"description\": \"\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unavailability Not Mandatory Field Removed - unavailabilityStart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13f269b3-ad35-4034-9127-93b410b870b5",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that unavailability ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateUnavailability.unavailability.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated unavailability start is equal to previous value\", function () {\r",
									"    var start = jsonData.data.updateUnavailability.unavailability.start.value;\r",
									"    pm.expect(start).to.eql(pm.globals.get('unavailabilityStart'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a31cfba9-2503-4d45-84ce-ea3611515db2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUnavailability($input: UpdateUnavailabilityInput!) {\r\n  updateUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"id\": \"{{unavailabilityId}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unavailability Not Mandatory Field Blank  - unavailabilityStart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46715ee5-c57b-4473-aaad-5e34bc013d3c",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that unavailability_error message is correct\", function () {\r",
									"    var unavailability_error = jsonData.errors[0].extensions.errors['unavailability.start'].isIso8601;\r",
									"    pm.expect(unavailability_error).to.eql(\"Invalid ISO-8601 date string\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c68bf321-c12d-4aaf-90d5-1859db688cf8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUnavailability($input: UpdateUnavailabilityInput!) {\r\n  updateUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"id\": \"{{unavailabilityId}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unavailability Not Mandatory Field Removed - unavailabilityEnd",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b726576f-489e-4cee-a6e9-772308ece7ce",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that unavailability ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateUnavailability.unavailability.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated unavailability end is equal to previous value\", function () {\r",
									"    var end = jsonData.data.updateUnavailability.unavailability.end.value;\r",
									"    pm.expect(end).to.eql(pm.globals.get('unavailabilityEnd'));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f51bfcb8-b5ca-4d0d-8800-758497e9bd47",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUnavailability($input: UpdateUnavailabilityInput!) {\r\n  updateUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"id\": \"{{unavailabilityId}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unavailability Not Mandatory Field Blank  - unavailabilityEnd",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6fd55f1a-2ec9-413c-9b70-a9913749b9c7",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that unavailability_error message is correct\", function () {\r",
									"    var unavailability_error = jsonData.errors[0].extensions.errors['unavailability.end'].isIso8601;\r",
									"    pm.expect(unavailability_error).to.eql(\"Invalid ISO-8601 date string\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2f691424-f18f-4b87-9706-c2e285fb5f78",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUnavailability($input: UpdateUnavailabilityInput!) {\r\n  updateUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"id\": \"{{unavailabilityId}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unavailability Parameter Mismatch - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15720e47-8859-4d34-ae48-fd81d7dd2b66",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "514ad13e-65d2-44f3-97d6-7b766399a2ca",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUnavailability($input: UpdateUnavailabilityInput!) {\r\n  updateUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"id1\": \"{{unavailabilityId}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unavailability Parameter Mismatch - Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de2e0f5c-72bb-4b82-be40-47b4fce6b146",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"description1\\\" is not defined by type \\\"UpdateUnavailability\\\". Did you mean \\\"description\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "49457878-b44d-4b0b-9c30-163a6a0a0840",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUnavailability($input: UpdateUnavailabilityInput!) {\r\n  updateUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"id\": \"{{unavailabilityId}}\",\r\n            \"description1\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unavailability Parameter Mismatch -  unavailabilityStart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6a5a12b-4e99-40ba-861d-e41fa983bfdc",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"start1\\\" is not defined by type \\\"UpdateUnavailability\\\". Did you mean \\\"start\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1bfcfff1-a98b-413e-ab0b-382a8de46b17",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUnavailability($input: UpdateUnavailabilityInput!) {\r\n  updateUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"id\": \"{{unavailabilityId}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"start1\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unavailability Parameter Mismatch -  unavailabilityEnd",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa862165-3af7-4c98-ac9e-74af90458433",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"end1\\\" is not defined by type \\\"UpdateUnavailability\\\". Did you mean \\\"end\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "72a27100-2fa2-4471-a43b-ed868258a767",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUnavailability($input: UpdateUnavailabilityInput!) {\r\n  updateUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"id\": \"{{unavailabilityId}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end1\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unavailability Parameter Invalid  -  Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51898e1c-0d07-4262-99ae-b4d0897712b8",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that userId error message is correct\", function () {\r",
									"    var error_organizationId = jsonData.errors[0].extensions.errors['unavailability.id'].IsId;  \r",
									"    pm.expect(error_organizationId).to.eql(\"Invalid ID\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "19f59288-7e24-4759-b884-d92a6f1f5179",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUnavailability($input: UpdateUnavailabilityInput!) {\r\n  updateUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"id\": \"!@#$%^\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unavailability Parameter Invalid  -  unavailabilityStart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14b95a9e-ff7a-43c8-9840-f1300f4a78bb",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that userId error message is correct\", function () {\r",
									"    var error_unavailability = jsonData.errors[0].extensions.errors['unavailability.start'].isIso8601;  \r",
									"    pm.expect(error_unavailability).to.eql(\"Invalid ISO-8601 date string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "07abc19c-0143-4777-9e73-5698bf2a59c7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUnavailability($input: UpdateUnavailabilityInput!) {\r\n  updateUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"id\": \"{{unavailabilityId}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"!@#$%^&*9\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Unavailability Parameter Invalid  -  unavailabilityEnd",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89f4ed92-de46-4e56-8647-79d6d5be651b",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that userId error message is correct\", function () {\r",
									"    var error_unavailability = jsonData.errors[0].extensions.errors['unavailability.end'].isIso8601;  \r",
									"    pm.expect(error_unavailability).to.eql(\"Invalid ISO-8601 date string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9625cefb-81fc-4d6e-b054-3c658b9daa28",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUnavailability($input: UpdateUnavailabilityInput!) {\r\n  updateUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"id\": \"{{unavailabilityId}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"!@#$%^&*\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Get All Unavailability ( Create Unavailability )",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f8bc91a6-ee4c-4541-b0a3-81b8e8dd65ee",
								"exec": [
									"const moment = require('moment');\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that unavailability ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.createUnavailability.unavailability.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"\r",
									"    // Saving data for future use\r",
									"    pm.globals.set(\"unavailabilityId\", id);\r",
									"});\r",
									"\r",
									"// Saving whole Unavailability Object to globals for future use\r",
									"var unavailability = JSON.stringify(jsonData.data.createUnavailability.unavailability);\r",
									"pm.globals.set(\"unavailability_data\", unavailability);\r",
									"\r",
									"pm.test(\"Verify that unavailability createdAt is in Specific time format\", function () {\r",
									"    var time = jsonData.data.createUnavailability.unavailability.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that unavailability description is same as requested\", function () {\r",
									"    var description = jsonData.data.createUnavailability.unavailability.description.value;\r",
									"    pm.expect(description).to.eql(pm.globals.get('description'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that unavailability start is same as requested\", function () {\r",
									"    var start = jsonData.data.createUnavailability.unavailability.start.value;\r",
									"    pm.expect(start).to.eql(pm.globals.get('unavailabilityStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that unavailability end is same as requested\", function () {\r",
									"    var end = jsonData.data.createUnavailability.unavailability.end.value;\r",
									"    pm.expect(end).to.eql(pm.globals.get('unavailabilityEnd'));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "027be437-c07c-4834-9330-e10b07abca4d",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"description\", \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Libero volutpat sed cras ornare arcu dui vivamus arcu. Dui nunc mattis enim ut tellus elementum sagittis vitae. Pharetra sit amet aliquam id diam maecenas ultricies mi. Quis vel eros donec ac odio tempor orci. Faucibus purus in massa tempor nec. Imperdietbbbb proin fermentum leo vel orci porta non pulvinar. Nulla facilisi nullam vehicula ipsum a arcu cursus.\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"unavailabilityStart\", moment().format(\"YYYY-MM-DDTHH:mm:ss.SSSZ\"));\r",
									"\r",
									"pm.globals.set(\"unavailabilityEnd\", moment().format(\"YYYY-MM-DDTHH:mm:ss.SSSZ\"))\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createUnavailability($input: CreateUnavailabilityInput!) {\r\n  createUnavailability(input: $input) {\r\n    unavailability {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"unavailability\": {\r\n            \"userId\": \"{{userid}}\",\r\n            \"description\": \"{{description}}\",\r\n            \"start\": \"{{unavailabilityStart}}\",\r\n            \"end\": \"{{unavailabilityEnd}}\"\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Unavailabilities Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6126c5b0-f505-4dac-8229-6526fc1ad2a4",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - Pagination\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.unavailabilities.total;\r",
									"    pm.expect(total).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that hasMore is correct\", function () {\r",
									"    var total = jsonData.data.unavailabilities.total;\r",
									"    var hasMore = jsonData.data.unavailabilities.hasMore;\r",
									"    if (Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) < total) {\r",
									"        pm.expect(hasMore).to.eql(true);\r",
									"    } else {\r",
									"        pm.expect(hasMore).to.eql(false);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that number of items returned are exact\", function () {\r",
									"    var total = jsonData.data.unavailabilities.total;                  // total returned in response\r",
									"    var returneditems = jsonData.data.unavailabilities.items.length;   // no. of items returned in response array\r",
									"    var itemCount = Number(pm.globals.get('itemCount'));    // no. of items per page\r",
									"    var page = Number(pm.globals.get('page'));              // page number\r",
									"    var expectedItems = itemCount * page;                   // items we are expecting\r",
									"\r",
									"    if (expectedItems <= total) {\r",
									"        pm.expect(returneditems).to.eql(itemCount);\r",
									"    } else {\r",
									"        if ((expectedItems - total) < itemCount) {\r",
									"            var lastItems = total - ((itemCount * (page - 1)));   // items in last page\r",
									"            pm.expect(returneditems).to.eql(lastItems);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"/**\r",
									" * Setting up 'page' number to be used in next request\r",
									" * For locating recently created Object position on Specific page\r",
									" */\r",
									"var total = jsonData.data.unavailabilities.total;\r",
									"var itemCount = Number(pm.globals.get('itemCount'));\r",
									"\r",
									"if (total > itemCount) {\r",
									"\r",
									"    if ((total % itemCount) == 0) {\r",
									"        var pageToset = total / itemCount;\r",
									"        pm.globals.set(\"page\", pageToset);\r",
									"    } else {\r",
									"        var pageToset = Math.floor(total / itemCount) + 1;\r",
									"        pm.globals.set(\"page\", pageToset);\r",
									"    }\r",
									"\r",
									"} else {\r",
									"    pm.globals.set(\"page\", 1);  // Set page to 1 if total <= itemCount\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ce5e3c65-5f6e-4e0f-b509-581a7e9749bf",
								"exec": [
									"pm.globals.set(\"itemCount\",25);\r",
									"pm.globals.set(\"page\",1);\r",
									"pm.globals.set('order', \"DESC\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: UnavailabilityListInput!) {\r\n  unavailabilities(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"start\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Unavailabilities Success - Item Object",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "db501942-bb3f-4955-bc09-d5d33cab7add",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var unavailability_data = JSON.parse(pm.variables.get(\"unavailability_data\")); // Get stored Unavailability object\r",
									"var lodash = require('lodash');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - Pagination\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.unavailabilities.total;\r",
									"    pm.expect(total).to.be.above(0);\r",
									"});\r",
									"\r",
									"/**\r",
									" * Verifying recently created unavailabilities's information with Unavailabilities object returned within items array\r",
									" */\r",
									"\r",
									"// get Unavailabilities object first having same id as recently created Unavailabilities's id\r",
									"var myUnavailability = lodash.find(jsonData.data.unavailabilities.items, ['id', unavailability_data.id]);\r",
									"\r",
									"pm.test(\"Verify that recently created unavailabilities ID is not blank or null\", function () {\r",
									"    var id = myUnavailability.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created unavailabilities's createdAt\", function () {\r",
									"    var createdAt = myUnavailability.createdAt;\r",
									"    pm.expect(createdAt).to.eql(unavailability_data.createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created unavailabilities's id\", function () {\r",
									"    var id = myUnavailability.id;\r",
									"    pm.expect(id).to.eql(unavailability_data.id);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created unavailabilities's description\", function () {\r",
									"    var description = myUnavailability.description.value;\r",
									"    pm.expect(description).to.eql(unavailability_data.description.value);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created unavailabilities's start\", function () {\r",
									"    var start = myUnavailability.start.value;\r",
									"    pm.expect(start).to.eql(unavailability_data.start.value);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created unavailabilities's end\", function () {\r",
									"    var end = myUnavailability.end.value;\r",
									"    pm.expect(end).to.eql(unavailability_data.end.value);\r",
									"});\r",
									"\r",
									"// SORTING AND FILTER TESTS\r",
									"pm.test(\"Verify that items are sorted by 'start' and orderd by requested order \", function () {\r",
									"\r",
									"    var responseBody = jsonData.data.unavailabilities.items;\r",
									"    if (pm.globals.get('order') == \"ASC\") {\r",
									"        var expectedSortedOrder = lodash.orderBy(responseBody, ['start.value'], ['asc'])\r",
									"        pm.expect(responseBody).to.eql(expectedSortedOrder);\r",
									"    } else {\r",
									"        var expectedSortedOrder = lodash.orderBy(responseBody, ['start.value'], ['desc'])\r",
									"        pm.expect(responseBody).to.eql(expectedSortedOrder);\r",
									"    }\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c1c3402b-b6af-4681-a007-b94a676c7bcb",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"// Page is set from previous request test script based on total\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: UnavailabilityListInput!) {\r\n  unavailabilities(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"start\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Unavailabilities Success - Total",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a0ffcb3-e824-4d06-b621-b132f1ef9354",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - total\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.unavailabilities.total;  \r",
									"    pm.expect(total).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1b617397-9f66-4be7-9b6d-9032050a3dae",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: UnavailabilityListInput!) {\r\n  unavailabilities(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"start\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Unavailabilities Success - hasMore - True",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3804070-7845-4793-a3aa-6ef7223a35a7",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - hasMore\r",
									"pm.test(\"Verify that hasMore is true Only when education items are still available\", function () {\r",
									"    var total = jsonData.data.unavailabilities.total;\r",
									"    var hasMore = jsonData.data.unavailabilities.hasMore;  \r",
									"    if(Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) < total){\r",
									"        pm.expect(hasMore).to.eql(true);\r",
									"    } else {\r",
									"        pm.expect(hasMore).to.eql(false);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "263118c7-ac28-485c-8aee-7ed60ffd55b3",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: UnavailabilityListInput!) {\r\n  unavailabilities(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"start\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Unavailabilities Success - hasMore - False",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9eda5c24-b3de-4d9e-a7bb-1278cffccbad",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - hasMore\r",
									"pm.test(\"Verify that hasMore is false Only when no more unavailabilities items available\", function () {\r",
									"    var total = jsonData.data.unavailabilities.total;\r",
									"    var hasMore = jsonData.data.unavailabilities.hasMore;  \r",
									"    if(Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) >= total){\r",
									"        pm.expect(hasMore).to.eql(false);\r",
									"    } else{\r",
									"        pm.expect(hasMore).to.eql(true);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that unavailabilities ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.unavailabilities.items[0].id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a9e62ebb-479e-4281-96f5-4a9c259606c0",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: UnavailabilityListInput!) {\r\n  unavailabilities(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"start\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Unavailabilities Success - Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23a9fd5c-5e8a-43d5-bc03-cafb16002461",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - no. of items are exact\r",
									"pm.test(\"Verify that number of items returned are exact\", function () {\r",
									"    var total = jsonData.data.unavailabilities.total;                  // total returned in response\r",
									"    var returneditems = jsonData.data.unavailabilities.items.length;   // no. of items returned in response array\r",
									"    var itemCount = Number(pm.globals.get('itemCount'));    // no. of items per page\r",
									"    var page = Number(pm.globals.get('page'));              // page number\r",
									"    var expectedItems = itemCount * page;                   // items we are expecting\r",
									"\r",
									"    if (expectedItems <= total) {\r",
									"        pm.expect(returneditems).to.eql(itemCount);\r",
									"    } else {\r",
									"        if ((expectedItems - total) < itemCount) {\r",
									"            var lastItems = total - ((itemCount * (page - 1)));   // items in last page\r",
									"            pm.expect(returneditems).to.eql(lastItems);\r",
									"        }\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "49232008-b5f1-43ff-aaff-8fdac465e9df",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: UnavailabilityListInput!) {\r\n  unavailabilities(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"start\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Unavailabilities Success -  start sorting ASC",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7fe2b00-d762-4171-8abf-35385363f09b",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var lodash = require('lodash');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - start sorting ASC\r",
									"pm.test(\"Verify that items are sorted by 'start' and orderd by 'ASC' order \", function () {\r",
									"\r",
									"    var responseBody = jsonData.data.unavailabilities.items;\r",
									"    var expectedSortedOrder = lodash.orderBy(responseBody, item => item.start.value, ['asc']);\r",
									"    pm.expect(responseBody).to.eql(expectedSortedOrder);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c3278613-33ae-466b-9c0e-fc75d87845ad",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: UnavailabilityListInput!) {\r\n  unavailabilities(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"start\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Unavailabilities Success -  start sorting DESC",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c9e9dcf-ced3-4ac7-85f3-2a52aa87e1c0",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var lodash = require('lodash');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - Name sorting DESC\r",
									"pm.test(\"Verify that items are sorted by 'start' and orderd by 'DESC' order \", function () {\r",
									"\r",
									"    var responseBody = jsonData.data.unavailabilities.items;\r",
									"    var expectedSortedOrder = lodash.orderBy(responseBody, item => item.start.value, ['desc']);\r",
									"    pm.expect(responseBody).to.eql(expectedSortedOrder);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "028ce5c5-ab1d-4bed-bcf7-06493dff14d9",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"DESC\");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: UnavailabilityListInput!) {\r\n  unavailabilities(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"start\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Unavailabilities  Not Mandatory Field Removed - count",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c25cc21-b085-473c-a679-f6d6d8b4a29f",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that number of items returned is equal to total\", function () {\r",
									"    var total = jsonData.data.unavailabilities.total;\r",
									"    var items = jsonData.data.unavailabilities.items.length;\r",
									"    if (total <= 25)    // 25 is maximum db items limit returned per page when count is not specified\r",
									"        pm.expect(items).to.eql(total);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "44d9ab08-fdfe-40c9-b08d-09585965201b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: UnavailabilityListInput!) {\r\n  unavailabilities(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"page\": {{page}},\r\n        \"sort\": \"start\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Unavailabilities  Not Mandatory Field Blank - sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4840bb9-92d4-4996-bc7c-8309dbcac369",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Invalid input\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 500\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is InternalServerError\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"InternalServerError\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9c894d1e-9e78-4c4e-9db8-baad3681bac0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: UnavailabilityListInput!) {\r\n  unavailabilities(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Unavailabilities  Not Mandatory Field  Blank - order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "440ad122-299b-454d-a75f-d278fd9d7e7c",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Order\\\" enum\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a7266ccd-f9bd-430a-bbe8-e2037a8d94b7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: UnavailabilityListInput!) {\r\n  unavailabilities(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"start\",\r\n    \"order\": \"\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Unavailabilities Parameter Mismatch - count",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a8d3289d-1be6-4885-ab5b-8f4d2ce357cd",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Field \\\"count1\\\" is not defined by type \\\"UnavailabilityListInput\\\". Did you mean \\\"count\\\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "97cda6ec-1741-4a28-813d-ef552744b7f8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: UnavailabilityListInput!) {\r\n  unavailabilities(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count1\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"start\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Unavailabilities Parameter Mismatch - page",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a6e687b-be14-4866-a154-0ef0db31757d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Field \\\"page1\\\" is not defined by type \\\"UnavailabilityListInput\\\". Did you mean \\\"page\\\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6385cfb6-a91a-4f13-b10f-2a6b350e6fbe",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: UnavailabilityListInput!) {\r\n  unavailabilities(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page1\": {{page}},\r\n    \"sort\": \"start\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Unavailabilities Parameter Mismatch - sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c01714c-670b-423b-84d3-fd913d5542ac",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Field \\\"sort1\\\" is not defined by type \\\"UnavailabilityListInput\\\". Did you mean \\\"sort\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c5035225-745c-4e8c-8749-7434bd8d40ab",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: UnavailabilityListInput!) {\r\n  unavailabilities(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort1\": \"start\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Unavailabilities Parameter Mismatch - order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1e2888f5-07c3-4f06-9583-4db1eeb5eab6",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Field \\\"order1\\\" is not defined by type \\\"UnavailabilityListInput\\\". Did you mean \\\"order\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b16d83ef-b13a-40f0-9970-707f5e9c6de8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: UnavailabilityListInput!) {\r\n  unavailabilities(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"start\",\r\n    \"order1\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Unavailabilities Parameter  Invalid - count min",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e42a3bdd-3fd1-420c-9e57-d138d2931267",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that count error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors.count.min;\r",
									"    pm.expect(error_message).to.eql(\"count must not be less than 1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0d83bee-dc3d-43d7-9d67-9e43246926a7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: UnavailabilityListInput!) {\r\n  unavailabilities(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": 0,\r\n    \"page\": {{page}},\r\n    \"sort\": \"start\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Unavailabilities Parameter  Invalid - count max",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a297b3a-cbd7-43cd-a8fc-dbe2abd5b09c",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that count error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors.count.max;  \r",
									"    pm.expect(error_message).to.eql(\"count must not be greater than 100\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4826a55c-fc91-44f7-9f93-7f90fd5cb0b5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: UnavailabilityListInput!) {\r\n  unavailabilities(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": 159,\r\n    \"page\": {{page}},\r\n    \"sort\": \"start\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Unavailabilities Parameter  Invalid - page",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7198795b-34f2-4206-a585-8a61a4dd7872",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that page error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors.page.min;  \r",
									"    pm.expect(error_message).to.eql(\"page must not be less than 1\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "abcfc888-6219-426e-b5cc-1e9170648946",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: UnavailabilityListInput!) {\r\n  unavailabilities(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": 0,\r\n    \"sort\": \"start\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Unavailabilities Parameter  Invalid - sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59465e58-f726-4a9a-9950-85c1e7efb3a7",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Invalid input\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is InternalServerError\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"InternalServerError\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 500\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9f60a68a-f7fd-4f1e-81c4-d72ce02da0fe",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: UnavailabilityListInput!) {\r\n  unavailabilities(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"!@#$%\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Unavailabilities Parameter  Invalid - order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4976db47-eb0c-4bbd-acd2-6cae048e6cbe",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Order\\\" enum\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7e28f6f3-b4ea-419a-affa-14e05058b434",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query($input: UnavailabilityListInput!) {\r\n  unavailabilities(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      description {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      start\r\n      end\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"start\",\r\n    \"order\": \"!@#$%^&*(\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Unavailability",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a26dac9-6bd4-4789-ab08-545902e28ff4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteUnavailability($id: ID!) {\r\n  deleteUnavailability(id: $id)\r\n}\r\n",
								"variables": "{\r\n    \"id\": \"{{unavailabilityId}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Unavailability Mandatory Field Blank - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ed36b46-8bb7-42cd-aa5d-2efe33701e20",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is 400\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that education error message is correct\", function () {\r",
									"    var error_education_message = jsonData.errors[0].extensions.errors.id.IsId;  \r",
									"    pm.expect(error_education_message).to.eql(\"Invalid ID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteUnavailability($id: ID!) {\r\n  deleteUnavailability(id: $id)\r\n}\r\n",
								"variables": "{\r\n    \"id\": \"\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Unavailability Mandatory Field Removed  - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c44cf582-8933-4077-943d-14272d4d69c0",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteUnavailability($id: ID!) {\r\n  deleteUnavailability(id: $id)\r\n}\r\n",
								"variables": "{\r\n   \r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Unavailability Parameter Mismatch - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d00a39e-3854-48e5-b8d2-bd2726d59cf1",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteUnavailability($id: ID!) {\r\n  deleteUnavailability(id: $id)\r\n}\r\n",
								"variables": "{\r\n    \"id1\": \"{{unavailabilityId}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Unavailability Parameter Invalid - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74339678-d29a-4740-932e-298396b4a22a",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that language error message is correct\", function () {\r",
									"    var error_education_message = jsonData.errors[0].extensions.errors.id.IsId;  \r",
									"    pm.expect(error_education_message).to.eql(\"Invalid ID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteUnavailability($id: ID!) {\r\n  deleteUnavailability(id: $id)\r\n}\r\n",
								"variables": "{\r\n    \"id\": \"!@#$%^&*\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"protocolProfileBehavior": {}
}
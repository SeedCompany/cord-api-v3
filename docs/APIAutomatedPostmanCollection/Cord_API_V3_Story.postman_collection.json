{
	"info": {
		"_postman_id": "696cb784-8bd4-4ac6-b933-47776b3afa9d",
		"name": "Cord_API_V3_Story",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Pre-req ( Session + Register + Login ) for Story",
			"item": [
				{
					"name": "Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "48f5ee07-8cfa-48a1-867a-b9c34b4a1817",
								"exec": [
									"var response = pm.response.json();\r",
									"pm.globals.set(\"token\", response.data.session.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Write your query or mutation here\r\nquery {\r\n  session(browser: false) {\r\n    user {\r\n      id,\r\n      email\r\n      {\r\n        value\r\n      }\r\n      realFirstName\r\n      {\r\n        value\r\n      }\r\n      createdAt\r\n      canDelete\r\n      displayLastName\r\n      {\r\n         value\r\n      }\r\n      \r\n      \r\n      \r\n    },\r\n    token\r\n  }\r\n}",
								"variables": ""
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd766ff9-bebb-47f8-84fb-532d3ef42ef2",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// This is safe check to prevent failing futher cases If the Root User is already Created\r",
									"if (jsonData.errors) {\r",
									"    if (jsonData.errors.length) return;\r",
									"}\r",
									"\r",
									"//Saving data for future use\r",
									"var id = jsonData.data.register.user.id;\r",
									"pm.globals.set(\"userid\", id);\r",
									"\r",
									"var user = JSON.stringify(jsonData.data.register.user);\r",
									"pm.globals.set(\"user_data\", user);\r",
									"\r",
									"var email = jsonData.data.register.user.email.value;\r",
									"pm.globals.set(\"email\", email);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0c1c5283-b1ef-4b4a-8c47-de76023d1ec1",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"realFirstName\", \"FirstName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"realLastName\", \"LastName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"email\", \"email\" + moment().format(\"DDMYYYYhhmmss\") + \"@test.com\");\r",
									"pm.globals.set(\"password\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"displayFirstName\", \"DisplayFirstName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"displayLastName\", \"DisplayLastName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"phone\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));\r",
									"\r",
									"var timezoneObject = {\r",
									"    \"name\": \"Europe/Andorra\",\r",
									"    \"lat\": 42.5,\r",
									"    \"long\": 1.5167,\r",
									"    \"countries\": [\r",
									"        {\r",
									"            \"code\": \"AD\",\r",
									"            \"name\": \"Andorra\",\r",
									"            \"zones\": [\r",
									"                {\r",
									"                    \"name\": \"Europe/Andorra\",\r",
									"                    \"lat\": 42.5,\r",
									"                    \"long\": 1.5167,\r",
									"                    \"countries\": [\r",
									"                        {\r",
									"                            \"code\": \"AD\",\r",
									"                            \"name\": \"Andorra\"\r",
									"                        }\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"};\r",
									"pm.globals.set('timezoneObject', JSON.stringify(timezoneObject));\r",
									"pm.globals.set(\"timezone\", timezoneObject.name);\r",
									"\r",
									"pm.globals.set(\"about\", \"I'm Tester\");\r",
									"\r",
									"pm.globals.set(\"userTitle\", \"Tester\");\r",
									"\r",
									"// Taking random value for the User status from pre-defined possible values\r",
									"var userStatusArray = ['Active','Disabled'];\r",
									"var randomNumber = Math.floor(Math.random()*userStatusArray.length);\r",
									"// pm.globals.set('userStatus', userStatusArray[randomNumber]);\r",
									"pm.globals.set(\"userStatus\", \"Active\");\r",
									"\r",
									"var userRolesArray = ['BibleTranslationLiaison',\r",
									"'Consultant',\r",
									"'ConsultantManager',\r",
									"'Controller',\r",
									"'Development',\r",
									"'ExecutiveDevelopmentRepresentative',\r",
									"'ExecutiveLeadership',\r",
									"'FieldOperationsDirector',\r",
									"'FieldPartner',\r",
									"'FinancialAnalyst',\r",
									"'Intern',\r",
									"'Liaison',\r",
									"'LeadFinancialAnalyst',\r",
									"'Mentor',\r",
									"'OfficeOfThePresident',\r",
									"'ProjectManager',\r",
									"'RegionalCommunicationsCoordinator',\r",
									"'RegionalDirector',\r",
									"'SupportingProjectManager',\r",
									"'Translator',\r",
									"'Writer'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random()*userRolesArray.length);\r",
									"pm.globals.set('userRoles', userRolesArray[randomNumber]);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation register($input: RegisterInput!) {\r\n  register(input: $input) {\r\n    user {\r\n      id\r\n      fullName\r\n      firstName\r\n      avatarLetters\r\n      createdAt\r\n      canDelete\r\n      email {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      phone {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      about {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      status {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      roles {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      title {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      timezone {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          name\r\n          lat\r\n          long\r\n          countries {\r\n            code\r\n            name\r\n            zones {\r\n              name\r\n              lat\r\n              long\r\n              countries {\r\n                code\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      unavailabilities {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          description {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          start\r\n          end\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      organizations {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          name {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          avatarLetters\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      education {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          degree {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          major {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          institution {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"realFirstName\": \"Piyush\",\r\n        \"realLastName\": \"Patel\",\r\n        \"email\": \"{{login_email}}\",\r\n        \"password\": \"{{login_password}}\",\r\n        \"displayFirstName\": \"{{displayFirstName}}\",\r\n        \"displayLastName\": \"{{displayLastName}}\",\r\n        \"phone\": \"{{phone}}\",\r\n        \"timezone\": \"{{timezone}}\",\r\n        \"status\": \"{{userStatus}}\",\r\n        \"title\": \"{{userTitle}}\",\r\n        \"roles\": \"{{userRoles}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2902fc17-712d-4d31-8a69-e2231abfca25",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var id = jsonData.data.login.user.id;",
									"pm.globals.set(\"userid\", id);",
									"",
									"var email = jsonData.data.login.user.email.value;",
									"pm.globals.set(\"email\", email);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0346d0ef-c820-40bb-a397-69da0a6e976f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation login($input: LoginInput!) {\r\n  login(input: $input) {\r\n    user {\r\n      id\r\n      fullName\r\n      firstName\r\n      avatarLetters\r\n      createdAt\r\n      canDelete\r\n      email {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      phone {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      about {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      status {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      roles {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      title {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      timezone {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          name\r\n          lat\r\n          long\r\n          countries {\r\n            code\r\n            name\r\n            zones {\r\n              name\r\n              lat\r\n              long\r\n              countries {\r\n                code\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      unavailabilities {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          description {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          start\r\n          end\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      organizations {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          name {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          avatarLetters\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      education {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          degree {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          major {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          institution {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n   \"input\": {\r\n      \"email\": \"{{login_email}}\",\r\n      \"password\": \"{{login_password}}\"\r\n   }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "be3ef384-39c1-4726-a9c8-87870fb5d635",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "022616b9-fc35-46de-b4c6-f6b939a9bbe0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Story",
			"item": [
				{
					"name": "Create Story Success - Same Book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d8293f5f-1db8-4a53-9c71-b87c4efff333",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"storyName\", \"StoryName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('storyScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('storyScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('storyScriptRefVerseStart', 4);\r",
									"\r",
									"let concatStringStart = `${pm.globals.get('storyScriptRefBookStart')} ${pm.globals.get('storyScriptRefChapterStart')}:${pm.globals.get('storyScriptRefVerseStart')}`\r",
									"\r",
									"pm.globals.set('storyScriptRefLabelStart',concatStringStart);\r",
									"\r",
									"pm.globals.set('storyScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('storyScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('storyScriptRefVerseEnd', 4);\r",
									"\r",
									"let concatStringEnd = `${pm.globals.get('storyScriptRefBookEnd')} ${pm.globals.get('storyScriptRefChapterEnd')}:${pm.globals.get('storyScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('storyScriptRefLabelEnd', concatStringEnd);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "85540a51-7975-4a60-bed4-646d7df9a63b",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"const moment = require('moment');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that story ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.createStory.story.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"\r",
									"    // Saving data for future use\r",
									"    pm.globals.set(\"storyId\", id);\r",
									"});\r",
									"\r",
									"// Saving whole Story Object to globals for future use\r",
									"var story = JSON.stringify(jsonData.data.createStory.story);\r",
									"pm.globals.set(\"story_data\", story);\r",
									"\r",
									"pm.test(\"Verify that story's createdAt is in Specific time format\", function () {\r",
									"    var time = jsonData.data.createStory.story.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story Name is same as requested\", function () {\r",
									"    var storyName = jsonData.data.createStory.story.name.value;\r",
									"    pm.expect(storyName).to.eql(pm.globals.get('storyName'));\r",
									"});\r",
									"\r",
									"//scriptureReferences\r",
									"\r",
									"\r",
									"pm.test(\"Verify that story scriptureReferences total verses is same as requested\", function () {\r",
									"    var totalVerses = jsonData.data.createStory.story.scriptureReferences.value[0].totalVerses;\r",
									"    pm.expect(totalVerses).to.be.above(0);\r",
									"});\r",
									"\r",
									"//Static data\r",
									"pm.test(\"Verify that story scriptureReferences start book is same as requested\", function () {\r",
									"    var startBook = jsonData.data.createStory.story.scriptureReferences.value[0].start.book;\r",
									"    pm.expect(startBook).to.eql(pm.globals.get('storyScriptRefBookStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story scriptureReferences start label is same as requested\", function () {\r",
									"    var startLabel = jsonData.data.createStory.story.scriptureReferences.value[0].start.label;\r",
									"    pm.expect(startLabel).to.eql(pm.globals.get('storyScriptRefLabelStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story scriptureReferences start chapter is same as requested\", function () {\r",
									"    var startChapter = jsonData.data.createStory.story.scriptureReferences.value[0].start.chapter;\r",
									"    pm.expect(startChapter).to.eql(pm.globals.get('storyScriptRefChapterStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story scriptureReferences start verse is same as requested\", function () {\r",
									"    var startVerse = jsonData.data.createStory.story.scriptureReferences.value[0].start.verse;\r",
									"    pm.expect(startVerse).to.eql(pm.globals.get('storyScriptRefVerseStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story scriptureReferences end book is same as requested\", function () {\r",
									"    var endBook = jsonData.data.createStory.story.scriptureReferences.value[0].end.book;\r",
									"    pm.expect(endBook).to.eql(pm.globals.get('storyScriptRefBookEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story scriptureReferences end label is same as requested\", function () {\r",
									"    var endLabel = jsonData.data.createStory.story.scriptureReferences.value[0].end.label;\r",
									"    pm.expect(endLabel).to.eql(pm.globals.get('storyScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story scriptureReferences end chapter is same as requested\", function () {\r",
									"    var endChapter = jsonData.data.createStory.story.scriptureReferences.value[0].end.chapter;\r",
									"    pm.expect(endChapter).to.eql(pm.globals.get('storyScriptRefChapterEnd'));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify story scriptureReferences label\", function () {\r",
									"    var label = jsonData.data.createStory.story.scriptureReferences.value[0].label;\r",
									"    pm.expect(label).to.eql(pm.globals.get('storyScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story scriptureReferences end verse is same as requested\", function () {\r",
									"    var endVerse = jsonData.data.createStory.story.scriptureReferences.value[0].end.verse;\r",
									"    pm.expect(endVerse).to.eql(pm.globals.get('storyScriptRefVerseEnd'));\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createStory($input: CreateStoryInput!) {\r\n  createStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      canDelete\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"story\": {\r\n            \"name\": \"{{storyName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{storyScriptRefBookStart}}\",\r\n                    \"chapter\": {{storyScriptRefChapterStart}},\r\n                    \"verse\": {{storyScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{storyScriptRefBookEnd}}\",\r\n                    \"chapter\": {{storyScriptRefChapterEnd}},\r\n                    \"verse\": {{storyScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Story Success - Diffrent Book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "17f7de53-1142-43f7-b50b-8998e1770613",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"storyName\", \"StoryName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('storyScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('storyScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('storyScriptRefVerseStart', 4);\r",
									"\r",
									"let concatStringStart = `${pm.globals.get('storyScriptRefBookStart')} ${pm.globals.get('storyScriptRefChapterStart')}:${pm.globals.get('storyScriptRefVerseStart')}`\r",
									"\r",
									"pm.globals.set('storyScriptRefLabelStart', concatStringStart);\r",
									"\r",
									"pm.globals.set('storyScriptRefBookEnd', \"Exodus\");\r",
									"\r",
									"pm.globals.set('storyScriptRefChapterEnd', 4);\r",
									"\r",
									"pm.globals.set('storyScriptRefVerseEnd', 5);\r",
									"\r",
									"let concatStringEnd = `${pm.globals.get('storyScriptRefBookEnd')} ${pm.globals.get('storyScriptRefChapterEnd')}:${pm.globals.get('storyScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('storyScriptRefLabelEnd', concatStringEnd);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3046f0f2-b680-46f1-86d5-4644c369d399",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"const moment = require('moment');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that story ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.createStory.story.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"\r",
									"    // Saving data for future use\r",
									"    pm.globals.set(\"storyId\", id);\r",
									"});\r",
									"\r",
									"// Saving whole Story Object to globals for future use\r",
									"var story = JSON.stringify(jsonData.data.createStory.story);\r",
									"pm.globals.set(\"story_data\", story);\r",
									"\r",
									"pm.test(\"Verify that story's createdAt is in Specific time format\", function () {\r",
									"    var time = jsonData.data.createStory.story.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story Name is same as requested\", function () {\r",
									"    var storyName = jsonData.data.createStory.story.name.value;\r",
									"    pm.expect(storyName).to.eql(pm.globals.get('storyName'));\r",
									"});\r",
									"\r",
									"//scriptureReferences\r",
									"pm.test(\"Verify that story scriptureReferences total verses is same as requested\", function () {\r",
									"    var totalVerses = jsonData.data.createStory.story.scriptureReferences.value[0].totalVerses;\r",
									"       pm.expect(totalVerses).to.be.above(0);\r",
									"});\r",
									"\r",
									"//Static data\r",
									"pm.test(\"Verify that story scriptureReferences start book is same as requested\", function () {\r",
									"    var startBook = jsonData.data.createStory.story.scriptureReferences.value[0].start.book;\r",
									"    pm.expect(startBook).to.eql(pm.globals.get('storyScriptRefBookStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story scriptureReferences start label is same as requested\", function () {\r",
									"    var startLabel = jsonData.data.createStory.story.scriptureReferences.value[0].start.label;\r",
									"    pm.expect(startLabel).to.eql(pm.globals.get('storyScriptRefLabelStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story scriptureReferences start chapter is same as requested\", function () {\r",
									"    var startChapter = jsonData.data.createStory.story.scriptureReferences.value[0].start.chapter;\r",
									"    pm.expect(startChapter).to.eql(pm.globals.get('storyScriptRefChapterStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story scriptureReferences start verse is same as requested\", function () {\r",
									"    var startVerse = jsonData.data.createStory.story.scriptureReferences.value[0].start.verse;\r",
									"    pm.expect(startVerse).to.eql(pm.globals.get('storyScriptRefVerseStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story scriptureReferences end book is same as requested\", function () {\r",
									"    var endBook = jsonData.data.createStory.story.scriptureReferences.value[0].end.book;\r",
									"    pm.expect(endBook).to.eql(pm.globals.get('storyScriptRefBookEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story scriptureReferences end label is same as requested\", function () {\r",
									"    var endLabel = jsonData.data.createStory.story.scriptureReferences.value[0].end.label;\r",
									"    pm.expect(endLabel).to.eql(pm.globals.get('storyScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story scriptureReferences end chapter is same as requested\", function () {\r",
									"    var endChapter = jsonData.data.createStory.story.scriptureReferences.value[0].end.chapter;\r",
									"    pm.expect(endChapter).to.eql(pm.globals.get('storyScriptRefChapterEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify story scriptureReferences label\", function () {\r",
									"    var label = jsonData.data.createStory.story.scriptureReferences.value[0].label;\r",
									"    var startLabel = jsonData.data.createStory.story.scriptureReferences.value[0].start.label;\r",
									"    var endLabel = jsonData.data.createStory.story.scriptureReferences.value[0].end.label;\r",
									"    var expectedLabel = startLabel + \"-\" + endLabel;\r",
									"    pm.expect(label).to.eql(expectedLabel);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story scriptureReferences end verse is same as requested\", function () {\r",
									"    var endVerse = jsonData.data.createStory.story.scriptureReferences.value[0].end.verse;\r",
									"    pm.expect(endVerse).to.eql(pm.globals.get('storyScriptRefVerseEnd'));\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createStory($input: CreateStoryInput!) {\r\n  createStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"story\": {\r\n            \"name\": \"{{storyName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"Genesis\",\r\n                    \"chapter\": {{storyScriptRefChapterStart}},\r\n                    \"verse\": {{storyScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"Exo\",\r\n                    \"chapter\": {{storyScriptRefChapterEnd}},\r\n                    \"verse\": {{storyScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  Story Mandatory Field Blank - Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7b53357e-435b-4158-9d82-60592c0380a0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "29f7619a-f40e-4c66-a79d-b8c1319510dd",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that minLength message is correct\", function () {\r",
									"    var minLength_message = jsonData.errors[0].extensions.errors['story.name'].minLength;\r",
									"    pm.expect(minLength_message).to.eql(\"name must be longer than or equal to 1 characters\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createStory($input: CreateStoryInput!) {\r\n  createStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"story\": {\r\n      \"name\": \"\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  Story Mandatory Field Removed  - Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2db55c2b-613d-4e88-9760-f22dcd6fc9de",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9583c245-528a-4bc5-80b6-cfa11ecd170c",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"name\\\" of required type \\\"String!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createStory($input: CreateStoryInput!) {\r\n  createStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"story\": {}\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create  Story Parameter Mismatch  - Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6f52b824-acc0-4878-9606-a47c12307f4e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b21c576c-211d-4c50-8b38-b683fed8f1ff",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Field \\\"name\\\" of required type \\\"String!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createStory($input: CreateStoryInput!) {\r\n  createStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"story\": {\r\n      \"name1\": \"{{storyName}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Story Parameter Mismatch - ScriptRef",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a08594c5-5a67-4f6a-9a82-bb3da431d4ef",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bc68cd38-9dc1-4a06-b30c-2208108c773a",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"CreateStory\\\". Did you mean \\\"scriptureReferences\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createStory($input: CreateStoryInput!) {\r\n  createStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"story\": {\r\n      \"name\": \"{{storyName}}\",\r\n      \"scriptureReferences1\": {\r\n        \"start\": {\r\n          \"book\": \"{{storyScriptRefBookStart}}\",\r\n          \"chapter\": {{storyScriptRefChapterStart}},\r\n          \"verse\": {{storyScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{storyScriptRefBookEnd}}\",\r\n          \"chapter\": {{storyScriptRefChapterEnd}},\r\n          \"verse\": {{storyScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Story Parameter Mismatch - ScriptRef start",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e9b56c6b-7c12-4cd0-8961-861384c27499",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "306ffc6e-5162-46d2-96c0-62fd0bfce32d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"start\\\" of required type \\\"ScriptureReferenceInput!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createStory($input: CreateStoryInput!) {\r\n  createStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"story\": {\r\n      \"name\": \"{{storyName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start1\": {\r\n          \"book\": \"{{storyScriptRefBookStart}}\",\r\n          \"chapter\": {{storyScriptRefChapterStart}},\r\n          \"verse\": {{storyScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{storyScriptRefBookEnd}}\",\r\n          \"chapter\": {{storyScriptRefChapterEnd}},\r\n          \"verse\": {{storyScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Story Parameter Mismatch - ScriptRef start book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "193be2c5-4f21-404e-be6e-458b9291e948",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2528c716-8440-414e-b60a-720719509083",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createStory($input: CreateStoryInput!) {\r\n  createStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"story\": {\r\n      \"name\": \"{{storyName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book1\": \"{{storyScriptRefBookStart}}\",\r\n          \"chapter\": {{storyScriptRefChapterStart}},\r\n          \"verse\": {{storyScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{storyScriptRefBookEnd}}\",\r\n          \"chapter\": {{storyScriptRefChapterEnd}},\r\n          \"verse\": {{storyScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Story Parameter Mismatch - ScriptRef start chapter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f28253e1-a599-45e0-93e0-254bfc9859a0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0361b0f3-d111-4b54-9bff-7731fd3453a3",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"ScriptureReferenceInput\\\". Did you mean \\\"chapter\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createStory($input: CreateStoryInput!) {\r\n  createStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"story\": {\r\n      \"name\": \"{{storyName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{storyScriptRefBookStart}}\",\r\n          \"chapter1\": {{storyScriptRefChapterStart}},\r\n          \"verse\": {{storyScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{storyScriptRefBookEnd}}\",\r\n          \"chapter\": {{storyScriptRefChapterEnd}},\r\n          \"verse\": {{storyScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Story Parameter Mismatch - ScriptRef start verse",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ca69e8cc-bdee-4918-87fb-4e424904cb0c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4b046f29-bbc7-4228-b1f0-2ecfca6f0859",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"ScriptureReferenceInput\\\". Did you mean \\\"verse\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createStory($input: CreateStoryInput!) {\r\n  createStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"story\": {\r\n      \"name\": \"{{storyName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{storyScriptRefBookStart}}\",\r\n          \"chapter\": {{storyScriptRefChapterStart}},\r\n          \"verse1\": {{storyScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{storyScriptRefBookEnd}}\",\r\n          \"chapter\": {{storyScriptRefChapterEnd}},\r\n          \"verse\": {{storyScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Story Parameter Mismatch - ScriptRef  end",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b91913c5-bff3-4be0-ab9d-21f77ca24c5d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "30be23f6-3acb-4ba8-b23a-e455c005bf70",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"end\\\" of required type \\\"ScriptureReferenceInput!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createStory($input: CreateStoryInput!) {\r\n  createStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"story\": {\r\n      \"name\": \"{{storyName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{storyScriptRefBookStart}}\",\r\n          \"chapter\": {{storyScriptRefChapterStart}},\r\n          \"verse\": {{storyScriptRefVerseStart}}\r\n        },\r\n        \"end1\": {\r\n          \"book\": \"{{storyScriptRefBookEnd}}\",\r\n          \"chapter\": {{storyScriptRefChapterEnd}},\r\n          \"verse\": {{storyScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Story Parameter Mismatch - ScriptRef  end book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "34daac00-f9f7-467d-8a72-466be5bcfcfc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1ddeb0ce-21a6-4e95-92a0-6fccaa7a21c6",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createStory($input: CreateStoryInput!) {\r\n  createStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"story\": {\r\n      \"name\": \"{{storyName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{storyScriptRefBookStart}}\",\r\n          \"chapter\": {{storyScriptRefChapterStart}},\r\n          \"verse\": {{storyScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book1\": \"{{storyScriptRefBookEnd}}\",\r\n          \"chapter\": {{storyScriptRefChapterEnd}},\r\n          \"verse\": {{storyScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Story Parameter Mismatch - ScriptRef  end chapter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "65656ea5-3d64-44cc-ad69-908f01f9d5c9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e41cae30-5243-4e7a-92ae-aa285d1b6bde",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"ScriptureReferenceInput\\\". Did you mean \\\"chapter\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createStory($input: CreateStoryInput!) {\r\n  createStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"story\": {\r\n      \"name\": \"{{storyName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{storyScriptRefBookStart}}\",\r\n          \"chapter\": {{storyScriptRefChapterStart}},\r\n          \"verse\": {{storyScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{storyScriptRefBookEnd}}\",\r\n          \"chapter1\": {{storyScriptRefChapterEnd}},\r\n          \"verse\": {{storyScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Story Parameter Mismatch - ScriptRef  end verse",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "748c4b4d-4ab2-4020-868a-a2a34b167fe4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "17b943cd-6bf4-4fa7-b2fe-2f3d69f71d90",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"ScriptureReferenceInput\\\". Did you mean \\\"verse\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createStory($input: CreateStoryInput!) {\r\n  createStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"story\": {\r\n      \"name\": \"{{storyName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{storyScriptRefBookStart}}\",\r\n          \"chapter\": {{storyScriptRefChapterStart}},\r\n          \"verse\": {{storyScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{storyScriptRefBookEnd}}\",\r\n          \"chapter\": {{storyScriptRefChapterEnd}},\r\n          \"verse1\": {{storyScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Get story by Id ( Create Story )",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6a640caf-6c2c-4e2a-b9f4-d9f43c7c91a5",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"storyName\", \"StoryName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('storyScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('storyScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('storyScriptRefVerseStart', 4);\r",
									"\r",
									"let concatStringStart = `${pm.globals.get('storyScriptRefBookStart')} ${pm.globals.get('storyScriptRefChapterStart')}:${pm.globals.get('storyScriptRefVerseStart')}`\r",
									"\r",
									"pm.globals.set('storyScriptRefLabelStart',concatStringStart);\r",
									"\r",
									"pm.globals.set('storyScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('storyScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('storyScriptRefVerseEnd', 4);\r",
									"\r",
									"let concatStringEnd = `${pm.globals.get('storyScriptRefBookEnd')} ${pm.globals.get('storyScriptRefChapterEnd')}:${pm.globals.get('storyScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('storyScriptRefLabelEnd', concatStringEnd);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c147e29d-3bbd-4110-89c2-bcc33f2c26dc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createStory($input: CreateStoryInput!) {\r\n  createStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"story\": {\r\n            \"name\": \"{{storyName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{storyScriptRefBookStart}}\",\r\n                    \"chapter\": {{storyScriptRefChapterStart}},\r\n                    \"verse\": {{storyScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{storyScriptRefBookEnd}}\",\r\n                    \"chapter\": {{storyScriptRefChapterEnd}},\r\n                    \"verse\": {{storyScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Story By Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6e52257e-0e65-4285-9801-ea545de98575",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"storyName\", \"StoryName\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ed7c0242-d4fe-438d-bb83-1bab5f40890a",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var story_data = JSON.parse(pm.variables.get(\"story_data\"));\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verifying story ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.story.id;  \r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"// Verifying returned story info with recently stored story info\r",
									"pm.test(\"Verifying story's createdAt\", function () {\r",
									"    var createdAt = jsonData.data.story.createdAt;\r",
									"    pm.expect(createdAt).to.eql(story_data.createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying story Name\", function () {\r",
									"    var storyName = jsonData.data.story.name.value; \r",
									"    pm.expect(storyName).to.eql(story_data.name.value);\r",
									"});\r",
									"\r",
									"\r",
									"//scriptureReferences\r",
									"pm.test(\"Verifying story scriptureReferences start book\", function () {\r",
									"    var startBook = jsonData.data.story.scriptureReferences.value[0].start.book; \r",
									"    pm.expect(startBook).to.eql(story_data.scriptureReferences.value[0].start.book); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying story scriptureReferences start chapter\", function () {\r",
									"    var startChapter = jsonData.data.story.scriptureReferences.value[0].start.chapter; \r",
									"    pm.expect(startChapter).to.eql(story_data.scriptureReferences.value[0].start.chapter); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying story scriptureReferences start verse\", function () {\r",
									"    var startVerse = jsonData.data.story.scriptureReferences.value[0].start.verse; \r",
									"    pm.expect(startVerse).to.eql(story_data.scriptureReferences.value[0].start.verse); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying story scriptureReferences start book name\", function () {\r",
									"    var startBookName = jsonData.data.story.scriptureReferences.value[0].start.bookName; \r",
									"    pm.expect(startBookName).to.eql(story_data.scriptureReferences.value[0].start.bookName); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying story scriptureReferences start label\", function () {\r",
									"    var startLabel = jsonData.data.story.scriptureReferences.value[0].start.label; \r",
									"    pm.expect(startLabel).to.eql(story_data.scriptureReferences.value[0].start.label); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying story scriptureReferences end book\", function () {\r",
									"    var endBook = jsonData.data.story.scriptureReferences.value[0].start.book; \r",
									"    pm.expect(endBook).to.eql(story_data.scriptureReferences.value[0].start.book); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying story scriptureReferences end chapter\", function () {\r",
									"    var endChapter = jsonData.data.story.scriptureReferences.value[0].end.chapter; \r",
									"    pm.expect(endChapter).to.eql(story_data.scriptureReferences.value[0].end.chapter); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying story scriptureReferences end verse\", function () {\r",
									"    var endVerse = jsonData.data.story.scriptureReferences.value[0].end.verse; \r",
									"    pm.expect(endVerse).to.eql(story_data.scriptureReferences.value[0].end.verse); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying story scriptureReferences end book name\", function () {\r",
									"    var endBookName = jsonData.data.story.scriptureReferences.value[0].end.bookName; \r",
									"    pm.expect(endBookName).to.eql(story_data.scriptureReferences.value[0].end.bookName); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying story scriptureReferences end label\", function () {\r",
									"    var endLabel = jsonData.data.story.scriptureReferences.value[0].end.label; \r",
									"    pm.expect(endLabel).to.eql(story_data.scriptureReferences.value[0].end.label); \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verifying story scriptureReferences label\", function () {\r",
									"    var label = jsonData.data.story.scriptureReferences.value[0].label; \r",
									"    pm.expect(label).to.eql(story_data.scriptureReferences.value[0].label); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying story scriptureReferences total verses\", function () {\r",
									"    var totalVerses = jsonData.data.story.scriptureReferences.value[0].totalVerses; \r",
									"    pm.expect(totalVerses).to.eql(story_data.scriptureReferences.value[0].totalVerses); \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query story($id: ID!) {\r\n  story(id: $id) {\r\n    id\r\n    createdAt\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n    name {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"{{storyId}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Story By Id Mandatory Field Blank - id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0b20f112-338b-4515-9607-d1a0a2eb8ec3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3b92ee0f-1e02-4d66-b4a2-ce049579a484",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is 400\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that language error message is correct\", function () {\r",
									"    var error_language_message = jsonData.errors[0].extensions.errors.id.IsId;  \r",
									"    pm.expect(error_language_message).to.eql(\"Invalid ID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query story($id: ID!) {\r\n  story(id: $id) {\r\n    id\r\n    createdAt\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n    name {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Story By Id Mandatory Field Removed - id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ed5b9ffc-1659-4fb4-a6cd-d9cc972ba929",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "870085bf-3b34-4958-b79f-31a9dca5d844",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query story($id: ID!) {\r\n  story(id: $id) {\r\n    id\r\n    createdAt\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n    name {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Story By Id Mandatory Parameter Mismatch - id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d4e989bf-c005-44b7-b7d9-32db488b0bb9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a80a7ba4-855a-4b90-bd71-5694cfa77486",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query story($id: ID!) {\r\n  story(id: $id) {\r\n    id\r\n    createdAt\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n    name {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id1\": \"{{storyId}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Story By Id Mandatory Parameter Invalid - id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "23a2fe03-b2ac-4ddc-9710-d4211918c610",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "de2bc813-55f9-40d4-a76c-20303fe7f9d3",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is 400\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story error message is correct\", function () {\r",
									"    var error_story_message = jsonData.errors[0].extensions.errors.id.IsId;  \r",
									"    pm.expect(error_story_message).to.eql(\"Invalid ID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query story($id: ID!) {\r\n  story(id: $id) {\r\n    id\r\n    createdAt\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n    name {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"!@#$%^\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Story Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6e5e789c-fb9c-4547-8be7-d08985f084aa",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"storyName\", \"StoryName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('storyScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('storyScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('storyScriptRefVerseStart', 4);\r",
									"\r",
									"let concatStringStart = `${pm.globals.get('storyScriptRefBookStart')} ${pm.globals.get('storyScriptRefChapterStart')}:${pm.globals.get('storyScriptRefVerseStart')}`\r",
									"\r",
									"pm.globals.set('storyScriptRefLabelStart',concatStringStart);\r",
									"\r",
									"pm.globals.set('storyScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('storyScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('storyScriptRefVerseEnd', 4);\r",
									"\r",
									"let concatStringEnd = `${pm.globals.get('storyScriptRefBookEnd')} ${pm.globals.get('storyScriptRefChapterEnd')}:${pm.globals.get('storyScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('storyScriptRefLabelEnd', concatStringEnd);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6b029ffc-cddd-447f-80d5-c9640d1e3b1f",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var story_data = JSON.parse(pm.variables.get(\"story_data\"));\r",
									"const moment = require('moment');\r",
									"var lodash = require('lodash');\r",
									"\r",
									"// get story object first having same id as recently updated story's id\r",
									"var myStory = lodash.find(jsonData.data.updateStory.story, ['id', story_data.id]);\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that story ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateStory.story.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story's createdAt is in Specific time format\", function () {\r",
									"    var time = jsonData.data.updateStory.story.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated story name is same as requested\", function () {\r",
									"    var name = jsonData.data.updateStory.story.name.value;\r",
									"    pm.expect(name).to.eql(pm.globals.get('storyName'));\r",
									"});\r",
									"\r",
									"\r",
									"//scriptureReferences\r",
									"pm.test(\"Verify that updated story scriptureReferences start book is same as requested\", function () {\r",
									"    var startBook = jsonData.data.updateStory.story.scriptureReferences.value[0].start.book;\r",
									"    pm.expect(startBook).to.eql(pm.globals.get('storyScriptRefBookStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated story scriptureReferences start chapter is same as requested\", function () {\r",
									"    var startChapter = jsonData.data.updateStory.story.scriptureReferences.value[0].start.chapter;\r",
									"    pm.expect(startChapter).to.eql(pm.globals.get('storyScriptRefChapterStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated story scriptureReferences start verse is same as requested\", function () {\r",
									"    var startVerse = jsonData.data.updateStory.story.scriptureReferences.value[0].start.verse;\r",
									"    pm.expect(startVerse).to.eql(pm.globals.get('storyScriptRefVerseStart'));\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify that updated story scriptureReferences start label is same as requested\", function () {\r",
									"    var startLabel = jsonData.data.updateStory.story.scriptureReferences.value[0].start.label;\r",
									"    pm.expect(startLabel).to.eql(pm.globals.get('storyScriptRefLabelStart'));\r",
									"});\r",
									"\r",
									"//scriptureReferences\r",
									"pm.test(\"Verify that updated story scriptureReferences end book is same as requested\", function () {\r",
									"    var endBook = jsonData.data.updateStory.story.scriptureReferences.value[0].end.book;\r",
									"    pm.expect(endBook).to.eql(pm.globals.get('storyScriptRefBookEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated story scriptureReferences end chapter is same as requested\", function () {\r",
									"    var endChapter = jsonData.data.updateStory.story.scriptureReferences.value[0].end.chapter;\r",
									"    pm.expect(endChapter).to.eql(pm.globals.get('storyScriptRefChapterEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated story scriptureReferences end verse is same as requested\", function () {\r",
									"    var endVerse = jsonData.data.updateStory.story.scriptureReferences.value[0].end.verse;\r",
									"    pm.expect(endVerse).to.eql(pm.globals.get('storyScriptRefVerseEnd'));\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify that updated story scriptureReferences end label is same as requested\", function () {\r",
									"    var endlabel = jsonData.data.updateStory.story.scriptureReferences.value[0].end.label;\r",
									"    pm.expect(endlabel).to.eql(pm.globals.get('storyScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"//static\r",
									"pm.test(\"Verify that updated story scriptureReferences label is same as requested\", function () {\r",
									"    var label = jsonData.data.updateStory.story.scriptureReferences.value[0].label;\r",
									"    pm.expect(label).to.eql(pm.globals.get('storyScriptRefLabelStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated story scriptureReferences total verses is same as requested\", function () {\r",
									"    var totalVerses = jsonData.data.updateStory.story.scriptureReferences.value[0].totalVerses;\r",
									"    pm.expect(totalVerses).to.be.above(0);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateStory($input: UpdateStoryInput!) {\r\n  updateStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"story\": {\r\n            \"id\": \"{{storyId}}\",\r\n            \"name\": \"{{storyName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{storyScriptRefBookStart}}\",\r\n                    \"chapter\": {{storyScriptRefChapterStart}},\r\n                    \"verse\": {{storyScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{storyScriptRefBookEnd}}\",\r\n                    \"chapter\": {{storyScriptRefChapterEnd}},\r\n                    \"verse\": {{storyScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Story Success - Only Required Inputs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9c0caac1-a1d0-47d5-b6fe-b4e2a3b46e4e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e962d72b-ba11-42f4-bd0b-eba71ba8da5f",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var story_data = JSON.parse(pm.variables.get(\"story_data\"));\r",
									"const moment = require('moment');\r",
									"var lodash = require('lodash');\r",
									"\r",
									"// get story object first having same id as recently updated story's id\r",
									"var myStory = lodash.find(jsonData.data.updateStory.story, ['id', story_data.id]);\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that story ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateStory.story.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story's createdAt is in Specific time format\", function () {\r",
									"    var time = jsonData.data.updateStory.story.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated story name is same as requested\", function () {\r",
									"    var name = jsonData.data.updateStory.story.name.value;\r",
									"    pm.expect(name).to.eql(pm.globals.get('storyName'));\r",
									"});\r",
									"\r",
									"//scriptureReferences\r",
									"pm.test(\"Verify that updated story scriptureReferences start book is same as requested\", function () {\r",
									"    var startBook = jsonData.data.updateStory.story.scriptureReferences.value[0].start.book;\r",
									"    pm.expect(startBook).to.eql(pm.globals.get('storyScriptRefBookStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated story scriptureReferences start chapter is same as requested\", function () {\r",
									"    var startChapter = jsonData.data.updateStory.story.scriptureReferences.value[0].start.chapter;\r",
									"    pm.expect(startChapter).to.eql(pm.globals.get('storyScriptRefChapterStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated story scriptureReferences start verse is same as requested\", function () {\r",
									"    var startVerse = jsonData.data.updateStory.story.scriptureReferences.value[0].start.verse;\r",
									"    pm.expect(startVerse).to.eql(pm.globals.get('storyScriptRefVerseStart'));\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify that updated story scriptureReferences start label is same as requested\", function () {\r",
									"    var startLabel = jsonData.data.updateStory.story.scriptureReferences.value[0].start.label;\r",
									"    pm.expect(startLabel).to.eql(pm.globals.get('storyScriptRefLabelStart'));\r",
									"});\r",
									"\r",
									"//scriptureReferences\r",
									"pm.test(\"Verify that updated story scriptureReferences end book is same as requested\", function () {\r",
									"    var endBook = jsonData.data.updateStory.story.scriptureReferences.value[0].end.book;\r",
									"    pm.expect(endBook).to.eql(pm.globals.get('storyScriptRefBookEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated story scriptureReferences end chapter is same as requested\", function () {\r",
									"    var endChapter = jsonData.data.updateStory.story.scriptureReferences.value[0].end.chapter;\r",
									"    pm.expect(endChapter).to.eql(pm.globals.get('storyScriptRefChapterEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated story scriptureReferences end verse is same as requested\", function () {\r",
									"    var endVerse = jsonData.data.updateStory.story.scriptureReferences.value[0].end.verse;\r",
									"    pm.expect(endVerse).to.eql(pm.globals.get('storyScriptRefVerseEnd'));\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify that updated story scriptureReferences end label is same as requested\", function () {\r",
									"    var endlabel = jsonData.data.updateStory.story.scriptureReferences.value[0].end.label;\r",
									"    pm.expect(endlabel).to.eql(pm.globals.get('storyScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"//static\r",
									"pm.test(\"Verify that updated story scriptureReferences label is same as requested\", function () {\r",
									"    var label = jsonData.data.updateStory.story.scriptureReferences.value[0].label;\r",
									"    pm.expect(label).to.eql(pm.globals.get('storyScriptRefLabelStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated story scriptureReferences total verses is same as requested\", function () {\r",
									"    var totalVerses = jsonData.data.updateStory.story.scriptureReferences.value[0].totalVerses;\r",
									"     pm.expect(totalVerses).to.be.above(0);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateStory($input: UpdateStoryInput!) {\r\n  updateStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"story\": {\r\n      \"id\": \"{{storyId}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Story  Mandatory Field Removed - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6a126974-f275-4978-86ac-f716b1784d2c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ef42a7a9-c81d-4a2b-94f1-47e49b390ce5",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Field \\\"id\\\" of required type \\\"ID!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateStory($input: UpdateStoryInput!) {\r\n  updateStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"story\": {\r\n            \"name\": \"{{storyName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{storyScriptRefBookStart}}\",\r\n                    \"chapter\": {{storyScriptRefChapterStart}},\r\n                    \"verse\": {{storyScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{storyScriptRefBookEnd}}\",\r\n                    \"chapter\": {{storyScriptRefChapterEnd}},\r\n                    \"verse\": {{storyScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Story  Mandatory Field Blank - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0c9b3361-00fe-4e38-a46c-987b2306bd46",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e17b2bd8-4dc2-44a3-9e54-54aa53ea0012",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is 400\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors['story.id'].IsId;\r",
									"    pm.expect(error_message).to.eql(\"Invalid ID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateStory($input: UpdateStoryInput!) {\r\n  updateStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"story\": {\r\n            \"id\": \"\",\r\n            \"name\": \"{{storyName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{storyScriptRefBookStart}}\",\r\n                    \"chapter\": {{storyScriptRefChapterStart}},\r\n                    \"verse\": {{storyScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{storyScriptRefBookEnd}}\",\r\n                    \"chapter\": {{storyScriptRefChapterEnd}},\r\n                    \"verse\": {{storyScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Story  Mandatory Field Removed - Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "af9b4549-1680-428f-aef4-9d4b92162be5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8084ec02-a98a-4408-be30-018abb253e48",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that story ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateStory.story.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated story name is equal to previous value\", function () {\r",
									"    var name = jsonData.data.updateStory.story.name.value;\r",
									"    pm.expect(name).to.eql(pm.globals.get('storyName'));\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateStory($input: UpdateStoryInput!) {\r\n  updateStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"story\": {\r\n            \"id\": \"{{storyId}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{storyScriptRefBookStart}}\",\r\n                    \"chapter\": {{storyScriptRefChapterStart}},\r\n                    \"verse\": {{storyScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{storyScriptRefBookEnd}}\",\r\n                    \"chapter\": {{storyScriptRefChapterEnd}},\r\n                    \"verse\": {{storyScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Story  Mandatory Field Blank - Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bddc9910-e69c-43d0-8f0c-4c55f4a302b8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "faa4516c-ea04-4907-8bb9-50a7fab0b62e",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is 400\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story error message is correct\", function () {\r",
									"    var error_story_message = jsonData.errors[0].extensions.errors['story.name'].minLength;  \r",
									"    pm.expect(error_story_message).to.eql(\"name must be longer than or equal to 1 characters\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateStory($input: UpdateStoryInput!) {\r\n  updateStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"story\": {\r\n            \"id\": \"{{storyId}}\",\r\n            \"name\": \"\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{storyScriptRefBookStart}}\",\r\n                    \"chapter\": {{storyScriptRefChapterStart}},\r\n                    \"verse\": {{storyScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{storyScriptRefBookEnd}}\",\r\n                    \"chapter\": {{storyScriptRefChapterEnd}},\r\n                    \"verse\": {{storyScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Story Parameter Invalid - id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "614f461b-d3cc-43ef-a2aa-fa65b135d822",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c07f7e3a-ea2f-445f-a7e7-36f4a89ac9b4",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_code).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error languageID message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors['story.id'].IsId;  \r",
									"    pm.expect(error_message).to.include(\"Invalid ID\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateStory($input: UpdateStoryInput!) {\r\n  updateStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"story\": {\r\n            \"id\": \"!@#$%^\",\r\n            \"name\": \"{{storyName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{storyScriptRefBookStart}}\",\r\n                    \"chapter\": {{storyScriptRefChapterStart}},\r\n                    \"verse\": {{storyScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{storyScriptRefBookEnd}}\",\r\n                    \"chapter\": {{storyScriptRefChapterEnd}},\r\n                    \"verse\": {{storyScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Story Parameter Mismatch- id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4007d2a0-f455-4402-8183-606c97f7bba5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "14439b8a-03c5-4bd2-839e-2777b6974e34",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Field \\\"id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateStory($input: UpdateStoryInput!) {\r\n  updateStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"story\": {\r\n            \"id1\": \"{{storyId}}\",\r\n            \"name\": \"{{storyName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{storyScriptRefBookStart}}\",\r\n                    \"chapter\": {{storyScriptRefChapterStart}},\r\n                    \"verse\": {{storyScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{storyScriptRefBookEnd}}\",\r\n                    \"chapter\": {{storyScriptRefChapterEnd}},\r\n                    \"verse\": {{storyScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Story Parameter Mismatch- Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "42bf074f-df15-48df-bc6c-312c6339f202",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4977ec23-89c3-4d09-8e40-8c4729c72bf5",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"     pm.expect(error_message).to.include(\"is not defined by type \\\"UpdateStory\\\". Did you mean \\\"name\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateStory($input: UpdateStoryInput!) {\r\n  updateStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"story\": {\r\n            \"id\": \"{{storyId}}\",\r\n            \"name1\": \"{{storyName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{storyScriptRefBookStart}}\",\r\n                    \"chapter\": {{storyScriptRefChapterStart}},\r\n                    \"verse\": {{storyScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{storyScriptRefBookEnd}}\",\r\n                    \"chapter\": {{storyScriptRefChapterEnd}},\r\n                    \"verse\": {{storyScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Get All  story ( Create Story )",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5e9cb04e-2062-4591-99c0-cf9f104e8b9c",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"storyName\", \"StoryName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('storyScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('storyScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('storyScriptRefVerseStart', 4);\r",
									"\r",
									"let concatStringStart = `${pm.globals.get('storyScriptRefBookStart')} ${pm.globals.get('storyScriptRefChapterStart')}:${pm.globals.get('storyScriptRefVerseStart')}`\r",
									"\r",
									"pm.globals.set('storyScriptRefLabelStart',concatStringStart);\r",
									"\r",
									"pm.globals.set('storyScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('storyScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('storyScriptRefVerseEnd', 4);\r",
									"\r",
									"let concatStringEnd = `${pm.globals.get('storyScriptRefBookEnd')} ${pm.globals.get('storyScriptRefChapterEnd')}:${pm.globals.get('storyScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('storyScriptRefLabelEnd', concatStringEnd);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1d532aca-bc32-4d88-befb-1157c338ea12",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"//Test Specific\r",
									"var id = jsonData.data.createStory.story.id;\r",
									"pm.globals.set(\"storyId\", id);\r",
									"\r",
									"// Saving whole Film Object to globals for future use\r",
									"var story = JSON.stringify(jsonData.data.createStory.story);\r",
									"pm.globals.set(\"story_data\", story);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createStory($input: CreateStoryInput!) {\r\n  createStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"story\": {\r\n      \"name\": \"{{storyName}}\",\r\n      \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{storyScriptRefBookStart}}\",\r\n                    \"chapter\": {{storyScriptRefChapterStart}},\r\n                    \"verse\": {{storyScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{storyScriptRefBookEnd}}\",\r\n                    \"chapter\": {{storyScriptRefChapterEnd}},\r\n                    \"verse\": {{storyScriptRefVerseEnd}}\r\n                }\r\n            }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stories  Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c6aa7c88-481f-44a9-9b1f-21cb9276e2a7",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "39ed81f6-8461-40a3-8b22-801d154d37c1",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var story_data = JSON.parse(pm.variables.get(\"story_data\")); // Get stored story object\r",
									"const moment = require('moment');\r",
									"var lodash = require('lodash');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - Pagination\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.stories.total;\r",
									"    pm.expect(total).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that hasMore is correct\", function () {\r",
									"    var total = jsonData.data.stories.total;\r",
									"    var hasMore = jsonData.data.stories.hasMore;\r",
									"    if (Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) < total) {\r",
									"        pm.expect(hasMore).to.eql(true);\r",
									"    } else {\r",
									"        pm.expect(hasMore).to.eql(false);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that number of items returned are exact\", function () {\r",
									"    var total = jsonData.data.stories.total;                  // total returned in response\r",
									"    var returneditems = jsonData.data.stories.items.length;   // no. of items returned in response array\r",
									"    var itemCount = Number(pm.globals.get('itemCount'));    // no. of items per page\r",
									"    var page = Number(pm.globals.get('page'));              // page number\r",
									"    var expectedItems = itemCount * page;                   // items we are expecting\r",
									"\r",
									"    if (expectedItems <= total) {\r",
									"        pm.expect(returneditems).to.eql(itemCount);\r",
									"    } else {\r",
									"        if ((expectedItems - total) < itemCount) {\r",
									"            var lastItems = total - ((itemCount * (page - 1)));   // items in last page\r",
									"            pm.expect(returneditems).to.eql(lastItems);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"// var myStory = lodash.find(jsonData.data.stories.items, ['id', story_data.id]);\r",
									"// var isEmpty = _.isEmpty(myStory);\r",
									"// if (isEmpty) { } else {\r",
									"//     pm.globals.set(\"page\", 1);  // Set page to 1 if total <= itemCount\r",
									"//     return;\r",
									"// }\r",
									"\r",
									"/**\r",
									" * Setting up 'page' number to be used in next request\r",
									" * For locating recently created Object position on Specific page\r",
									" */\r",
									"var total = jsonData.data.stories.total;\r",
									"var itemCount = Number(pm.globals.get('itemCount'));\r",
									"\r",
									"if (total > itemCount) {\r",
									"\r",
									"    if ((total % itemCount) == 0) {\r",
									"        var pageToset = total / itemCount;\r",
									"        pm.globals.set(\"page\", pageToset);\r",
									"    } else {\r",
									"        var pageToset = Math.floor(total / itemCount) + 1;\r",
									"        pm.globals.set(\"page\", pageToset);\r",
									"    }\r",
									"\r",
									"} else {\r",
									"    pm.globals.set(\"page\", 1);  // Set page to 1 if total <= itemCount\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stories($input: StoryListInput!) {\r\n  stories(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stories  Success - item Object",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dfdeca87-c77f-4936-bc07-635abd4d161b",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"// Page is set from previous request test script based on total\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "80a1646e-2fe2-4fc1-8b9a-7caf946e244d",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var story_data = JSON.parse(pm.variables.get(\"story_data\")); // Get stored story object\r",
									"const moment = require('moment');\r",
									"var lodash = require('lodash');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - Pagination\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.stories.total;\r",
									"    pm.expect(total).to.be.above(0);\r",
									"});\r",
									"\r",
									"/**\r",
									" * Verifying recently created stories information with stories object returned within items array\r",
									" */\r",
									"\r",
									"// get stories object first having same id as recently created stories id\r",
									"var myStory = lodash.find(jsonData.data.stories.items, ['id', story_data.id]);\r",
									"\r",
									"pm.test(\"Verify that recently created stories ID is not blank or null\", function () {\r",
									"    var id = myStory.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created stories createdAt is in Specific time format\", function () {\r",
									"    var time = myStory.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created stories id\", function () {\r",
									"    var id = myStory.id;\r",
									"    pm.expect(id).to.eql(story_data.id);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created stories name\", function () {\r",
									"    var name = myStory.name.value;\r",
									"    pm.expect(name).to.eql(story_data.name.value);\r",
									"});\r",
									"\r",
									"\r",
									"//scriptureReferences\r",
									"pm.test(\"Verifying recently created stories scriptureReferences start book\", function () {\r",
									"    var startBook = myStory.scriptureReferences.value[0].start.book;\r",
									"    pm.expect(startBook).to.eql(story_data.scriptureReferences.value[0].start.book);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created stories scriptureReferences start chapter\", function () {\r",
									"    var startChapter = myStory.scriptureReferences.value[0].start.chapter;\r",
									"    pm.expect(startChapter).to.eql(story_data.scriptureReferences.value[0].start.chapter);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created stories scriptureReferences start verse\", function () {\r",
									"    var startVerse = myStory.scriptureReferences.value[0].start.verse;\r",
									"    pm.expect(startVerse).to.eql(story_data.scriptureReferences.value[0].start.verse);\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verifying recently created stories scriptureReferences start label\", function () {\r",
									"    var startLabel = myStory.scriptureReferences.value[0].start.label;\r",
									"    pm.expect(startLabel).to.eql(story_data.scriptureReferences.value[0].start.label);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created stories scriptureReferences end book\", function () {\r",
									"    var endBook = myStory.scriptureReferences.value[0].end.book;\r",
									"    pm.expect(endBook).to.eql(story_data.scriptureReferences.value[0].end.book);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created stories scriptureReferences end chapter\", function () {\r",
									"    var endChapter = myStory.scriptureReferences.value[0].end.chapter;\r",
									"    pm.expect(endChapter).to.eql(story_data.scriptureReferences.value[0].end.chapter);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created stories scriptureReferences end verse\", function () {\r",
									"    var endVerse = myStory.scriptureReferences.value[0].end.verse;\r",
									"    pm.expect(endVerse).to.eql(story_data.scriptureReferences.value[0].end.verse);\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verifying recently created stories scriptureReferences end label\", function () {\r",
									"    var endLabel = myStory.scriptureReferences.value[0].end.label;\r",
									"    pm.expect(endLabel).to.eql(story_data.scriptureReferences.value[0].end.label);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created stories scriptureReferences  label\", function () {\r",
									"    var label = myStory.scriptureReferences.value[0].label;\r",
									"    pm.expect(label).to.eql(story_data.scriptureReferences.value[0].label);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created stories scriptureReferences  totalVerses\", function () {\r",
									"    var totalVerses = myStory.scriptureReferences.value[0].totalVerses;\r",
									"    pm.expect(totalVerses).to.eql(story_data.scriptureReferences.value[0].totalVerses);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stories($input: StoryListInput!) {\r\n  stories(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stories Success - total",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f9423e49-48d0-4445-acc8-58a108d46c1b",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "15821a26-08eb-4dfb-80c0-0fd6c4bcd2c4",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - total\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.stories.total;  \r",
									"    pm.expect(total).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stories($input: StoryListInput!) {\r\n  stories(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stories Success - hasmore- True",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2172c5c9-c238-4a51-ac0a-c4d434b0df02",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "12bb8562-1b61-4397-9c8e-d8928ab982bf",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - hasMore\r",
									"pm.test(\"Verify that hasMore is true Only when story items are still available\", function () {\r",
									"    var total = jsonData.data.stories.total;\r",
									"    var hasMore = jsonData.data.stories.hasMore;  \r",
									"    if(Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) < total){\r",
									"        pm.expect(hasMore).to.eql(true);\r",
									"    } else {\r",
									"        pm.expect(hasMore).to.eql(false);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stories($input: StoryListInput!) {\r\n  stories(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stories Success - hasmore- False",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ffc9120-c52a-4784-be96-70748dfd2080",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bee5fba9-03ee-49a2-9ebb-c840c30fd4b7",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - hasMore\r",
									"pm.test(\"Verify that hasMore is false Only when no more story items available\", function () {\r",
									"    var total = jsonData.data.stories.total;\r",
									"    var hasMore = jsonData.data.stories.hasMore;  \r",
									"    if(Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) >= total){\r",
									"        pm.expect(hasMore).to.eql(false);\r",
									"    } else{\r",
									"        pm.expect(hasMore).to.eql(true);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that story ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.stories.items[0].id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stories($input: StoryListInput!) {\r\n  stories(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stories Success - Items",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "00352f73-b900-429f-b5ef-d9a6bef21c33",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c2da19a5-0ce5-4884-9f78-38aa68e3dfb8",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - no. of items are exact\r",
									"pm.test(\"Verify that number of items returned are exact\", function () {\r",
									"    var total = jsonData.data.stories.total;                  // total returned in response\r",
									"    var returneditems = jsonData.data.stories.items.length;   // no. of items returned in response array\r",
									"    var itemCount = Number(pm.globals.get('itemCount'));    // no. of items per page\r",
									"    var page = Number(pm.globals.get('page'));              // page number\r",
									"    var expectedItems = itemCount * page;                   // items we are expecting\r",
									"\r",
									"    if (expectedItems <= total) {\r",
									"        pm.expect(returneditems).to.eql(itemCount);\r",
									"    } else {\r",
									"        if ((expectedItems - total) < itemCount) {\r",
									"            var lastItems = total - ((itemCount * (page - 1)));   // items in last page\r",
									"            pm.expect(returneditems).to.eql(lastItems);\r",
									"        }\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stories($input: StoryListInput!) {\r\n  stories(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Sort Stories by Name ( Create Story)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8fa13959-e1c8-441d-b9d8-9234615db73a",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"storyName\", \"automation_Storyort\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('storyScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('storyScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('storyScriptRefVerseStart', 4);\r",
									"\r",
									"let concatStringStart = `${pm.globals.get('storyScriptRefBookStart')} ${pm.globals.get('storyScriptRefChapterStart')}:${pm.globals.get('storyScriptRefVerseStart')}`\r",
									"\r",
									"pm.globals.set('storyScriptRefLabelStart',concatStringStart);\r",
									"\r",
									"pm.globals.set('storyScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('storyScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('storyScriptRefVerseEnd', 4);\r",
									"\r",
									"let concatStringEnd = `${pm.globals.get('storyScriptRefBookEnd')} ${pm.globals.get('storyScriptRefChapterEnd')}:${pm.globals.get('storyScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('storyScriptRefLabelEnd', concatStringEnd);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be78581e-1398-44db-a7b7-01fe2ddb7ba7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createStory($input: CreateStoryInput!) {\r\n  createStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"story\": {\r\n      \"name\": \"{{storyName}}\",\r\n      \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{storyScriptRefBookStart}}\",\r\n                    \"chapter\": {{storyScriptRefChapterStart}},\r\n                    \"verse\": {{storyScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{storyScriptRefBookEnd}}\",\r\n                    \"chapter\": {{storyScriptRefChapterEnd}},\r\n                    \"verse\": {{storyScriptRefVerseEnd}}\r\n                }\r\n            }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for FilterSort Stories by Name ( Create Story)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "865ba043-17a9-415e-a4f1-64da4f4dd9e5",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"storyName\", \"FilterSortStoryName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('storyScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('storyScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('storyScriptRefVerseStart', 4);\r",
									"\r",
									"let concatStringStart = `${pm.globals.get('storyScriptRefBookStart')} ${pm.globals.get('storyScriptRefChapterStart')}:${pm.globals.get('storyScriptRefVerseStart')}`\r",
									"\r",
									"pm.globals.set('storyScriptRefLabelStart',concatStringStart);\r",
									"\r",
									"pm.globals.set('storyScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('storyScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('storyScriptRefVerseEnd', 4);\r",
									"\r",
									"let concatStringEnd = `${pm.globals.get('storyScriptRefBookEnd')} ${pm.globals.get('storyScriptRefChapterEnd')}:${pm.globals.get('storyScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('storyScriptRefLabelEnd', concatStringEnd);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "986c8b08-d979-4594-b9ee-6020b1466a04",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createStory($input: CreateStoryInput!) {\r\n  createStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"story\": {\r\n            \"name\": \"{{storyName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{storyScriptRefBookStart}}\",\r\n                    \"chapter\": {{storyScriptRefChapterStart}},\r\n                    \"verse\": {{storyScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{storyScriptRefBookEnd}}\",\r\n                    \"chapter\": {{storyScriptRefChapterEnd}},\r\n                    \"verse\": {{storyScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Sort Stories by Name ( Create Story 2 )",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d3531483-16e6-4295-818a-6e6b121d9fb2",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"storyName\", \"Automation_Storysort\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('storyScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('storyScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('storyScriptRefVerseStart', 4);\r",
									"\r",
									"let concatStringStart = `${pm.globals.get('storyScriptRefBookStart')} ${pm.globals.get('storyScriptRefChapterStart')}:${pm.globals.get('storyScriptRefVerseStart')}`\r",
									"\r",
									"pm.globals.set('storyScriptRefLabelStart',concatStringStart);\r",
									"\r",
									"pm.globals.set('storyScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('storyScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('storyScriptRefVerseEnd', 4);\r",
									"\r",
									"let concatStringEnd = `${pm.globals.get('storyScriptRefBookEnd')} ${pm.globals.get('storyScriptRefChapterEnd')}:${pm.globals.get('storyScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('storyScriptRefLabelEnd', concatStringEnd);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "638112c2-f3fd-4465-8bb5-c040a5e8b810",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createStory($input: CreateStoryInput!) {\r\n  createStory(input: $input) {\r\n    story {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"story\": {\r\n            \"name\": \"{{storyName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{storyScriptRefBookStart}}\",\r\n                    \"chapter\": {{storyScriptRefChapterStart}},\r\n                    \"verse\": {{storyScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{storyScriptRefBookEnd}}\",\r\n                    \"chapter\": {{storyScriptRefChapterEnd}},\r\n                    \"verse\": {{storyScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stories Success - name sorting ASC",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3c16c66a-22c2-4ee8-8cd3-7e9d39febee4",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "12571a50-e4d3-4a21-9e91-375454d60cba",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var lodash = require('lodash');\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.stories.total;  \r",
									"    pm.expect(total).to.be.above(0);\r",
									"});\r",
									"\r",
									"//Test Specific - no. of items are exact\r",
									"pm.test(\"Verify that items are sorted by 'name' and orderd by 'ASC' order \", function () {\r",
									"\r",
									"    var responseBody = jsonData.data.stories.items;\r",
									"    var expectedFilter = lodash.orderBy(responseBody, item => item.name.value.toLowerCase(), ['asc']);\r",
									"    pm.expect(responseBody).to.eql(expectedFilter);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stories($input: StoryListInput!) {\r\n  stories(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stories  Success - name sorting DESC",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "595b0fae-9f9b-4c42-91dd-6d1e276c8615",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"DESC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4004df91-f0ec-48c0-af2c-9596c41f76f9",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var lodash = require('lodash');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.stories.total;  \r",
									"    pm.expect(total).to.be.above(0);\r",
									"});\r",
									"\r",
									"//Test Specific - Name sorting DESC\r",
									"pm.test(\"Verify that items are sorted by 'name' and orderd by 'DESC' order \", function () {\r",
									"\r",
									"    var responseBody = jsonData.data.stories.items;\r",
									"    var expectedFilter = lodash.orderBy(responseBody, item => item.name.value.toLowerCase(), ['desc']);\r",
									"    pm.expect(responseBody).to.eql(expectedFilter);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stories($input: StoryListInput!) {\r\n  stories(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stories Not Mandatory Field Removed - count",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5614ff52-ed81-4e54-84f0-01bb70289e50",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7d8f1b24-9772-4115-82c7-b4b841ef0e20",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that number of items returned is equal to total\", function () {\r",
									"    var total = jsonData.data.stories.total;\r",
									"    var items = jsonData.data.stories.items.length;\r",
									"    if (total <= 25)    // 25 is maximum db items limit returned per page when count is not specified\r",
									"        pm.expect(items).to.eql(total);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stories($input: StoryListInput!) {\r\n  stories(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stories Not Mandatory Field Blank - sort",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a1e12170-3d24-4f64-b69e-a1590a42f190",
								"exec": [
									"pm.globals.set(\"page\",1);\r",
									"pm.globals.set('order', \"DESC\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "67c6f0a8-5c9f-4793-a84b-f1d960e0a6d6",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Invalid input\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 500\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is InternalServerError\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"InternalServerError\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stories($input: StoryListInput!) {\r\n  stories(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\":{{count}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stories Not Mandatory Field Blank - order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "58d567db-503c-4f76-8b54-385dbfbde22b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d2777bfe-cc7e-4905-9bee-16d243600099",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Int cannot represent non-integer value\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stories($input: StoryListInput!) {\r\n  stories(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\":{{count}},\r\n    \"page\": \"{{page}}\",\r\n    \"sort\": \"name\",\r\n    \"order\": \"\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stories Parameter Mismatch - count",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "788e99e3-6494-4b8b-b98b-0af43f05f7ab",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f9420738-826a-46b6-a64c-8b3e5bac20a5",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"StoryListInput\\\". Did you mean \\\"count\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stories($input: StoryListInput!) {\r\n  stories(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count1\":{{count}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stories Parameter  Mismatch - page",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e4a4737a-9f05-442b-bae0-3432a1d1d219",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "83da0a33-aca4-458d-a63d-84f1b87cc26e",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"StoryListInput\\\". Did you mean \\\"page\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stories($input: StoryListInput!) {\r\n  stories(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\":{{count}},\r\n    \"page1\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stories Parameter Mismatch - sort",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f71112e1-7b43-4cb5-849b-99939b23e180",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "893256f4-26e8-4103-9c54-defd9121fe62",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"StoryListInput\\\". Did you mean \\\"sort\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stories($input: StoryListInput!) {\r\n  stories(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"count\":{{count}},\r\n    \"page\": {{page}},\r\n    \"sort1\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stories Parameter Mismatch - order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4c857899-a2dd-46ef-86b7-44638240b847",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c9c9f40e-85da-48c5-8067-e514aa87f969",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"StoryListInput\\\". Did you mean \\\"order\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stories($input: StoryListInput!) {\r\n  stories(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{count}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order1\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stories Parameter Invalid - count min",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b9a02b12-daee-45a8-999b-3e7fb617712d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1bea2512-6576-4b1c-98b3-e2011b7e912e",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that count error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors.count.min;  \r",
									"    pm.expect(error_message).to.eql(\"count must not be less than 1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stories($input: StoryListInput!) {\r\n  stories(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": 0,\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stories Parameter Invalid - count max",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d1eec4ab-c30e-4fa0-bbfb-bd3b419105e4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0b418e15-d0e8-42fa-9045-48b5bc8ff9fc",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that count error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors.count.max;  \r",
									"    pm.expect(error_message).to.eql(\"count must not be greater than 100\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stories($input: StoryListInput!) {\r\n  stories(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": 159,\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stories Parameter Invalid - page",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e08c6be3-0081-4963-afd7-2c2a0a634f37",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1cc28931-7288-420b-89b1-a1e0ed3dea3c",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that count error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors.page.min;  \r",
									"    pm.expect(error_message).to.eql(\"page must not be less than 1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stories($input: StoryListInput!) {\r\n  stories(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{count}},\r\n        \"page\": 0,\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stories Parameter Invalid - sort",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "17e52f14-216c-447c-8fc3-8a31deeb5c92",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "efa9734e-95cf-4ee8-bbed-ec0edfbf7e09",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"PENDING >> Similar to BUG #776 for Users (Sort Field allows empty value/unusual characters)\", function () {\r",
									"\r",
									"    if (jsonData.data) {\r",
									"        pm.expect(\"BACKEND\").to.eql(\"PENDING\"); // fail forcefully\r",
									"    } else {\r",
									"        pm.expect(\"WRITE TEST CASES\").to.eql(\"ERRORS >>> \" + jsonData.errors[0].message);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stories($input: StoryListInput!) {\r\n  stories(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{count}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"QWERTYU\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Stories Parameter Invalid - order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9903c67d-543f-40f3-bc28-74be5c80185a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e282c8a9-d619-4d42-a79e-42a3beb42ceb",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Order\\\" enum\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query stories($input: StoryListInput!) {\r\n  stories(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{count}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"11 #$%% ^&*\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Story success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2959c192-8519-4798-b924-e1c9398fe1cb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "69b2512f-853f-483b-8a2a-536be02cfcec",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that Story is deleted\", function () {\r",
									"    pm.expect(jsonData.data.deleteStory).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteStory($id: ID!) {\r\n  deleteStory(id: $id)\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"{{storyId}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Story Mandatory Field Blank - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "641f8d51-440b-4fb6-94cc-967bf47507d9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0d70d5b9-5c31-4559-969c-bac68440edce",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is 400\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that education error message is correct\", function () {\r",
									"    var error_education_message = jsonData.errors[0].extensions.errors.id.IsId;  \r",
									"    pm.expect(error_education_message).to.eql(\"Invalid ID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteStory($id: ID!) {\r\n  deleteStory(id: $id)\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Story Mandatory Field Removed  - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b39cd357-890d-4bf3-9b37-a5fef77c5265",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ea7ebcee-ec59-4e9f-920d-c67db1344c03",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteStory($id: ID!) {\r\n  deleteStory(id: $id)\r\n}\r\n",
								"variables": "{\r\n  \r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Story Mandatory Field Mismatch  - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0e88c304-15d9-4efb-8bd0-f1462e604490",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "390ea5ac-8981-4cf3-a11d-adce3deafa6f",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteStory($id: ID!) {\r\n  deleteStory(id: $id)\r\n}\r\n",
								"variables": "{\r\n  \"id1\": \"{{storyId}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Story Mandatory Field Invalid - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9548c16d-620b-4864-a9d6-68abf600c2b1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f486fbdf-2a54-42ac-b826-6119d0e7ec92",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that language error message is correct\", function () {\r",
									"    var error_education_message = jsonData.errors[0].extensions.errors.id.IsId;  \r",
									"    pm.expect(error_education_message).to.eql(\"Invalid ID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteStory($id: ID!) {\r\n  deleteStory(id: $id)\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"!@#$%^&*\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete story Parameter - Invalid - Deleted Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ea7b5d18-508d-4451-96c1-0ac814e8e4bb",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b6488e79-2b43-4cbb-89cd-e9c1ddc09914",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Could not find story\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteStory($id: ID!) {\r\n  deleteStory(id: $id)\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"{{storyId}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}
{
	"info": {
		"_postman_id": "9e571ece-bc55-425f-be24-4b753cba8cfa",
		"name": "Cord_API_V3_Film",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Pre-req ( Session + Register + Login ) for Film",
			"item": [
				{
					"name": "Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"pm.globals.set(\"token\", response.data.session.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Write your query or mutation here\r\nquery {\r\n  session(browser: false) {\r\n    user {\r\n      id,\r\n      email\r\n      {\r\n        value\r\n      }\r\n      realFirstName\r\n      {\r\n        value\r\n      }\r\n      createdAt\r\n      canDelete\r\n      displayLastName\r\n      {\r\n         value\r\n      }\r\n      \r\n      \r\n      \r\n    },\r\n    token\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var id = jsonData.data.login.user.id;",
									"pm.globals.set(\"rootAdminUserid\", id);",
									"",
									"var email = jsonData.data.login.user.email.value;",
									"pm.globals.set(\"email\", email);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation login($input: LoginInput!) {\r\n  login(input: $input) {\r\n    powers\r\n    user {\r\n      id\r\n      fullName\r\n      firstName\r\n      avatarLetters\r\n      createdAt\r\n      canDelete\r\n      email {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      phone {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      about {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      status {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      roles {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      title {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      timezone {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          name\r\n          lat\r\n          long\r\n          countries {\r\n            code\r\n            name\r\n            zones {\r\n              name\r\n              lat\r\n              long\r\n              countries {\r\n                code\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      unavailabilities {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          description {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          start\r\n          end\r\n        }\r\n      }\r\n      organizations {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          avatarLetters\r\n          name {\r\n            value\r\n            canRead\r\n            canEdit\r\n          }\r\n          address {\r\n            value\r\n            canRead\r\n            canEdit\r\n          }\r\n          locations {\r\n            total\r\n            hasMore\r\n            canRead\r\n            canCreate\r\n            items {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              name {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              type {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n\r\n              isoAlpha3 {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              fundingAccount {\r\n                value {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  accountNumber {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n                canEdit\r\n                canRead\r\n              }\r\n              isoCountry {\r\n                country\r\n                alpha2\r\n                alpha3\r\n                numeric\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      partners {\r\n        total\r\n        hasMore\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          modifiedAt\r\n          types {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          financialReportingTypes {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          pmcEntityCode {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          globalInnovationsClient {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          active {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          address {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          organization {\r\n            value {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              avatarLetters\r\n              name {\r\n                value\r\n                canRead\r\n                canEdit\r\n              }\r\n              address {\r\n                value\r\n                canRead\r\n                canEdit\r\n              }\r\n              locations {\r\n                total\r\n                hasMore\r\n                canRead\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  type {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n\r\n                  isoAlpha3 {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  fundingAccount {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      accountNumber {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoCountry {\r\n                    country\r\n                    alpha2\r\n                    alpha3\r\n                    numeric\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            canEdit\r\n            canRead\r\n          }\r\n          pointOfContact {\r\n            value {\r\n              id\r\n              fullName\r\n              firstName\r\n              avatarLetters\r\n              createdAt\r\n              email {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              realFirstName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              realLastName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              displayFirstName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              displayLastName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              phone {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              about {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              status {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              title {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              roles {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              timezone {\r\n                canRead\r\n                canEdit\r\n                value {\r\n                  name\r\n                  lat\r\n                  long\r\n                  countries {\r\n                    code\r\n                    name\r\n                    zones {\r\n                      name\r\n                      lat\r\n                      long\r\n                      countries {\r\n                        code\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              unavailabilities {\r\n                total\r\n                hasMore\r\n                canCreate\r\n                canRead\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  start\r\n                  end\r\n                  description {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                }\r\n              }\r\n              organizations {\r\n                total\r\n                hasMore\r\n                canCreate\r\n                canRead\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  avatarLetters\r\n                  name {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                  address {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                  locations {\r\n                    total\r\n                    hasMore\r\n                    canRead\r\n                    canCreate\r\n                    items {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      type {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n\r\n                      isoAlpha3 {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      fundingAccount {\r\n                        value {\r\n                          id\r\n                          createdAt\r\n                          canDelete\r\n                          name {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          accountNumber {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                        }\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      isoCountry {\r\n                        country\r\n                        alpha2\r\n                        alpha3\r\n                        numeric\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              education {\r\n                canRead\r\n                total\r\n                hasMore\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  degree {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  major {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  institution {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n              }\r\n              partners {\r\n                canCreate\r\n                canRead\r\n                hasMore\r\n                total\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  modifiedAt\r\n                  types {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  financialReportingTypes {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  pmcEntityCode {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  globalInnovationsClient {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  active {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  address {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  organization {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      avatarLetters\r\n                      name {\r\n                        value\r\n                        canRead\r\n                        canEdit\r\n                      }\r\n                      address {\r\n                        value\r\n                        canRead\r\n                        canEdit\r\n                      }\r\n                      locations {\r\n                        total\r\n                        hasMore\r\n                        canRead\r\n                        canCreate\r\n                        items {\r\n                          id\r\n                          createdAt\r\n                          canDelete\r\n                          name {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          type {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n\r\n                          isoAlpha3 {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          fundingAccount {\r\n                            value {\r\n                              id\r\n                              createdAt\r\n                              canDelete\r\n                              name {\r\n                                value\r\n                                canEdit\r\n                                canRead\r\n                              }\r\n                              accountNumber {\r\n                                value\r\n                                canEdit\r\n                                canRead\r\n                              }\r\n                            }\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          isoCountry {\r\n                            country\r\n                            alpha2\r\n                            alpha3\r\n                            numeric\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  pointOfContact {\r\n                    canEdit\r\n                    canRead\r\n                    value {\r\n                      id\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              locations {\r\n                canRead\r\n                total\r\n                hasMore\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  type {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoAlpha3 {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoCountry {\r\n                    country\r\n                    alpha2\r\n                    alpha3\r\n                    numeric\r\n                  }\r\n                  fundingAccount {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      accountNumber {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n              }\r\n              knownLanguages {\r\n                proficiency\r\n                language {\r\n                  id\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      education {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          degree {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          major {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          institution {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n      }\r\n      locations {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          type {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          isoAlpha3 {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          isoCountry {\r\n            country\r\n            alpha2\r\n            alpha3\r\n            numeric\r\n          }\r\n          fundingAccount {\r\n            value {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              name {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              accountNumber {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n            }\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n      }\r\n      knownLanguages {\r\n        proficiency\r\n        language {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"email\": \"{{rootAdminLogin_email}}\",\r\n        \"password\": \"{{rootAdminLogin_password}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant Power to RootAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation grantPower($userId: ID!,$power:Power!) {\r\n  grantPower(userId:$userId,power:$power)\r\n}\r\n",
								"variables": "{\r\n    \"userId\": \"{{userid}}\",\r\n    \"power\": \"GrantPower\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// This is safe check to prevent failing futher cases If the Root User is already Created\r",
									"if (jsonData.errors) {\r",
									"    if (jsonData.errors.length) return;\r",
									"}\r",
									"\r",
									"//Saving data for future use\r",
									"var id = jsonData.data.register.user.id;\r",
									"pm.globals.set(\"userid\", id);\r",
									"\r",
									"var user = JSON.stringify(jsonData.data.register.user);\r",
									"pm.globals.set(\"user_data\", user);\r",
									"\r",
									"var email = jsonData.data.register.user.email.value;\r",
									"pm.globals.set(\"email\", email);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"realFirstName\", \"FirstName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"realLastName\", \"LastName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"email\", \"email\" + moment().format(\"DDMYYYYhhmmss\") + \"@test.com\");\r",
									"pm.globals.set(\"password\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"displayFirstName\", \"DisplayFirstName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"displayLastName\", \"DisplayLastName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"phone\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));\r",
									"\r",
									"var timezoneObject = {\r",
									"    \"name\": \"Europe/Andorra\",\r",
									"    \"lat\": 42.5,\r",
									"    \"long\": 1.5167,\r",
									"    \"countries\": [\r",
									"        {\r",
									"            \"code\": \"AD\",\r",
									"            \"name\": \"Andorra\",\r",
									"            \"zones\": [\r",
									"                {\r",
									"                    \"name\": \"Europe/Andorra\",\r",
									"                    \"lat\": 42.5,\r",
									"                    \"long\": 1.5167,\r",
									"                    \"countries\": [\r",
									"                        {\r",
									"                            \"code\": \"AD\",\r",
									"                            \"name\": \"Andorra\"\r",
									"                        }\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"};\r",
									"pm.globals.set('timezoneObject', JSON.stringify(timezoneObject));\r",
									"pm.globals.set(\"timezone\", timezoneObject.name);\r",
									"\r",
									"pm.globals.set(\"about\", \"I'm Tester\");\r",
									"\r",
									"pm.globals.set(\"userTitle\", \"Tester\");\r",
									"\r",
									"// Taking random value for the User status from pre-defined possible values\r",
									"var userStatusArray = ['Active','Disabled'];\r",
									"var randomNumber = Math.floor(Math.random()*userStatusArray.length);\r",
									"// pm.globals.set('userStatus', userStatusArray[randomNumber]);\r",
									"pm.globals.set(\"userStatus\", \"Active\");\r",
									"\r",
									"pm.globals.set(\"userRoles\", \"ProjectManager\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation register($input: RegisterInput!) {\r\n  register(input: $input) {\r\n    powers\r\n    user {\r\n      id\r\n      fullName\r\n      firstName\r\n      avatarLetters\r\n      createdAt\r\n      canDelete\r\n      email {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      phone {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      about {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      status {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      roles {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      title {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      timezone {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          name\r\n          lat\r\n          long\r\n          countries {\r\n            code\r\n            name\r\n            zones {\r\n              name\r\n              lat\r\n              long\r\n              countries {\r\n                code\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      unavailabilities {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          description {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          start\r\n          end\r\n        }\r\n      }\r\n      organizations {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          avatarLetters\r\n          name {\r\n            value\r\n            canRead\r\n            canEdit\r\n          }\r\n          address {\r\n            value\r\n            canRead\r\n            canEdit\r\n          }\r\n          locations {\r\n            total\r\n            hasMore\r\n            canRead\r\n            canCreate\r\n            items {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              name {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              type {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n\r\n              isoAlpha3 {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              fundingAccount {\r\n                value {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  accountNumber {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n                canEdit\r\n                canRead\r\n              }\r\n              isoCountry {\r\n                country\r\n                alpha2\r\n                alpha3\r\n                numeric\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      partners {\r\n        total\r\n        hasMore\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          modifiedAt\r\n          types {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          financialReportingTypes {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          pmcEntityCode {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          globalInnovationsClient {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          active {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          address {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          organization {\r\n            value {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              avatarLetters\r\n              name {\r\n                value\r\n                canRead\r\n                canEdit\r\n              }\r\n              address {\r\n                value\r\n                canRead\r\n                canEdit\r\n              }\r\n              locations {\r\n                total\r\n                hasMore\r\n                canRead\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  type {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n\r\n                  isoAlpha3 {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  fundingAccount {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      accountNumber {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoCountry {\r\n                    country\r\n                    alpha2\r\n                    alpha3\r\n                    numeric\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            canEdit\r\n            canRead\r\n          }\r\n          pointOfContact {\r\n            value {\r\n              id\r\n              fullName\r\n              firstName\r\n              avatarLetters\r\n              createdAt\r\n              email {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              realFirstName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              realLastName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              displayFirstName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              displayLastName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              phone {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              about {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              status {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              title {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              roles {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              timezone {\r\n                canRead\r\n                canEdit\r\n                value {\r\n                  name\r\n                  lat\r\n                  long\r\n                  countries {\r\n                    code\r\n                    name\r\n                    zones {\r\n                      name\r\n                      lat\r\n                      long\r\n                      countries {\r\n                        code\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              unavailabilities {\r\n                total\r\n                hasMore\r\n                canCreate\r\n                canRead\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  start\r\n                  end\r\n                  description {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                }\r\n              }\r\n              organizations {\r\n                total\r\n                hasMore\r\n                canCreate\r\n                canRead\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  avatarLetters\r\n                  name {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                  address {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                  locations {\r\n                    total\r\n                    hasMore\r\n                    canRead\r\n                    canCreate\r\n                    items {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      type {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n\r\n                      isoAlpha3 {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      fundingAccount {\r\n                        value {\r\n                          id\r\n                          createdAt\r\n                          canDelete\r\n                          name {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          accountNumber {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                        }\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      isoCountry {\r\n                        country\r\n                        alpha2\r\n                        alpha3\r\n                        numeric\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              education {\r\n                canRead\r\n                total\r\n                hasMore\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  degree {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  major {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  institution {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n              }\r\n              partners {\r\n                canCreate\r\n                canRead\r\n                hasMore\r\n                total\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  modifiedAt\r\n                  types {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  financialReportingTypes {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  pmcEntityCode {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  globalInnovationsClient {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  active {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  address {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  organization {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      avatarLetters\r\n                      name {\r\n                        value\r\n                        canRead\r\n                        canEdit\r\n                      }\r\n                      address {\r\n                        value\r\n                        canRead\r\n                        canEdit\r\n                      }\r\n                      locations {\r\n                        total\r\n                        hasMore\r\n                        canRead\r\n                        canCreate\r\n                        items {\r\n                          id\r\n                          createdAt\r\n                          canDelete\r\n                          name {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          type {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n\r\n                          isoAlpha3 {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          fundingAccount {\r\n                            value {\r\n                              id\r\n                              createdAt\r\n                              canDelete\r\n                              name {\r\n                                value\r\n                                canEdit\r\n                                canRead\r\n                              }\r\n                              accountNumber {\r\n                                value\r\n                                canEdit\r\n                                canRead\r\n                              }\r\n                            }\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          isoCountry {\r\n                            country\r\n                            alpha2\r\n                            alpha3\r\n                            numeric\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  pointOfContact {\r\n                    canEdit\r\n                    canRead\r\n                    value {\r\n                      id\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              locations {\r\n                canRead\r\n                total\r\n                hasMore\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  type {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoAlpha3 {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoCountry {\r\n                    country\r\n                    alpha2\r\n                    alpha3\r\n                    numeric\r\n                  }\r\n                  fundingAccount {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      accountNumber {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n              }\r\n              knownLanguages {\r\n                proficiency\r\n                language {\r\n                  id\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      education {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          degree {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          major {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          institution {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n      }\r\n      locations {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          type {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          isoAlpha3 {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          isoCountry {\r\n            country\r\n            alpha2\r\n            alpha3\r\n            numeric\r\n          }\r\n          fundingAccount {\r\n            value {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              name {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              accountNumber {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n            }\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n      }\r\n      knownLanguages {\r\n        proficiency\r\n        language {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"realFirstName\": \"Piyush\",\r\n        \"realLastName\": \"Patel\",\r\n        \"email\": \"{{login_email}}\",\r\n        \"password\": \"{{login_password}}\",\r\n        \"displayFirstName\": \"{{displayFirstName}}\",\r\n        \"displayLastName\": \"{{displayLastName}}\",\r\n        \"phone\": \"{{phone}}\",\r\n        \"timezone\": \"{{timezone}}\",\r\n        \"status\": \"{{userStatus}}\",\r\n        \"title\": \"{{userTitle}}\",\r\n        \"about\": \"{{about}}\",\r\n        \"roles\": \"{{userRoles}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var id = jsonData.data.login.user.id;",
									"pm.globals.set(\"userid\", id);",
									"",
									"var email = jsonData.data.login.user.email.value;",
									"pm.globals.set(\"email\", email);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation login($input: LoginInput!) {\r\n  login(input: $input) {\r\n    powers\r\n    user {\r\n      id\r\n      fullName\r\n      firstName\r\n      avatarLetters\r\n      createdAt\r\n      canDelete\r\n      email {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      phone {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      about {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      status {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      roles {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      title {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      timezone {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          name\r\n          lat\r\n          long\r\n          countries {\r\n            code\r\n            name\r\n            zones {\r\n              name\r\n              lat\r\n              long\r\n              countries {\r\n                code\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      unavailabilities {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          #canDelete\r\n          description {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          start\r\n          end\r\n        }\r\n      }\r\n      organizations {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          avatarLetters\r\n          name {\r\n            value\r\n            canRead\r\n            canEdit\r\n          }\r\n          address {\r\n            value\r\n            canRead\r\n            canEdit\r\n          }\r\n          locations {\r\n            total\r\n            hasMore\r\n            canRead\r\n            canCreate\r\n            items {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              name {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              type {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n\r\n              isoAlpha3 {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              fundingAccount {\r\n                value {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  accountNumber {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n                canEdit\r\n                canRead\r\n              }\r\n              isoCountry {\r\n                country\r\n                alpha2\r\n                alpha3\r\n                numeric\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      partners {\r\n        total\r\n        hasMore\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          modifiedAt\r\n          types {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          financialReportingTypes {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          pmcEntityCode {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          globalInnovationsClient {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          active {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          address {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          organization {\r\n            value {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              avatarLetters\r\n              name {\r\n                value\r\n                canRead\r\n                canEdit\r\n              }\r\n              address {\r\n                value\r\n                canRead\r\n                canEdit\r\n              }\r\n              locations {\r\n                total\r\n                hasMore\r\n                canRead\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  type {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n\r\n                  isoAlpha3 {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  fundingAccount {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      accountNumber {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoCountry {\r\n                    country\r\n                    alpha2\r\n                    alpha3\r\n                    numeric\r\n                  }\r\n                }\r\n              }\r\n            }\r\n            canEdit\r\n            canRead\r\n          }\r\n          pointOfContact {\r\n            value {\r\n              id\r\n              fullName\r\n              firstName\r\n              avatarLetters\r\n              createdAt\r\n              email {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              realFirstName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              realLastName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              displayFirstName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              displayLastName {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              phone {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              about {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              status {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              title {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              roles {\r\n                canRead\r\n                canEdit\r\n                value\r\n              }\r\n              timezone {\r\n                canRead\r\n                canEdit\r\n                value {\r\n                  name\r\n                  lat\r\n                  long\r\n                  countries {\r\n                    code\r\n                    name\r\n                    zones {\r\n                      name\r\n                      lat\r\n                      long\r\n                      countries {\r\n                        code\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              unavailabilities {\r\n                total\r\n                hasMore\r\n                canCreate\r\n                canRead\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  #canDelete\r\n                  start\r\n                  end\r\n                  description {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                }\r\n              }\r\n              organizations {\r\n                total\r\n                hasMore\r\n                canCreate\r\n                canRead\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  avatarLetters\r\n                  name {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                  address {\r\n                    value\r\n                    canRead\r\n                    canEdit\r\n                  }\r\n                  locations {\r\n                    total\r\n                    hasMore\r\n                    canRead\r\n                    canCreate\r\n                    items {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      type {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n\r\n                      isoAlpha3 {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      fundingAccount {\r\n                        value {\r\n                          id\r\n                          createdAt\r\n                          canDelete\r\n                          name {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          accountNumber {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                        }\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      isoCountry {\r\n                        country\r\n                        alpha2\r\n                        alpha3\r\n                        numeric\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              education {\r\n                canRead\r\n                total\r\n                hasMore\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  degree {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  major {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  institution {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n              }\r\n              partners {\r\n                canCreate\r\n                canRead\r\n                hasMore\r\n                total\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n                  modifiedAt\r\n                  types {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  financialReportingTypes {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  pmcEntityCode {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  globalInnovationsClient {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  active {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  address {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  organization {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      avatarLetters\r\n                      name {\r\n                        value\r\n                        canRead\r\n                        canEdit\r\n                      }\r\n                      address {\r\n                        value\r\n                        canRead\r\n                        canEdit\r\n                      }\r\n                      locations {\r\n                        total\r\n                        hasMore\r\n                        canRead\r\n                        canCreate\r\n                        items {\r\n                          id\r\n                          createdAt\r\n                          canDelete\r\n                          name {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          type {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n\r\n                          isoAlpha3 {\r\n                            value\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          fundingAccount {\r\n                            value {\r\n                              id\r\n                              createdAt\r\n                              canDelete\r\n                              name {\r\n                                value\r\n                                canEdit\r\n                                canRead\r\n                              }\r\n                              accountNumber {\r\n                                value\r\n                                canEdit\r\n                                canRead\r\n                              }\r\n                            }\r\n                            canEdit\r\n                            canRead\r\n                          }\r\n                          isoCountry {\r\n                            country\r\n                            alpha2\r\n                            alpha3\r\n                            numeric\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  pointOfContact {\r\n                    canEdit\r\n                    canRead\r\n                    value {\r\n                      id\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n              locations {\r\n                canRead\r\n                total\r\n                hasMore\r\n                canCreate\r\n                items {\r\n                  id\r\n                  createdAt\r\n                  canDelete\r\n\r\n                  name {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  type {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoAlpha3 {\r\n                    value\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                  isoCountry {\r\n                    country\r\n                    alpha2\r\n                    alpha3\r\n                    numeric\r\n                  }\r\n                  fundingAccount {\r\n                    value {\r\n                      id\r\n                      createdAt\r\n                      canDelete\r\n                      name {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                      accountNumber {\r\n                        value\r\n                        canEdit\r\n                        canRead\r\n                      }\r\n                    }\r\n                    canEdit\r\n                    canRead\r\n                  }\r\n                }\r\n              }\r\n              knownLanguages {\r\n                proficiency\r\n                language {\r\n                  id\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      education {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n          degree {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          major {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          institution {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n      }\r\n      locations {\r\n        canRead\r\n        total\r\n        hasMore\r\n        canCreate\r\n        items {\r\n          id\r\n          createdAt\r\n          canDelete\r\n\r\n          name {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          type {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          isoAlpha3 {\r\n            value\r\n            canEdit\r\n            canRead\r\n          }\r\n          isoCountry {\r\n            country\r\n            alpha2\r\n            alpha3\r\n            numeric\r\n          }\r\n          fundingAccount {\r\n            value {\r\n              id\r\n              createdAt\r\n              canDelete\r\n              name {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n              accountNumber {\r\n                value\r\n                canEdit\r\n                canRead\r\n              }\r\n            }\r\n            canEdit\r\n            canRead\r\n          }\r\n        }\r\n      }\r\n      knownLanguages {\r\n        proficiency\r\n        language {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n   \"input\": {\r\n      \"email\": \"{{login_email}}\",\r\n      \"password\": \"{{login_password}}\"\r\n   }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant Power to Root User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation grantPower($userId: ID!,$power:Power!) {\r\n  grantPower(userId:$userId,power:$power)\r\n}\r\n",
								"variables": "{\r\n    \"userId\": \"{{userid}}\",\r\n    \"power\": \"GrantPower\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Grant Power to Create Film",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation grantPower($userId: ID!,$power:Power!) {\r\n  grantPower(userId:$userId,power:$power)\r\n}\r\n",
								"variables": "{\r\n    \"userId\": \"{{userid}}\",\r\n    \"power\": \"CreateFilm\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Film",
			"item": [
				{
					"name": "Create Film Success - Same Book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"filmName\", \"FilmName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('filmScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('filmScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('filmScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('filmScriptRefBookStart')} ${pm.globals.get('filmScriptRefChapterStart')}:${pm.globals.get('filmScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('filmScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('filmScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('filmScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('filmScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('filmScriptRefBookEnd')} ${pm.globals.get('filmScriptRefChapterEnd')}:${pm.globals.get('filmScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('filmScriptRefLabelEnd', expectedLabelEnd);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"const moment = require('moment');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that Film ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.createFilm.film.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"\r",
									"    // Saving data for future use\r",
									"    pm.globals.set(\"filmId\", id);\r",
									"});\r",
									"\r",
									"// Saving whole Film Object to globals for future use\r",
									"var film = JSON.stringify(jsonData.data.createFilm.film);\r",
									"pm.globals.set(\"film_data\", film);\r",
									"\r",
									"pm.test(\"Verify that film's createdAt is in Specific time format\", function () {\r",
									"    var time = jsonData.data.createFilm.film.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film Name is same as requested\", function () {\r",
									"    var filmName = jsonData.data.createFilm.film.name.value;\r",
									"    pm.expect(filmName).to.eql(pm.globals.get('filmName'));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//scriptureReferences\r",
									"//Static\r",
									"pm.test(\"Verify that film scriptureReferences total verses is same as requested\", function () {\r",
									"    var totalVerses = jsonData.data.createFilm.film.scriptureReferences.value[0].totalVerses;\r",
									"    pm.expect(totalVerses).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify film scriptureReferences label\", function () {\r",
									"    var label = jsonData.data.createFilm.film.scriptureReferences.value[0].label;\r",
									"    pm.expect(label).to.eql(pm.globals.get('filmScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film scriptureReferences start book is same as requested\", function () {\r",
									"    var startBook = jsonData.data.createFilm.film.scriptureReferences.value[0].start.book;\r",
									"    pm.expect(startBook).to.eql(pm.globals.get('filmScriptRefBookStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film scriptureReferences start label is same as requested\", function () {\r",
									"    var startLabel = jsonData.data.createFilm.film.scriptureReferences.value[0].start.label;\r",
									"    pm.expect(startLabel).to.eql(pm.globals.get('filmScriptRefLabelStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film scriptureReferences start chapter is same as requested\", function () {\r",
									"    var startChapter = jsonData.data.createFilm.film.scriptureReferences.value[0].start.chapter;\r",
									"    pm.expect(startChapter).to.eql(pm.globals.get('filmScriptRefChapterStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film scriptureReferences start verse is same as requested\", function () {\r",
									"    var startVerse = jsonData.data.createFilm.film.scriptureReferences.value[0].start.verse;\r",
									"    pm.expect(startVerse).to.eql(pm.globals.get('filmScriptRefVerseStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film scriptureReferences end book is same as requested\", function () {\r",
									"    var endBook = jsonData.data.createFilm.film.scriptureReferences.value[0].end.book;\r",
									"    pm.expect(endBook).to.eql(pm.globals.get('filmScriptRefBookEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film scriptureReferences end label is same as requested\", function () {\r",
									"    var endLabel = jsonData.data.createFilm.film.scriptureReferences.value[0].end.label;\r",
									"    pm.expect(endLabel).to.eql(pm.globals.get('filmScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film scriptureReferences end chapter is same as requested\", function () {\r",
									"    var endChapter = jsonData.data.createFilm.film.scriptureReferences.value[0].end.chapter;\r",
									"    pm.expect(endChapter).to.eql(pm.globals.get('filmScriptRefChapterEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film scriptureReferences end verse is same as requested\", function () {\r",
									"    var endVerse = jsonData.data.createFilm.film.scriptureReferences.value[0].end.verse;\r",
									"    pm.expect(endVerse).to.eql(pm.globals.get('filmScriptRefVerseEnd'));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      canDelete\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"name\": \"{{filmName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{filmScriptRefBookStart}}\",\r\n                    \"chapter\": {{filmScriptRefChapterStart}},\r\n                    \"verse\": {{filmScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{filmScriptRefBookEnd}}\",\r\n                    \"chapter\": {{filmScriptRefChapterEnd}},\r\n                    \"verse\": {{filmScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Film Success - Diifrent Book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"filmName\", \"FilmName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('filmScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('filmScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('filmScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('filmScriptRefBookStart')} ${pm.globals.get('filmScriptRefChapterStart')}:${pm.globals.get('filmScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('filmScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('filmScriptRefBookEnd', \"Exodus\");\r",
									"\r",
									"pm.globals.set('filmScriptRefChapterEnd', 4);\r",
									"\r",
									"pm.globals.set('filmScriptRefVerseEnd', 5);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('filmScriptRefBookEnd')} ${pm.globals.get('filmScriptRefChapterEnd')}:${pm.globals.get('filmScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('filmScriptRefLabelEnd', expectedLabelEnd);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"const moment = require('moment');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that Film ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.createFilm.film.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"\r",
									"    // Saving data for future use\r",
									"    pm.globals.set(\"filmId\", id);\r",
									"});\r",
									"\r",
									"// Saving whole Film Object to globals for future use\r",
									"var film = JSON.stringify(jsonData.data.createFilm.film);\r",
									"pm.globals.set(\"film_data\", film);\r",
									"\r",
									"pm.test(\"Verify that film's createdAt is in Specific time format\", function () {\r",
									"    var time = jsonData.data.createFilm.film.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film Name is same as requested\", function () {\r",
									"    var filmName = jsonData.data.createFilm.film.name.value;\r",
									"    pm.expect(filmName).to.eql(pm.globals.get('filmName'));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//scriptureReferences\r",
									"//Static\r",
									"pm.test(\"Verify that film scriptureReferences total verses is same as requested\", function () {\r",
									"    var totalVerses = jsonData.data.createFilm.film.scriptureReferences.value[0].totalVerses;\r",
									"     pm.expect(totalVerses).to.be.above(0);\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify film scriptureReferences label\", function () {\r",
									"    var label = jsonData.data.createFilm.film.scriptureReferences.value[0].label;\r",
									"    var startLabel = jsonData.data.createFilm.film.scriptureReferences.value[0].start.label;\r",
									"    var endLabel = jsonData.data.createFilm.film.scriptureReferences.value[0].end.label;\r",
									"    var expectedLabel = startLabel + \"-\" + endLabel;\r",
									"    pm.expect(label).to.eql(expectedLabel);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film scriptureReferences start book is same as requested\", function () {\r",
									"    var startBook = jsonData.data.createFilm.film.scriptureReferences.value[0].start.book;\r",
									"    pm.expect(startBook).to.eql(pm.globals.get('filmScriptRefBookStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film scriptureReferences start label is same as requested\", function () {\r",
									"    var startLabel = jsonData.data.createFilm.film.scriptureReferences.value[0].start.label;\r",
									"    pm.expect(startLabel).to.eql(pm.globals.get('filmScriptRefLabelStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film scriptureReferences start chapter is same as requested\", function () {\r",
									"    var startChapter = jsonData.data.createFilm.film.scriptureReferences.value[0].start.chapter;\r",
									"    pm.expect(startChapter).to.eql(pm.globals.get('filmScriptRefChapterStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film scriptureReferences start verse is same as requested\", function () {\r",
									"    var startVerse = jsonData.data.createFilm.film.scriptureReferences.value[0].start.verse;\r",
									"    pm.expect(startVerse).to.eql(pm.globals.get('filmScriptRefVerseStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film scriptureReferences end book is same as requested\", function () {\r",
									"    var endBook = jsonData.data.createFilm.film.scriptureReferences.value[0].end.book;\r",
									"    pm.expect(endBook).to.eql(pm.globals.get('filmScriptRefBookEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film scriptureReferences end label is same as requested\", function () {\r",
									"    var endLabel = jsonData.data.createFilm.film.scriptureReferences.value[0].end.label;\r",
									"    pm.expect(endLabel).to.eql(pm.globals.get('filmScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film scriptureReferences end chapter is same as requested\", function () {\r",
									"    var endChapter = jsonData.data.createFilm.film.scriptureReferences.value[0].end.chapter;\r",
									"    pm.expect(endChapter).to.eql(pm.globals.get('filmScriptRefChapterEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film scriptureReferences end verse is same as requested\", function () {\r",
									"    var endVerse = jsonData.data.createFilm.film.scriptureReferences.value[0].end.verse;\r",
									"    pm.expect(endVerse).to.eql(pm.globals.get('filmScriptRefVerseEnd'));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"name\": \"{{filmName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{filmScriptRefBookStart}}\",\r\n                    \"chapter\": {{filmScriptRefChapterStart}},\r\n                    \"verse\": {{filmScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{filmScriptRefBookEnd}}\",\r\n                    \"chapter\": {{filmScriptRefChapterEnd}},\r\n                    \"verse\": {{filmScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Film Mandatory Field Blank - Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that minLength message is correct\", function () {\r",
									"    var minLength_message = jsonData.errors[0].extensions.errors['film.name'].minLength;\r",
									"    pm.expect(minLength_message).to.eql(\"name must be longer than or equal to 1 characters\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"film\": {\r\n      \"name\": \"\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Film Mandatory Field Removed  - Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"name\\\" of required type \\\"String!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"film\": {}\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Film Not  Mandatory Field Blank -  ScriptRef start book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"name\": \"{{filmName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"\",\r\n                    \"chapter\": {{filmScriptRefChapterStart}},\r\n                    \"verse\": {{filmScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{filmScriptRefBookEnd}}\",\r\n                    \"chapter\": {{filmScriptRefChapterEnd}},\r\n                    \"verse\": {{filmScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Film Not  Mandatory Field Removed -  ScriptRef start book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"name\": \"{{filmName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"chapter\": {{filmScriptRefChapterStart}},\r\n                    \"verse\": {{filmScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{filmScriptRefBookEnd}}\",\r\n                    \"chapter\": {{filmScriptRefChapterEnd}},\r\n                    \"verse\": {{filmScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Film Not  Mandatory Field Blank -  ScriptRef end  book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"filmName\", \"FilmName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('filmScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('filmScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('filmScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('filmScriptRefBookStart')} ${pm.globals.get('filmScriptRefChapterStart')}:${pm.globals.get('filmScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('filmScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('filmScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('filmScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('filmScriptRefBookEnd')} ${pm.globals.get('filmScriptRefChapterEnd')}:${pm.globals.get('filmScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('filmScriptRefLabelEnd', expectedLabelEnd);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"name\": \"{{filmName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{filmScriptRefBookStart}}\",\r\n                    \"chapter\": {{filmScriptRefChapterStart}},\r\n                    \"verse\": {{filmScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"\",\r\n                    \"chapter\": {{filmScriptRefChapterEnd}},\r\n                    \"verse\": {{filmScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Film Not  Mandatory Field Removed -  ScriptRef end  book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"name\": \"{{filmName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{filmScriptRefBookStart}}\",\r\n                    \"chapter\": {{filmScriptRefChapterStart}},\r\n                    \"verse\": {{filmScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"chapter\": {{filmScriptRefChapterEnd}},\r\n                    \"verse\": {{filmScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Film Success - Only Requird Inputs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"filmName\", \"FilmName\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that film ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.createFilm.film.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that scriptureReferences are empty\", function () {\r",
									"    var scriptureReferences = jsonData.data.createFilm.film.scriptureReferences.value;\r",
									"    pm.expect(scriptureReferences).to.eql([]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"film\": {\r\n      \"name\": \"{{filmName}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Film Parameter Mismatch - Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Field \\\"name\\\" of required type \\\"String!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"film\": {\r\n      \"name1\": \"{{filmName}}\"\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Film Parameter Mismatch - ScriptRef",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"CreateFilm\\\". Did you mean \\\"scriptureReferences\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"film\": {\r\n      \"name\": \"{{filmName}}\",\r\n      \"scriptureReferences1\": {\r\n        \"start\": {\r\n          \"book\": \"{{filmScriptRefBookStart}}\",\r\n          \"chapter\": {{filmScriptRefChapterStart}},\r\n          \"verse\": {{filmScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{filmScriptRefBookEnd}}\",\r\n          \"chapter\": {{filmScriptRefChapterEnd}},\r\n          \"verse\": {{filmScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Film Parameter Mismatch - ScriptRef start",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"start\\\" of required type \\\"ScriptureReferenceInput!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"film\": {\r\n      \"name\": \"{{filmName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start1\": {\r\n          \"book\": \"{{filmScriptRefBookStart}}\",\r\n          \"chapter\": {{filmScriptRefChapterStart}},\r\n          \"verse\": {{filmScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{filmScriptRefBookEnd}}\",\r\n          \"chapter\": {{filmScriptRefChapterEnd}},\r\n          \"verse\": {{filmScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Film Parameter Mismatch - ScriptRef start book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"film\": {\r\n      \"name\": \"{{filmName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book1\": \"{{filmScriptRefBookStart}}\",\r\n          \"chapter\": {{filmScriptRefChapterStart}},\r\n          \"verse\": {{filmScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{filmScriptRefBookEnd}}\",\r\n          \"chapter\": {{filmScriptRefChapterEnd}},\r\n          \"verse\": {{filmScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Film Parameter Mismatch - ScriptRef start chapter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"ScriptureReferenceInput\\\". Did you mean \\\"chapter\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"film\": {\r\n      \"name\": \"{{filmName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{filmScriptRefBookStart}}\",\r\n          \"chapter1\": {{filmScriptRefChapterStart}},\r\n          \"verse\": {{filmScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{filmScriptRefBookEnd}}\",\r\n          \"chapter\": {{filmScriptRefChapterEnd}},\r\n          \"verse\": {{filmScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Film Parameter Mismatch - ScriptRef start verse",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"ScriptureReferenceInput\\\". Did you mean \\\"verse\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"film\": {\r\n      \"name\": \"{{filmName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{filmScriptRefBookStart}}\",\r\n          \"chapter\": {{filmScriptRefChapterStart}},\r\n          \"verse1\": {{filmScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{filmScriptRefBookEnd}}\",\r\n          \"chapter\": {{filmScriptRefChapterEnd}},\r\n          \"verse\": {{filmScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Film Parameter Mismatch - ScriptRef end",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"end\\\" of required type \\\"ScriptureReferenceInput!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"film\": {\r\n      \"name\": \"{{filmName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{filmScriptRefBookStart}}\",\r\n          \"chapter\": {{filmScriptRefChapterStart}},\r\n          \"verse\": {{filmScriptRefVerseStart}}\r\n        },\r\n        \"end1\": {\r\n          \"book\": \"{{filmScriptRefBookEnd}}\",\r\n          \"chapter\": {{filmScriptRefChapterEnd}},\r\n          \"verse\": {{filmScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Film Parameter Mismatch - ScriptRef end book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"film\": {\r\n      \"name\": \"{{filmName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{filmScriptRefBookStart}}\",\r\n          \"chapter\": {{filmScriptRefChapterStart}},\r\n          \"verse\": {{filmScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book1\": \"{{filmScriptRefBookEnd}}\",\r\n          \"chapter\": {{filmScriptRefChapterEnd}},\r\n          \"verse\": {{filmScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Film Parameter Mismatch - ScriptRef end chapter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"ScriptureReferenceInput\\\". Did you mean \\\"chapter\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"film\": {\r\n      \"name\": \"{{filmName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{filmScriptRefBookStart}}\",\r\n          \"chapter\": {{filmScriptRefChapterStart}},\r\n          \"verse\": {{filmScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{filmScriptRefBookEnd}}\",\r\n          \"chapter1\": {{filmScriptRefChapterEnd}},\r\n          \"verse\": {{filmScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Film Parameter Mismatch - ScriptRef end verse",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"ScriptureReferenceInput\\\". Did you mean \\\"verse\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"film\": {\r\n      \"name\": \"{{filmName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{filmScriptRefBookStart}}\",\r\n          \"chapter\": {{filmScriptRefChapterStart}},\r\n          \"verse\": {{filmScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{filmScriptRefBookEnd}}\",\r\n          \"chapter\": {{filmScriptRefChapterEnd}},\r\n          \"verse1\": {{filmScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Get film by Id ( Create Film)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"filmName\", \"FilmName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('filmScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('filmScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('filmScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('filmScriptRefBookStart')} ${pm.globals.get('filmScriptRefChapterStart')}:${pm.globals.get('filmScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('filmScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('filmScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('filmScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('filmScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('filmScriptRefBookEnd')} ${pm.globals.get('filmScriptRefChapterStart')}:${pm.globals.get('filmScriptRefVerseStart')}`\r",
									"\r",
									"pm.globals.set('filmScriptRefLabelEnd', expectedLabelEnd);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"//Test Specific\r",
									"var id = jsonData.data.createFilm.film.id;\r",
									"pm.globals.set(\"filmId\", id);\r",
									"\r",
									"// Saving whole Film Object to globals for future use\r",
									"var film = JSON.stringify(jsonData.data.createFilm.film);\r",
									"pm.globals.set(\"film_data\", film);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"name\": \"{{filmName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{filmScriptRefBookStart}}\",\r\n                    \"chapter\": {{filmScriptRefChapterStart}},\r\n                    \"verse\": {{filmScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{filmScriptRefBookEnd}}\",\r\n                    \"chapter\": {{filmScriptRefChapterEnd}},\r\n                    \"verse\": {{filmScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Film By Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var film_data = JSON.parse(pm.globals.get(\"film_data\"));\r",
									"\r",
									"console.log(\"film_data\",film_data)\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verifying film ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.film.id;  \r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"// Verifying returned film info with recently stored film info\r",
									"pm.test(\"Verifying film's createdAt\", function () {\r",
									"    var createdAt = jsonData.data.film.createdAt;\r",
									"    pm.expect(createdAt).to.eql(film_data.createdAt);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying film Name\", function () {\r",
									"    var filmeName = jsonData.data.film.name.value; \r",
									"    pm.expect(filmeName).to.eql(film_data.name.value);\r",
									"});\r",
									"\r",
									"//scriptureReferences\r",
									"\r",
									"pm.test(\"Verifying film scriptureReferences start book\", function () {\r",
									"    var startBook = jsonData.data.film.scriptureReferences.value[0].start.book; \r",
									"    pm.expect(startBook).to.eql(film_data.scriptureReferences.value[0].start.book); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying film scriptureReferences start chapter\", function () {\r",
									"    var startChapter = jsonData.data.film.scriptureReferences.value[0].start.chapter; \r",
									"    pm.expect(startChapter).to.eql(film_data.scriptureReferences.value[0].start.chapter); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying film scriptureReferences start verse\", function () {\r",
									"    var startVerse = jsonData.data.film.scriptureReferences.value[0].start.verse; \r",
									"    pm.expect(startVerse).to.eql(film_data.scriptureReferences.value[0].start.verse); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying film scriptureReferences start book name\", function () {\r",
									"    var startBookName = jsonData.data.film.scriptureReferences.value[0].start.bookName; \r",
									"    pm.expect(startBookName).to.eql(film_data.scriptureReferences.value[0].start.bookName); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying film scriptureReferences start label\", function () {\r",
									"    var startLabel = jsonData.data.film.scriptureReferences.value[0].start.label; \r",
									"    pm.expect(startLabel).to.eql(film_data.scriptureReferences.value[0].start.label); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying film scriptureReferences end book\", function () {\r",
									"    var endBook = jsonData.data.film.scriptureReferences.value[0].start.book; \r",
									"    pm.expect(endBook).to.eql(film_data.scriptureReferences.value[0].start.book); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying film scriptureReferences end chapter\", function () {\r",
									"    var endChapter = jsonData.data.film.scriptureReferences.value[0].end.chapter; \r",
									"    pm.expect(endChapter).to.eql(film_data.scriptureReferences.value[0].end.chapter); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying film scriptureReferences end verse\", function () {\r",
									"    var endVerse = jsonData.data.film.scriptureReferences.value[0].end.verse; \r",
									"    pm.expect(endVerse).to.eql(film_data.scriptureReferences.value[0].end.verse); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying film scriptureReferences end book name\", function () {\r",
									"    var endBookName = jsonData.data.film.scriptureReferences.value[0].end.bookName; \r",
									"    pm.expect(endBookName).to.eql(film_data.scriptureReferences.value[0].end.bookName); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying film scriptureReferences end label\", function () {\r",
									"    var endLabel = jsonData.data.film.scriptureReferences.value[0].end.label; \r",
									"    pm.expect(endLabel).to.eql(film_data.scriptureReferences.value[0].end.label); \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verifying film scriptureReferences label\", function () {\r",
									"    var label = jsonData.data.film.scriptureReferences.value[0].label; \r",
									"    pm.expect(label).to.eql(film_data.scriptureReferences.value[0].label); \r",
									"});\r",
									"\r",
									"pm.test(\"Verifying film scriptureReferences total verses\", function () {\r",
									"    var totalVerses = jsonData.data.film.scriptureReferences.value[0].totalVerses; \r",
									"    pm.expect(totalVerses).to.eql(film_data.scriptureReferences.value[0].totalVerses); \r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query film($id: ID!) {\r\n  film(id: $id) {\r\n    id\r\n    createdAt\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n    name {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"{{filmId}}\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Film By Id Mandatory Field Blank - id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is 400\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that language error message is correct\", function () {\r",
									"    var error_language_message = jsonData.errors[0].extensions.errors.id.IsId;\r",
									"    pm.expect(error_language_message).to.eql(\"Invalid ID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query film($id: ID!) {\r\n  film(id: $id) {\r\n    id\r\n    createdAt\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n    name {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Film By Id Mandatory Field Removed - id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query film($id: ID!) {\r\n  film(id: $id) {\r\n    id\r\n    createdAt\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n    name {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Film By Id Mandatory Parameter Mismatch - id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query film($id: ID!) {\r\n  film(id: $id) {\r\n    id\r\n    createdAt\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n    name {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"id1\": \"{{filmId}}\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Film By Id Mandatory Parameter Invalid - id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is 400\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that language error message is correct\", function () {\r",
									"    var error_language_message = jsonData.errors[0].extensions.errors.id.IsId;  \r",
									"    pm.expect(error_language_message).to.eql(\"Invalid ID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query film($id: ID!) {\r\n  film(id: $id) {\r\n    id\r\n    createdAt\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n    name {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"id\": \"!@#$%^&\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Film Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"filmName\", \"FilmName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('filmScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('filmScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('filmScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('filmScriptRefBookStart')} ${pm.globals.get('filmScriptRefChapterStart')}:${pm.globals.get('filmScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('filmScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('filmScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('filmScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('filmScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('filmScriptRefBookEnd')} ${pm.globals.get('filmScriptRefChapterStart')}:${pm.globals.get('filmScriptRefVerseStart')}`\r",
									"\r",
									"pm.globals.set('filmScriptRefLabelEnd', expectedLabelEnd);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var film_data = JSON.parse(pm.variables.get(\"film_data\"));\r",
									"const moment = require('moment');\r",
									"var lodash = require('lodash');\r",
									"\r",
									"// get film object first having same id as recently updated film's id\r",
									"var myfilm = lodash.find(jsonData.data.updateFilm.film, ['id', film_data.id]);\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that film ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateFilm.film.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film's createdAt is in Specific time format\", function () {\r",
									"    var time = jsonData.data.updateFilm.film.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated film name is same as requested\", function () {\r",
									"    var name = jsonData.data.updateFilm.film.name.value;\r",
									"    pm.expect(name).to.eql(pm.globals.get('filmName'));\r",
									"});\r",
									"\r",
									"//scriptureReferences\r",
									"pm.test(\"Verify that updated film scriptureReferences start book is same as requested\", function () {\r",
									"    var startBook = jsonData.data.updateFilm.film.scriptureReferences.value[0].start.book;\r",
									"    pm.expect(startBook).to.eql(pm.globals.get('filmScriptRefBookStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated film scriptureReferences start chapter is same as requested\", function () {\r",
									"    var startChapter = jsonData.data.updateFilm.film.scriptureReferences.value[0].start.chapter;\r",
									"    pm.expect(startChapter).to.eql(pm.globals.get('filmScriptRefChapterStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated film scriptureReferences start verse is same as requested\", function () {\r",
									"    var startVerse = jsonData.data.updateFilm.film.scriptureReferences.value[0].start.verse;\r",
									"    pm.expect(startVerse).to.eql(pm.globals.get('filmScriptRefVerseStart'));\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify that updated film scriptureReferences start label is same as requested\", function () {\r",
									"    var startLabel = jsonData.data.updateFilm.film.scriptureReferences.value[0].start.label;\r",
									"    pm.expect(startLabel).to.eql(pm.globals.get('filmScriptRefLabelStart'));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that updated film scriptureReferences end book is same as requested\", function () {\r",
									"    var endBook = jsonData.data.updateFilm.film.scriptureReferences.value[0].end.book;\r",
									"    pm.expect(endBook).to.eql(pm.globals.get('filmScriptRefBookEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated film scriptureReferences end chapter is same as requested\", function () {\r",
									"    var endChapter = jsonData.data.updateFilm.film.scriptureReferences.value[0].end.chapter;\r",
									"    pm.expect(endChapter).to.eql(pm.globals.get('filmScriptRefChapterEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated film scriptureReferences end verse is same as requested\", function () {\r",
									"    var endVerse = jsonData.data.updateFilm.film.scriptureReferences.value[0].end.verse;\r",
									"    pm.expect(endVerse).to.eql(pm.globals.get('filmScriptRefVerseEnd'));\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify that updated film scriptureReferences end label is same as requested\", function () {\r",
									"    var endlabel = jsonData.data.updateFilm.film.scriptureReferences.value[0].end.label;\r",
									"    pm.expect(endlabel).to.eql(pm.globals.get('filmScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"//static\r",
									"pm.test(\"Verify that updated film scriptureReferences label is same as requested\", function () {\r",
									"    var label = jsonData.data.updateFilm.film.scriptureReferences.value[0].label;\r",
									"    pm.expect(label).to.eql(pm.globals.get('filmScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated film scriptureReferences total verses is same as requested\", function () {\r",
									"    var totalVerses = jsonData.data.updateFilm.film.scriptureReferences.value[0].totalVerses;\r",
									"     pm.expect(totalVerses).to.be.above(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateFilm($input: UpdateFilmInput!) {\r\n  updateFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"id\": \"{{filmId}}\",\r\n            \"name\": \"{{filmName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{filmScriptRefBookStart}}\",\r\n                    \"chapter\": {{filmScriptRefChapterStart}},\r\n                    \"verse\": {{filmScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{filmScriptRefBookEnd}}\",\r\n                    \"chapter\": {{filmScriptRefChapterEnd}},\r\n                    \"verse\": {{filmScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Film Success - Only Required Inputs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var film_data = JSON.parse(pm.variables.get(\"film_data\"));\r",
									"const moment = require('moment');\r",
									"var lodash = require('lodash');\r",
									"\r",
									"// get film object first having same id as recently updated film's id\r",
									"var myfilm = lodash.find(jsonData.data.updateFilm.film, ['id', film_data.id]);\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that film ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateFilm.film.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film's createdAt is in Specific time format\", function () {\r",
									"    var time = jsonData.data.updateFilm.film.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated film name is same as requested\", function () {\r",
									"    var name = jsonData.data.updateFilm.film.name.value;\r",
									"    pm.expect(name).to.eql(pm.globals.get('filmName'));\r",
									"});\r",
									"\r",
									"//scriptureReferences\r",
									"pm.test(\"Verify that updated film scriptureReferences start book is same as requested\", function () {\r",
									"    var startBook = jsonData.data.updateFilm.film.scriptureReferences.value[0].start.book;\r",
									"    pm.expect(startBook).to.eql(pm.globals.get('filmScriptRefBookStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated film scriptureReferences start chapter is same as requested\", function () {\r",
									"    var startChapter = jsonData.data.updateFilm.film.scriptureReferences.value[0].start.chapter;\r",
									"    pm.expect(startChapter).to.eql(pm.globals.get('filmScriptRefChapterStart'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated film scriptureReferences start verse is same as requested\", function () {\r",
									"    var startVerse = jsonData.data.updateFilm.film.scriptureReferences.value[0].start.verse;\r",
									"    pm.expect(startVerse).to.eql(pm.globals.get('filmScriptRefVerseStart'));\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify that updated film scriptureReferences start label is same as requested\", function () {\r",
									"    var startLabel = jsonData.data.updateFilm.film.scriptureReferences.value[0].start.label;\r",
									"    pm.expect(startLabel).to.eql(pm.globals.get('filmScriptRefLabelStart'));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that updated film scriptureReferences end book is same as requested\", function () {\r",
									"    var endBook = jsonData.data.updateFilm.film.scriptureReferences.value[0].end.book;\r",
									"    pm.expect(endBook).to.eql(pm.globals.get('filmScriptRefBookEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated film scriptureReferences end chapter is same as requested\", function () {\r",
									"    var endChapter = jsonData.data.updateFilm.film.scriptureReferences.value[0].end.chapter;\r",
									"    pm.expect(endChapter).to.eql(pm.globals.get('filmScriptRefChapterEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated film scriptureReferences end verse is same as requested\", function () {\r",
									"    var endVerse = jsonData.data.updateFilm.film.scriptureReferences.value[0].end.verse;\r",
									"    pm.expect(endVerse).to.eql(pm.globals.get('filmScriptRefVerseEnd'));\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verify that updated film scriptureReferences end label is same as requested\", function () {\r",
									"    var endlabel = jsonData.data.updateFilm.film.scriptureReferences.value[0].end.label;\r",
									"    pm.expect(endlabel).to.eql(pm.globals.get('filmScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"//static\r",
									"pm.test(\"Verify that updated film scriptureReferences label is same as requested\", function () {\r",
									"    var label = jsonData.data.updateFilm.film.scriptureReferences.value[0].label;\r",
									"    pm.expect(label).to.eql(pm.globals.get('filmScriptRefLabelEnd'));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated film scriptureReferences total verses is same as requested\", function () {\r",
									"    var totalVerses = jsonData.data.updateFilm.film.scriptureReferences.value[0].totalVerses;\r",
									"    pm.expect(totalVerses).to.be.above(0);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateFilm($input: UpdateFilmInput!) {\r\n  updateFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"id\": \"{{filmId}}\"\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Film Mandatory Field Removed - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Field \\\"id\\\" of required type \\\"ID!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateFilm($input: UpdateFilmInput!) {\r\n  updateFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"name\": \"{{filmName}}\"\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Film Mandatory Field Blank  - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is 400\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film error message is correct\", function () {\r",
									"    var error_film_message = jsonData.errors[0].extensions.errors['film.id'].IsId;  \r",
									"    pm.expect(error_film_message).to.eql(\"Invalid ID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateFilm($input: UpdateFilmInput!) {\r\n  updateFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"id\": \"\",\r\n            \"name\": \"{{filmName}}\"\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Film Not Mandatory Field Removed  - Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that film ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.updateFilm.film.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that updated film name is equal to previous value\", function () {\r",
									"    var name = jsonData.data.updateFilm.film.name.value;\r",
									"    pm.expect(name).to.eql(pm.globals.get('filmName'));\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateFilm($input: UpdateFilmInput!) {\r\n  updateFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"id\": \"{{filmId}}\"\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Film Not Mandatory Field Blank - Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is 400\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film error message is correct\", function () {\r",
									"    var error_film_message = jsonData.errors[0].extensions.errors['film.name'].minLength;  \r",
									"    pm.expect(error_film_message).to.eql(\"name must be longer than or equal to 1 characters\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateFilm($input: UpdateFilmInput!) {\r\n  updateFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"id\": \"{{filmId}}\",\r\n            \"name\": \"\"\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Film Not Mandatory Field Removed  -  ScriptRef start book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateFilm($input: UpdateFilmInput!) {\r\n  updateFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"id\": \"{{filmId}}\",\r\n            \"name\": \"{{filmName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"chapter\": {{filmScriptRefChapterStart}},\r\n                    \"verse\": {{filmScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{filmScriptRefBookEnd}}\",\r\n                    \"chapter\": {{filmScriptRefChapterEnd}},\r\n                    \"verse\": {{filmScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Film Not Mandatory Field Blank - ScriptRef start book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateFilm($input: UpdateFilmInput!) {\r\n  updateFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"id\": \"{{filmId}}\",\r\n            \"name\": \"{{filmName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"\",\r\n                    \"chapter\": {{filmScriptRefChapterStart}},\r\n                    \"verse\": {{filmScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{filmScriptRefBookEnd}}\",\r\n                    \"chapter\": {{filmScriptRefChapterEnd}},\r\n                    \"verse\": {{filmScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Film Not Mandatory Field Removed  -  ScriptRef end book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;\r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateFilm($input: UpdateFilmInput!) {\r\n  updateFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"id\": \"{{filmId}}\",\r\n            \"name\": \"{{filmName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{filmScriptRefBookStart}}\",\r\n                    \"chapter\": {{filmScriptRefChapterStart}},\r\n                    \"verse\": {{filmScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"chapter\": {{filmScriptRefChapterEnd}},\r\n                    \"verse\": {{filmScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Film Not Mandatory Field Blank - ScriptRef end book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"filmName\", \"FilmName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('filmScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('filmScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('filmScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('filmScriptRefBookStart')} ${pm.globals.get('filmScriptRefChapterStart')}:${pm.globals.get('filmScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('filmScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('filmScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('filmScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('filmScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('filmScriptRefBookEnd')} ${pm.globals.get('filmScriptRefChapterStart')}:${pm.globals.get('filmScriptRefVerseStart')}`\r",
									"\r",
									"pm.globals.set('filmScriptRefLabelEnd', expectedLabelEnd);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;\r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;\r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateFilm($input: UpdateFilmInput!) {\r\n  updateFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"id\": \"{{filmId}}\",\r\n            \"name\": \"{{filmName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{filmScriptRefBookStart}}\",\r\n                    \"chapter\": {{filmScriptRefChapterStart}},\r\n                    \"verse\": {{filmScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"\",\r\n                    \"chapter\": {{filmScriptRefChapterEnd}},\r\n                    \"verse\": {{filmScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Film Parameter Mismatch- id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Field \\\"id\\\" of required type \\\"ID!\\\" was not provided.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateFilm($input: UpdateFilmInput!) {\r\n  updateFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"id1\": \"{{filmId}}\",\r\n            \"name\": \"{{filmName}}\"\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Film Parameter Mismatch- Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"     pm.expect(error_message).to.include(\"is not defined by type \\\"UpdateFilm\\\". Did you mean \\\"name\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateFilm($input: UpdateFilmInput!) {\r\n  updateFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"id\": \"{{filmId}}\",\r\n            \"name1\": \"{{filmName}}\"\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Film Parameter Invalid - id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_code).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error filmID message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors['film.id'].IsId;  \r",
									"    pm.expect(error_message).to.include(\"Invalid ID\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateFilm($input: UpdateFilmInput!) {\r\n  updateFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"id\": \"!@#$%^&8\",\r\n            \"name\": \"{{filmName}}\"\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Get All Film ( Create Film)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"filmName\", \"FilmName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('filmScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('filmScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('filmScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('filmScriptRefBookStart')} ${pm.globals.get('filmScriptRefChapterStart')}:${pm.globals.get('filmScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('filmScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('filmScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('filmScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('filmScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('filmScriptRefBookEnd')} ${pm.globals.get('filmScriptRefChapterStart')}:${pm.globals.get('filmScriptRefVerseStart')}`\r",
									"\r",
									"pm.globals.set('filmScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"//Test Specific\r",
									"var id = jsonData.data.createFilm.film.id;\r",
									"pm.globals.set(\"filmId\", id);\r",
									"\r",
									"// Saving whole Film Object to globals for future use\r",
									"var film = JSON.stringify(jsonData.data.createFilm.film);\r",
									"pm.globals.set(\"film_data\", film);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"name\": \"{{filmName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{filmScriptRefBookStart}}\",\r\n                    \"chapter\": {{filmScriptRefChapterStart}},\r\n                    \"verse\": {{filmScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{filmScriptRefBookEnd}}\",\r\n                    \"chapter\": {{filmScriptRefChapterEnd}},\r\n                    \"verse\": {{filmScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Films Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var lodash = require('lodash');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - Pagination\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.films.total;\r",
									"    pm.expect(total).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that hasMore is correct\", function () {\r",
									"    var total = jsonData.data.films.total;\r",
									"    var hasMore = jsonData.data.films.hasMore;\r",
									"    if (Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) < total) {\r",
									"        pm.expect(hasMore).to.eql(true);\r",
									"    } else {\r",
									"        pm.expect(hasMore).to.eql(false);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that number of items returned are exact\", function () {\r",
									"    var total = jsonData.data.films.total;                  // total returned in response\r",
									"    var returneditems = jsonData.data.films.items.length;   // no. of items returned in response array\r",
									"    var itemCount = Number(pm.globals.get('itemCount'));    // no. of items per page\r",
									"    var page = Number(pm.globals.get('page'));              // page number\r",
									"    var expectedItems = itemCount * page;                   // items we are expecting\r",
									"\r",
									"    if (expectedItems <= total) {\r",
									"        pm.expect(returneditems).to.eql(itemCount);\r",
									"    } else {\r",
									"        if ((expectedItems - total) < itemCount) {\r",
									"            var lastItems = total - ((itemCount * (page - 1)));   // items in last page\r",
									"            pm.expect(returneditems).to.eql(lastItems);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"/**\r",
									" * Setting up 'page' number to be used in next request\r",
									" * For locating recently created Object position on Specific page\r",
									" */\r",
									"var total = jsonData.data.films.total;\r",
									"var itemCount = Number(pm.globals.get('itemCount'));\r",
									"\r",
									"if (total > itemCount) {\r",
									"\r",
									"    if ((total % itemCount) == 0) {\r",
									"        var pageToset = total / itemCount;\r",
									"        pm.globals.set(\"page\", pageToset);\r",
									"    } else {\r",
									"        var pageToset = Math.floor(total / itemCount) + 1;\r",
									"        pm.globals.set(\"page\", pageToset);\r",
									"    }\r",
									"\r",
									"} else {\r",
									"    pm.globals.set(\"page\", 1);  // Set page to 1 if total <= itemCount\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query films($input: FilmListInput!) {\r\n  films(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Films Success - item Object",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"// Page is set from previous request test script based on total\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var film_data = JSON.parse(pm.variables.get(\"film_data\")); // Get stored film object\r",
									"const moment = require('moment');\r",
									"var lodash = require('lodash');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - Pagination\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.films.total;\r",
									"    pm.expect(total).to.be.above(0);\r",
									"});\r",
									"\r",
									"/**\r",
									" * Verifying recently created films's information with films object returned within items array\r",
									" */\r",
									"\r",
									"// get films object first having same id as recently created films's id\r",
									"var myFilm = lodash.find(jsonData.data.films.items, ['id', film_data.id]);\r",
									"\r",
									"pm.test(\"Verify that recently created films ID is not blank or null\", function () {\r",
									"    var id = myFilm.id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created films's createdAt is in Specific time format\", function () {\r",
									"    var time = myFilm.createdAt;\r",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();\r",
									"    pm.expect(isValidTime).to.eql(true);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created films's id\", function () {\r",
									"    var id = myFilm.id;\r",
									"    pm.expect(id).to.eql(film_data.id);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created films's name\", function () {\r",
									"    var name = myFilm.name.value;\r",
									"    pm.expect(name).to.eql(film_data.name.value);\r",
									"});\r",
									"\r",
									"\r",
									"//scriptureReferences\r",
									"pm.test(\"Verifying recently created films's scriptureReferences start book\", function () {\r",
									"    var startBook = myFilm.scriptureReferences.value[0].start.book;\r",
									"    pm.expect(startBook).to.eql(film_data.scriptureReferences.value[0].start.book);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created films's scriptureReferences start chapter\", function () {\r",
									"    var startChapter = myFilm.scriptureReferences.value[0].start.chapter;\r",
									"    pm.expect(startChapter).to.eql(film_data.scriptureReferences.value[0].start.chapter);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created films's scriptureReferences start verse\", function () {\r",
									"    var startVerse = myFilm.scriptureReferences.value[0].start.verse;\r",
									"    pm.expect(startVerse).to.eql(film_data.scriptureReferences.value[0].start.verse);\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verifying recently created films's scriptureReferences start label\", function () {\r",
									"    var startLabel = myFilm.scriptureReferences.value[0].start.label;\r",
									"    pm.expect(startLabel).to.eql(film_data.scriptureReferences.value[0].start.label);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verifying recently created films's scriptureReferences end book\", function () {\r",
									"    var endBook = myFilm.scriptureReferences.value[0].end.book;\r",
									"    pm.expect(endBook).to.eql(film_data.scriptureReferences.value[0].end.book);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created films's scriptureReferences end chapter\", function () {\r",
									"    var endChapter = myFilm.scriptureReferences.value[0].end.chapter;\r",
									"    pm.expect(endChapter).to.eql(film_data.scriptureReferences.value[0].end.chapter);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created films's scriptureReferences end verse\", function () {\r",
									"    var endVerse = myFilm.scriptureReferences.value[0].end.verse;\r",
									"    pm.expect(endVerse).to.eql(film_data.scriptureReferences.value[0].end.verse);\r",
									"});\r",
									"\r",
									"//Static\r",
									"pm.test(\"Verifying recently created films's scriptureReferences end label\", function () {\r",
									"    var endLabel = myFilm.scriptureReferences.value[0].end.label;\r",
									"    pm.expect(endLabel).to.eql(film_data.scriptureReferences.value[0].end.label);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created films's scriptureReferences  label\", function () {\r",
									"    var label = myFilm.scriptureReferences.value[0].label;\r",
									"    pm.expect(label).to.eql(film_data.scriptureReferences.value[0].label);\r",
									"});\r",
									"\r",
									"pm.test(\"Verifying recently created films's scriptureReferences  totalVerses\", function () {\r",
									"    var totalVerses = myFilm.scriptureReferences.value[0].totalVerses;\r",
									"    pm.expect(totalVerses).to.eql(film_data.scriptureReferences.value[0].totalVerses);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query films($input: FilmListInput!) {\r\n  films(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Films Success - total",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - total\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.films.total;  \r",
									"    pm.expect(total).to.be.above(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query films($input: FilmListInput!) {\r\n  films(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Films Success - hasmore - True",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - hasMore\r",
									"pm.test(\"Verify that hasMore is true Only when film items are still available\", function () {\r",
									"    var total = jsonData.data.films.total;\r",
									"    var hasMore = jsonData.data.films.hasMore;  \r",
									"    if(Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) < total){\r",
									"        pm.expect(hasMore).to.eql(true);\r",
									"    } else {\r",
									"        pm.expect(hasMore).to.eql(false);\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query films($input: FilmListInput!) {\r\n  films(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Films Success - hasmore - False",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - hasMore\r",
									"pm.test(\"Verify that hasMore is false Only when no more film items available\", function () {\r",
									"    var total = jsonData.data.films.total;\r",
									"    var hasMore = jsonData.data.films.hasMore;  \r",
									"    if(Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) >= total){\r",
									"        pm.expect(hasMore).to.eql(false);\r",
									"    } else{\r",
									"        pm.expect(hasMore).to.eql(true);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that film ID is not blank or null\", function () {\r",
									"    var id = jsonData.data.films.items[0].id;\r",
									"    pm.expect(id).to.not.eql(null);\r",
									"    pm.expect(id).to.not.eql(\"\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query films($input: FilmListInput!) {\r\n  films(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Films Success - Items",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific - no. of items are exact\r",
									"pm.test(\"Verify that number of items returned are exact\", function () {\r",
									"    var total = jsonData.data.films.total;                  // total returned in response\r",
									"    var returneditems = jsonData.data.films.items.length;   // no. of items returned in response array\r",
									"    var itemCount = Number(pm.globals.get('itemCount'));    // no. of items per page 2\r",
									"    var page = Number(pm.globals.get('page'));              // page number 5\r",
									"    var expectedItems = itemCount * page;                   // items we are expecting 10\r",
									"\r",
									"    if (expectedItems <= total) {\r",
									"        pm.expect(returneditems).to.eql(itemCount);\r",
									"    } else {\r",
									"        if ((expectedItems - total) < itemCount) {\r",
									"            var lastItems = total - ((itemCount * (page - 1)));   // items in last page\r",
									"            pm.expect(returneditems).to.eql(lastItems);\r",
									"        }\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query films($input: FilmListInput!) {\r\n  films(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Sort Films by Name ( Create Film )",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// Changed for sorting purpose\r",
									"pm.globals.set(\"filmName\", \"automation_Filmsort\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('filmScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('filmScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('filmScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('filmScriptRefBookStart')} ${pm.globals.get('filmScriptRefChapterStart')}:${pm.globals.get('filmScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('filmScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('filmScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('filmScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('filmScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('filmScriptRefBookEnd')} ${pm.globals.get('filmScriptRefChapterStart')}:${pm.globals.get('filmScriptRefVerseStart')}`\r",
									"\r",
									"pm.globals.set('filmScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"name\": \"{{filmName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{filmScriptRefBookStart}}\",\r\n                    \"chapter\": {{filmScriptRefChapterStart}},\r\n                    \"verse\": {{filmScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{filmScriptRefBookEnd}}\",\r\n                    \"chapter\": {{filmScriptRefChapterEnd}},\r\n                    \"verse\": {{filmScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for FilterSort Films by Name ( Create Film )",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"// Changed for sorting and Filter purpose\r",
									"pm.globals.set(\"filmName\", \"FilterSortFilmName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('filmScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('filmScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('filmScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('filmScriptRefBookStart')} ${pm.globals.get('filmScriptRefChapterStart')}:${pm.globals.get('filmScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('filmScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('filmScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('filmScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('filmScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('filmScriptRefBookEnd')} ${pm.globals.get('filmScriptRefChapterStart')}:${pm.globals.get('filmScriptRefVerseStart')}`\r",
									"\r",
									"pm.globals.set('filmScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"name\": \"{{filmName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{filmScriptRefBookStart}}\",\r\n                    \"chapter\": {{filmScriptRefChapterStart}},\r\n                    \"verse\": {{filmScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{filmScriptRefBookEnd}}\",\r\n                    \"chapter\": {{filmScriptRefChapterEnd}},\r\n                    \"verse\": {{filmScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Sort Films by Name ( Create Film 2 )",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"// Changed for sorting purpose\r",
									"pm.globals.set(\"filmName\", \"Automation_Filmsort\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createFilm($input: CreateFilmInput!) {\r\n  createFilm(input: $input) {\r\n    film {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canRead\r\n        canEdit\r\n      }\r\n      scriptureReferences {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          totalVerses\r\n          label\r\n          start {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n          end {\r\n            book\r\n\r\n            label\r\n            chapter\r\n            verse\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"film\": {\r\n            \"name\": \"{{filmName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{filmScriptRefBookStart}}\",\r\n                    \"chapter\": {{filmScriptRefChapterStart}},\r\n                    \"verse\": {{filmScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{filmScriptRefBookEnd}}\",\r\n                    \"chapter\": {{filmScriptRefChapterEnd}},\r\n                    \"verse\": {{filmScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Films Success -  name sorting ASC",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var lodash = require('lodash');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.films.total;\r",
									"    pm.expect(total).to.be.above(0);\r",
									"});\r",
									"\r",
									"//Test Specific - Name sorting ASC\r",
									"pm.test(\"Verify that items are sorted by 'NAME' and orderd by 'ASC' order \", function () {\r",
									"\r",
									"    var responseBody = jsonData.data.films.items;\r",
									"    var expectedSortedOrder = lodash.orderBy(responseBody, item => item.name.value.toLowerCase(), ['asc']);\r",
									"    pm.expect(responseBody).to.eql(expectedSortedOrder);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query films($input: FilmListInput!) {\r\n  films(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Films Success -  name sorting DESC",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"DESC\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var lodash = require('lodash');\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that total is greater than Zero\", function () {\r",
									"    var total = jsonData.data.films.total;\r",
									"    pm.expect(total).to.be.above(0);\r",
									"});\r",
									"\r",
									"//Test Specific - Name sorting DESC\r",
									"pm.test(\"Verify that items are sorted by 'NAME' and orderd by 'DESC' order \", function () {\r",
									"\r",
									"    var responseBody = jsonData.data.films.items;\r",
									"    var expectedSortedOrder = lodash.orderBy(responseBody, item => item.name.value.toLowerCase(), ['desc']);\r",
									"    pm.expect(responseBody).to.eql(expectedSortedOrder);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query films($input: FilmListInput!) {\r\n  films(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Films  Not Mandatory Field Removed - count",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that number of items returned is equal to total\", function () {\r",
									"    var total = jsonData.data.films.total;\r",
									"    var items = jsonData.data.films.items.length;\r",
									"    if (total <= 25)    // 25 is maximum db items limit returned per page when count is not specified\r",
									"        pm.expect(items).to.eql(total);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query films($input: FilmListInput!) {\r\n  films(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Films  Not Mandatory Field Blank - sort",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Invalid input\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 500\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is InternalServerError\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"InternalServerError\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query films($input: FilmListInput!) {\r\n  films(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Films  Not Mandatory Field  Blank - order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Order\\\" enum.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query films($input: FilmListInput!) {\r\n  films(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Films Parameter Mismatch - count",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"FilmListInput\\\". Did you mean \\\"count\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query films($input: FilmListInput!) {\r\n  films(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count1\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Films Parameter Mismatch - page",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"FilmListInput\\\". Did you mean \\\"page\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query films($input: FilmListInput!) {\r\n  films(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page1\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Films Parameter Mismatch - sort",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"FilmListInput\\\". Did you mean \\\"sort\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query films($input: FilmListInput!) {\r\n  films(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort1\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Films Parameter Mismatch - order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"FilmListInput\\\". Did you mean \\\"order\\\"?\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query films($input: FilmListInput!) {\r\n  films(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order1\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Films Parameter Invalid - count min",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that count error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors.count.min;  \r",
									"    pm.expect(error_message).to.eql(\"count must not be less than 1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query films($input: FilmListInput!) {\r\n  films(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": 0,\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Films Parameter Invalid - count max",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that count error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors.count.max;  \r",
									"    pm.expect(error_message).to.eql(\"count must not be greater than 100\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query films($input: FilmListInput!) {\r\n  films(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": 159,\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Films Parameter Invalid  - page",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that count error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].extensions.errors.page.min;  \r",
									"    pm.expect(error_message).to.eql(\"page must not be less than 1\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query films($input: FilmListInput!) {\r\n  films(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": 0,\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Films Parameter Invalid - sort",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"PENDING >> Similar to BUG #776(closed-Sprint 13) for Users (Sort Field allows empty value/unusual characters)\", function () {\r",
									"\r",
									"    if (jsonData.data) {\r",
									"        pm.expect(\"BACKEND\").to.eql(\"PENDING\"); // fail forcefully\r",
									"    } else {\r",
									"        pm.expect(\"WRITE TEST CASES\").to.eql(\"ERRORS >>> \" + jsonData.errors[0].message);\r",
									"    }\r",
									"});\r",
									"\r",
									"// pm.test(\"Verify that error message is correct\", function () {\r",
									"//     var error_message = jsonData.errors[0].message;  \r",
									"//     pm.expect(error_message).to.include(\"Invalid input\");\r",
									"// });\r",
									"\r",
									"// pm.test(\"Verify that error code is InternalServerError\", function () {\r",
									"//     var error_code = jsonData.errors[0].extensions.code;  \r",
									"//     pm.expect(error_code).to.eql(\"InternalServerError\");\r",
									"// });\r",
									"\r",
									"// pm.test(\"Verify that error status is 500\", function () {\r",
									"//     var error_status = jsonData.errors[0].extensions.status;  \r",
									"//     pm.expect(error_status).to.eql(500);\r",
									"// });\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query films($input: FilmListInput!) {\r\n  films(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"qwerty\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Films Parameter Invalid - order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Order\\\" enum\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query films($input: FilmListInput!) {\r\n  films(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"11 #$%% ^&*\"\r\n    }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Film Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that Film is deleted\", function () {\r",
									"    pm.expect(jsonData.data.deleteFilm).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteFilm($id:ID!) {\r\n  deleteFilm(id: $id)\r\n}\r\n",
								"variables": "{\r\n    \"id\": \"{{filmId}}\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Film Mandatory Field Blank  - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is 400\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that language error message is correct\", function () {\r",
									"    var error_language_message = jsonData.errors[0].extensions.errors.id.IsId;  \r",
									"    pm.expect(error_language_message).to.eql(\"Invalid ID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteFilm($id:ID!) {\r\n  deleteFilm(id: $id)\r\n}\r\n",
								"variables": "{\r\n    \"id\": \"\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Film  Mandatory Field Removed  - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteFilm($id:ID!) {\r\n  deleteFilm(id: $id)\r\n}\r\n",
								"variables": "{\r\n   \r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Film Parameter Mismatch - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteFilm($id:ID!) {\r\n  deleteFilm(id: $id)\r\n}\r\n",
								"variables": "{\r\n    \"id1\": \"{{filmId}}\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Film Parameter Invalid - Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteFilm($id:ID!) {\r\n  deleteFilm(id: $id)\r\n}\r\n",
								"variables": "{\r\n    \"id1\": \"!@#$%^&*\"\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
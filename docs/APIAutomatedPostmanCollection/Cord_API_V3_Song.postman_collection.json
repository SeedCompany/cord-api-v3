{
	"info": {
		"_postman_id": "08485813-a8ea-4872-8083-da6a36c4b8e6",
		"name": "Cord_API_V3_Song",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Pre-req ( Session + Register + Login ) for Song",
			"item": [
				{
					"name": "Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "41838f6d-9098-4991-9136-73bbad32a2d8",
								"exec": [
									"var response = pm.response.json();\r",
									"pm.globals.set(\"token\", response.data.session.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Write your query or mutation here\r\nquery {\r\n  session(browser: false) {\r\n    user {\r\n      id,\r\n      email\r\n      {\r\n        value\r\n      }\r\n      realFirstName\r\n      {\r\n        value\r\n      }\r\n      createdAt\r\n      displayLastName\r\n      {\r\n         value\r\n      }\r\n      \r\n      \r\n      \r\n    },\r\n    token\r\n  }\r\n}",
								"variables": ""
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba2976aa-f6c3-47e7-b575-f1982a3f415e",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"// This is safe check to prevent failing futher cases If the Root User is already Created\r",
									"if (jsonData.errors) {\r",
									"    if (jsonData.errors.length) return;\r",
									"}\r",
									"\r",
									"//Saving data for future use\r",
									"var id = jsonData.data.register.user.id;\r",
									"pm.globals.set(\"userid\", id);\r",
									"\r",
									"var user = JSON.stringify(jsonData.data.register.user);\r",
									"pm.globals.set(\"user_data\", user);\r",
									"\r",
									"var email = jsonData.data.register.user.email.value;\r",
									"pm.globals.set(\"email\", email);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6075fdad-e064-4ca9-85a5-c1616bef3c2d",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"\r",
									"pm.globals.set(\"realFirstName\", \"FirstName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"realLastName\", \"LastName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"email\", \"email\" + moment().format(\"DDMYYYYhhmmss\") + \"@test.com\");\r",
									"pm.globals.set(\"password\", moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"displayFirstName\", \"DisplayFirstName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"displayLastName\", \"DisplayLastName\" + moment().format(\"DDMYYYYhhmmss\"));\r",
									"pm.globals.set(\"phone\", pm.variables.replaceIn('{{$randomPhoneNumber}}'));\r",
									"\r",
									"var timezoneObject = {\r",
									"    \"name\": \"Europe/Andorra\",\r",
									"    \"lat\": 42.5,\r",
									"    \"long\": 1.5167,\r",
									"    \"countries\": [\r",
									"        {\r",
									"            \"code\": \"AD\",\r",
									"            \"name\": \"Andorra\",\r",
									"            \"zones\": [\r",
									"                {\r",
									"                    \"name\": \"Europe/Andorra\",\r",
									"                    \"lat\": 42.5,\r",
									"                    \"long\": 1.5167,\r",
									"                    \"countries\": [\r",
									"                        {\r",
									"                            \"code\": \"AD\",\r",
									"                            \"name\": \"Andorra\"\r",
									"                        }\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"};\r",
									"pm.globals.set('timezoneObject', JSON.stringify(timezoneObject));\r",
									"pm.globals.set(\"timezone\", timezoneObject.name);\r",
									"\r",
									"pm.globals.set(\"about\", \"I'm Tester\");\r",
									"\r",
									"pm.globals.set(\"userTitle\", \"Tester\");\r",
									"\r",
									"// Taking random value for the User status from pre-defined possible values\r",
									"var userStatusArray = ['Active','Disabled'];\r",
									"var randomNumber = Math.floor(Math.random()*userStatusArray.length);\r",
									"// pm.globals.set('userStatus', userStatusArray[randomNumber]);\r",
									"pm.globals.set(\"userStatus\", \"Active\");\r",
									"\r",
									"var userRolesArray = ['BibleTranslationLiaison',\r",
									"'Consultant',\r",
									"'ConsultantManager',\r",
									"'Controller',\r",
									"'Development',\r",
									"'ExecutiveDevelopmentRepresentative',\r",
									"'ExecutiveLeadership',\r",
									"'FieldOperationsDirector',\r",
									"'FieldPartner',\r",
									"'FinancialAnalyst',\r",
									"'Intern',\r",
									"'Liaison',\r",
									"'LeadFinancialAnalyst',\r",
									"'Mentor',\r",
									"'OfficeOfThePresident',\r",
									"'ProjectManager',\r",
									"'RegionalCommunicationsCoordinator',\r",
									"'RegionalDirector',\r",
									"'SupportingProjectManager',\r",
									"'Translator',\r",
									"'Writer'\r",
									"];\r",
									"var randomNumber = Math.floor(Math.random()*userRolesArray.length);\r",
									"pm.globals.set('userRoles', userRolesArray[randomNumber]);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation register($input: RegisterInput!) {\r\n  register(input: $input) {\r\n    user {\r\n      id\r\n      fullName\r\n      firstName\r\n      avatarLetters\r\n      createdAt\r\n      email {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      phone {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      about {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      status {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      roles {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      title {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      timezone {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          name\r\n          lat\r\n          long\r\n          countries {\r\n            code\r\n            name\r\n            zones {\r\n              name\r\n              lat\r\n              long\r\n              countries {\r\n                code\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      unavailabilities {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          description {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          start\r\n          end\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      organizations {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          name {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          avatarLetters\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      education {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          degree {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          major {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          institution {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"realFirstName\": \"Piyush\",\r\n        \"realLastName\": \"Patel\",\r\n        \"email\": \"{{login_email}}\",\r\n        \"password\": \"{{login_password}}\",\r\n        \"displayFirstName\": \"{{displayFirstName}}\",\r\n        \"displayLastName\": \"{{displayLastName}}\",\r\n        \"phone\": \"{{phone}}\",\r\n        \"timezone\": \"{{timezone}}\",\r\n        \"status\": \"{{userStatus}}\",\r\n        \"title\": \"{{userTitle}}\",\r\n        \"roles\": \"{{userRoles}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Root Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ff21945-3047-4294-a0e7-7c4d35020359",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var id = jsonData.data.login.user.id;",
									"pm.globals.set(\"userid\", id);",
									"",
									"var email = jsonData.data.login.user.email.value;",
									"pm.globals.set(\"email\", email);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5f05966c-ff80-48d1-83f4-248f55ba6ec8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation login($input: LoginInput!) {\r\n  login(input: $input) {\r\n    user {\r\n      id\r\n      fullName\r\n      firstName\r\n      avatarLetters\r\n      createdAt\r\n      email {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      realLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayFirstName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      displayLastName {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      phone {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      about {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      status {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      roles {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      title {\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      timezone {\r\n        canRead\r\n        canEdit\r\n        value {\r\n          name\r\n          lat\r\n          long\r\n          countries {\r\n            code\r\n            name\r\n            zones {\r\n              name\r\n              lat\r\n              long\r\n              countries {\r\n                code\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      unavailabilities {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          description {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          start\r\n          end\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      organizations {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          name {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          avatarLetters\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n      education {\r\n        canRead\r\n        items {\r\n          id\r\n          createdAt\r\n          degree {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          major {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n          institution {\r\n            canRead\r\n            canEdit\r\n            value\r\n          }\r\n        }\r\n        total\r\n        hasMore\r\n        canCreate\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n   \"input\": {\r\n      \"email\": \"{{login_email}}\",\r\n      \"password\": \"{{login_password}}\"\r\n   }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Song",
			"item": [
				{
					"name": "Create Song success - Same Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83a3977e-8576-44f3-a153-49260ed3b955",
								"exec": [
									"var jsonData = pm.response.json();",
									"const moment = require('moment');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that Song ID is not blank or null\", function () {",
									"    var id = jsonData.data.createSong.song.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"",
									"    // Saving data for future use",
									"    pm.globals.set(\"songId\", id);",
									"});",
									"",
									"// Saving whole Song Object to globals for future use",
									"var song = JSON.stringify(jsonData.data.createSong.song);",
									"pm.globals.set(\"song_data\", song);",
									"",
									"pm.test(\"Verify that song's createdAt is in Specific time format\", function () {",
									"    var time = jsonData.data.createSong.song.createdAt;",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();",
									"    pm.expect(isValidTime).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify that song Name is same as requested\", function () {",
									"    var songName = jsonData.data.createSong.song.name.value;",
									"    pm.expect(songName).to.eql(pm.globals.get('songName'));",
									"});",
									"",
									"",
									"//scriptureReferences",
									"",
									"pm.test(\"Verify that song scriptureReferences total verses is same as requested\", function () {",
									"    var totalVerses = jsonData.data.createSong.song.scriptureReferences.value[0].totalVerses;",
									"        pm.expect(totalVerses).to.be.above(0);",
									"});",
									"",
									"//Static data",
									"pm.test(\"Verify that song scriptureReferences start book is same as requested\", function () {",
									"    var startBook = jsonData.data.createSong.song.scriptureReferences.value[0].start.book;",
									"    pm.expect(startBook).to.eql(pm.globals.get('songScriptRefBookStart'));",
									"});",
									"",
									"pm.test(\"Verify that song scriptureReferences start label is same as requested\", function () {",
									"    var startLabel = jsonData.data.createSong.song.scriptureReferences.value[0].start.label;",
									"    pm.expect(startLabel).to.eql(pm.globals.get('songScriptRefLabelStart'));",
									"});",
									"",
									"pm.test(\"Verify that song scriptureReferences start chapter is same as requested\", function () {",
									"    var startChapter = jsonData.data.createSong.song.scriptureReferences.value[0].start.chapter;",
									"    pm.expect(startChapter).to.eql(pm.globals.get('songScriptRefChapterStart'));",
									"});",
									"",
									"pm.test(\"Verify that song scriptureReferences start verse is same as requested\", function () {",
									"    var startVerse = jsonData.data.createSong.song.scriptureReferences.value[0].start.verse;",
									"    pm.expect(startVerse).to.eql(pm.globals.get('songScriptRefVerseStart'));",
									"});",
									"",
									"pm.test(\"Verify that song scriptureReferences end book is same as requested\", function () {",
									"    var endBook = jsonData.data.createSong.song.scriptureReferences.value[0].end.book;",
									"    pm.expect(endBook).to.eql(pm.globals.get('songScriptRefBookEnd'));",
									"});",
									"",
									"pm.test(\"Verify that song scriptureReferences end label is same as requested\", function () {",
									"    var endLabel = jsonData.data.createSong.song.scriptureReferences.value[0].end.label;",
									"    pm.expect(endLabel).to.eql(pm.globals.get('songScriptRefLabelEnd'));",
									"});",
									"",
									"pm.test(\"Verify that song scriptureReferences end chapter is same as requested\", function () {",
									"    var endChapter = jsonData.data.createSong.song.scriptureReferences.value[0].end.chapter;",
									"    pm.expect(endChapter).to.eql(pm.globals.get('songScriptRefChapterEnd'));",
									"});",
									"",
									"pm.test(\"Verify song scriptureReferences label\", function () {",
									"    var label = jsonData.data.createSong.song.scriptureReferences.value[0].label;",
									"    pm.expect(label).to.eql(pm.globals.get('songScriptRefLabelEnd'));",
									"});",
									"",
									"pm.test(\"Verify that song scriptureReferences end verse is same as requested\", function () {",
									"    var endVerse = jsonData.data.createSong.song.scriptureReferences.value[0].end.verse;",
									"    pm.expect(endVerse).to.eql(pm.globals.get('songScriptRefVerseEnd'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "90aed534-2747-42fb-838b-88524521ac46",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"songName\", \"SongName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('songScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('songScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('songScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('songScriptRefBookStart')} ${pm.globals.get('songScriptRefChapterStart')}:${pm.globals.get('songScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('songScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('songScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('songScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('songScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('songScriptRefBookEnd')} ${pm.globals.get('songScriptRefChapterEnd')}:${pm.globals.get('songScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('songScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createSong($input: CreateSongInput!) {\r\n  createSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"song\": {\r\n            \"name\": \"{{songName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{songScriptRefBookStart}}\",\r\n                    \"chapter\": {{songScriptRefChapterStart}},\r\n                    \"verse\": {{songScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{songScriptRefBookEnd}}\",\r\n                    \"chapter\": {{songScriptRefChapterEnd}},\r\n                    \"verse\": {{songScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Song success - Diffrent Book",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1227868-1d8b-4eab-b804-cd65b46756bb",
								"exec": [
									"var jsonData = pm.response.json();",
									"const moment = require('moment');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that Song ID is not blank or null\", function () {",
									"    var id = jsonData.data.createSong.song.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"",
									"    // Saving data for future use",
									"    pm.globals.set(\"songId\", id);",
									"});",
									"",
									"// Saving whole Song Object to globals for future use",
									"var song = JSON.stringify(jsonData.data.createSong.song);",
									"pm.globals.set(\"song_data\", song);",
									"",
									"pm.test(\"Verify that song's createdAt is in Specific time format\", function () {",
									"    var time = jsonData.data.createSong.song.createdAt;",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();",
									"    pm.expect(isValidTime).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify that song Name is same as requested\", function () {",
									"    var songName = jsonData.data.createSong.song.name.value;",
									"    pm.expect(songName).to.eql(pm.globals.get('songName'));",
									"});",
									"",
									"",
									"//scriptureReferences",
									"pm.test(\"Verify that song scriptureReferences total verses is same as requested\", function () {",
									"    var totalVerses = jsonData.data.createSong.song.scriptureReferences.value[0].totalVerses;",
									"    pm.expect(totalVerses).to.be.above(0);",
									"});",
									"",
									"//Static data",
									"pm.test(\"Verify that song scriptureReferences start book is same as requested\", function () {",
									"    var startBook = jsonData.data.createSong.song.scriptureReferences.value[0].start.book;",
									"    pm.expect(startBook).to.eql(pm.globals.get('songScriptRefBookStart'));",
									"});",
									"",
									"pm.test(\"Verify that song scriptureReferences start label is same as requested\", function () {",
									"    var startLabel = jsonData.data.createSong.song.scriptureReferences.value[0].start.label;",
									"    pm.expect(startLabel).to.eql(pm.globals.get('songScriptRefLabelStart'));",
									"});",
									"",
									"pm.test(\"Verify that song scriptureReferences start chapter is same as requested\", function () {",
									"    var startChapter = jsonData.data.createSong.song.scriptureReferences.value[0].start.chapter;",
									"    pm.expect(startChapter).to.eql(pm.globals.get('songScriptRefChapterStart'));",
									"});",
									"",
									"pm.test(\"Verify that song scriptureReferences start verse is same as requested\", function () {",
									"    var startVerse = jsonData.data.createSong.song.scriptureReferences.value[0].start.verse;",
									"    pm.expect(startVerse).to.eql(pm.globals.get('songScriptRefVerseStart'));",
									"});",
									"",
									"pm.test(\"Verify that song scriptureReferences end book is same as requested\", function () {",
									"    var endBook = jsonData.data.createSong.song.scriptureReferences.value[0].end.book;",
									"    pm.expect(endBook).to.eql(pm.globals.get('songScriptRefBookEnd'));",
									"});",
									"",
									"pm.test(\"Verify that song scriptureReferences end label is same as requested\", function () {",
									"    var endLabel = jsonData.data.createSong.song.scriptureReferences.value[0].end.label;",
									"    pm.expect(endLabel).to.eql(pm.globals.get('songScriptRefLabelEnd'));",
									"});",
									"",
									"pm.test(\"Verify that song scriptureReferences end chapter is same as requested\", function () {",
									"    var endChapter = jsonData.data.createSong.song.scriptureReferences.value[0].end.chapter;",
									"    pm.expect(endChapter).to.eql(pm.globals.get('songScriptRefChapterEnd'));",
									"});",
									"",
									"pm.test(\"Verify song scriptureReferences label\", function () {",
									"    var label = jsonData.data.createSong.song.scriptureReferences.value[0].label;",
									"    var startLabel = jsonData.data.createSong.song.scriptureReferences.value[0].start.label;",
									"    var endLabel = jsonData.data.createSong.song.scriptureReferences.value[0].end.label;",
									"    var expectedLabel = startLabel + \"-\" + endLabel;",
									"    pm.expect(label).to.eql(expectedLabel);",
									"});",
									"",
									"pm.test(\"Verify that song scriptureReferences end verse is same as requested\", function () {",
									"    var endVerse = jsonData.data.createSong.song.scriptureReferences.value[0].end.verse;",
									"    pm.expect(endVerse).to.eql(pm.globals.get('songScriptRefVerseEnd'));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "961b6b3f-6c5b-416b-afa7-1e6f7254992c",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"songName\", \"SongName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('songScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('songScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('songScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('songScriptRefBookStart')} ${pm.globals.get('songScriptRefChapterStart')}:${pm.globals.get('songScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('songScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('songScriptRefBookEnd', \"Exodus\");\r",
									"\r",
									"pm.globals.set('songScriptRefChapterEnd', 4);\r",
									"\r",
									"pm.globals.set('songScriptRefVerseEnd', 5);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('songScriptRefBookEnd')} ${pm.globals.get('songScriptRefChapterEnd')}:${pm.globals.get('songScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('songScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createSong($input: CreateSongInput!) {\r\n  createSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"song\": {\r\n            \"name\": \"{{songName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{songScriptRefBookStart}}\",\r\n                    \"chapter\": {{songScriptRefChapterStart}},\r\n                    \"verse\": {{songScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{songScriptRefBookEnd}}\",\r\n                    \"chapter\": {{songScriptRefChapterEnd}},\r\n                    \"verse\": {{songScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Song Mandatory Field Blank - Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54d93f9e-54da-49b4-bfc1-2c7563d55ad3",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that minLength message is correct\", function () {",
									"    var minLength_message = jsonData.errors[0].extensions.errors['song.name'].minLength;",
									"    pm.expect(minLength_message).to.eql(\"name must be longer than or equal to 1 characters\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "46b79fb5-91d1-4663-8002-6129245ec952",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"songName\", \"SongName\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createSong($input: CreateSongInput!) {\r\n  createSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {\r\n      \"name\": \"\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Song Mandatory Field Removed - Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2feb819c-7eae-4f70-816d-059d6c131b12",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"name\\\" of required type \\\"String!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2d73f4b7-54ba-4881-9de3-640490b797fc",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"songName\", \"SongName\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createSong($input: CreateSongInput!) {\r\n  createSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {}\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Song Success - Only Requird Inputs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6dee7b3c-fbfd-456f-ab85-02b65e638a7b",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that song ID is not blank or null\", function () {",
									"    var id = jsonData.data.createSong.song.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"",
									"    // Saving data for future use",
									"    pm.globals.set(\"songId\", id);",
									"});",
									"",
									"// Saving whole song Object to globals for future use",
									"var song = JSON.stringify(jsonData.data.createSong.song);",
									"pm.globals.set(\"song_data\", song);",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a4cd9c4e-2f2b-4cfc-a35c-6787a2f87f77",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"songName\", \"SongName\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createSong($input: CreateSongInput!) {\r\n  createSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {\r\n      \"name\": \"{{songName}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Song Parameter Mismatch - Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2998b20a-bbe8-42aa-9884-b3daf06b4333",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Field \\\"name\\\" of required type \\\"String!\\\" was not provided\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a4106f94-f899-4426-b74f-cfa7988a4916",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"songName\", \"SongName\" + moment().format(\"DDMMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createSong($input: CreateSongInput!) {\r\n  createSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {\r\n      \"name1\": \"{{songName}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Song Parameter Mismatch - ScriptRef",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "44b46367-b7e4-4920-8b63-912e03bee954",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"CreateSong\\\". Did you mean \\\"scriptureReferences\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b159a966-f7be-4a7f-aff4-68071ab3f43d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createSong($input: CreateSongInput!) {\r\n  createSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {\r\n      \"name\": \"{{songName}}\",\r\n      \"scriptureReferences1\": {\r\n        \"start\": {\r\n          \"book\": \"{{songScriptRefBookStart}}\",\r\n          \"chapter\": {{songScriptRefChapterStart}},\r\n          \"verse\": {{songScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{songScriptRefBookEnd}}\",\r\n          \"chapter\": {{songScriptRefChapterEnd}},\r\n          \"verse\": {{songScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Song Parameter Mismatch - ScriptRef start",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a340f250-f8d0-4a29-9c41-8c330d879086",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"start\\\" of required type \\\"ScriptureReferenceInput!\\\" was not provided\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "85c44144-dd9c-45e3-ac61-b1484e66c275",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createSong($input: CreateSongInput!) {\r\n  createSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {\r\n      \"name\": \"{{songName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start1\": {\r\n          \"book\": \"{{songScriptRefBookStart}}\",\r\n          \"chapter\": {{songScriptRefChapterStart}},\r\n          \"verse\": {{songScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{songScriptRefBookEnd}}\",\r\n          \"chapter\": {{songScriptRefChapterEnd}},\r\n          \"verse\": {{songScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Song Parameter Mismatch - ScriptRef start book",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03194dfa-bf26-4bf8-b384-ed19e5ff7efd",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d934be9c-3733-4669-8180-978922fd4df3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createSong($input: CreateSongInput!) {\r\n  createSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {\r\n      \"name\": \"{{songName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book1\": \"{{songScriptRefBookStart}}\",\r\n          \"chapter\": {{songScriptRefChapterStart}},\r\n          \"verse\": {{songScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{songScriptRefBookEnd}}\",\r\n          \"chapter\": {{songScriptRefChapterEnd}},\r\n          \"verse\": {{songScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Song Parameter Mismatch - ScriptRef start chapter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "768522b2-d762-446d-af8c-e7808d51490c",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"ScriptureReferenceInput\\\". Did you mean \\\"chapter\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "27a2a438-2c38-41f4-b2dd-d0899c0220ba",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createSong($input: CreateSongInput!) {\r\n  createSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {\r\n      \"name\": \"{{songName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{songScriptRefBookStart}}\",\r\n          \"chapter1\": {{songScriptRefChapterStart}},\r\n          \"verse\": {{songScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{songScriptRefBookEnd}}\",\r\n          \"chapter\": {{songScriptRefChapterEnd}},\r\n          \"verse\": {{songScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Song Parameter Mismatch - ScriptRef start verse",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "caa3ae91-f595-444f-9c6d-77991cb4b1a8",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"ScriptureReferenceInput\\\". Did you mean \\\"verse\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "99630a4f-cd0a-47c9-bd18-6e8bcc608455",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createSong($input: CreateSongInput!) {\r\n  createSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {\r\n      \"name\": \"{{songName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{songScriptRefBookStart}}\",\r\n          \"chapter\": {{songScriptRefChapterStart}},\r\n          \"verse1\": {{songScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{songScriptRefBookEnd}}\",\r\n          \"chapter\": {{songScriptRefChapterEnd}},\r\n          \"verse\": {{songScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Song Parameter Mismatch - ScriptRef end",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "453a8d3f-c542-4cf5-9406-9027f8378093",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"end\\\" of required type \\\"ScriptureReferenceInput!\\\" was not provided\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8621adf2-2f7a-42bd-ad12-e500d4ac67ed",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createSong($input: CreateSongInput!) {\r\n  createSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {\r\n      \"name\": \"{{songName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{songScriptRefBookStart}}\",\r\n          \"chapter\": {{songScriptRefChapterStart}},\r\n          \"verse\": {{songScriptRefVerseStart}}\r\n        },\r\n        \"end1\": {\r\n          \"book\": \"{{songScriptRefBookEnd}}\",\r\n          \"chapter\": {{songScriptRefChapterEnd}},\r\n          \"verse\": {{songScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Song Parameter Mismatch - ScriptRef end book",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dcf675e5-0f46-4e09-9c97-2df5c52f831d",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"Field \\\"book\\\" of required type \\\"String!\\\" was not provided\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "db6a8531-c394-4f72-9e97-2bdbe24af5d5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createSong($input: CreateSongInput!) {\r\n  createSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {\r\n      \"name\": \"{{songName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{songScriptRefBookStart}}\",\r\n          \"chapter\": {{songScriptRefChapterStart}},\r\n          \"verse\": {{songScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book1\": \"{{songScriptRefBookEnd}}\",\r\n          \"chapter\": {{songScriptRefChapterEnd}},\r\n          \"verse\": {{songScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Song Parameter Mismatch - ScriptRef end chapter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "232aa46b-6ff3-4203-95f4-06ae3453ceb1",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"ScriptureReferenceInput\\\". Did you mean \\\"chapter\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "57e184bc-ee5f-4baa-b09e-5011d0080570",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createSong($input: CreateSongInput!) {\r\n  createSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {\r\n      \"name\": \"{{songName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{songScriptRefBookStart}}\",\r\n          \"chapter\": {{songScriptRefChapterStart}},\r\n          \"verse\": {{songScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{songScriptRefBookEnd}}\",\r\n          \"chapter1\": {{songScriptRefChapterEnd}},\r\n          \"verse\": {{songScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Song Parameter Mismatch - ScriptRef end verse",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ab7d10a-3cf9-45a0-9732-aab66d5238e1",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"ScriptureReferenceInput\\\". Did you mean \\\"verse\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1aea3335-e882-4edd-b23e-ae1265fa19bc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createSong($input: CreateSongInput!) {\r\n  createSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {\r\n      \"name\": \"{{songName}}\",\r\n      \"scriptureReferences\": {\r\n        \"start\": {\r\n          \"book\": \"{{songScriptRefBookStart}}\",\r\n          \"chapter\": {{songScriptRefChapterStart}},\r\n          \"verse\": {{songScriptRefVerseStart}}\r\n        },\r\n        \"end\": {\r\n          \"book\": \"{{songScriptRefBookEnd}}\",\r\n          \"chapter\": {{songScriptRefChapterEnd}},\r\n          \"verse1\": {{songScriptRefVerseEnd}}\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Get song by Id ( Create Song)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6f3ad56-7cd4-4756-b705-cdb7bf09d757",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"//Test Specific",
									"var id = jsonData.data.createSong.song.id;",
									"pm.globals.set(\"songId\", id);",
									"",
									"// Saving whole Song Object to globals for future use",
									"var song = JSON.stringify(jsonData.data.createSong.song);",
									"pm.globals.set(\"song_data\", song);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "70c2e8aa-cc71-4648-acd5-770ca1d3a0ba",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"songName\", \"SongName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('songScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('songScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('songScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('songScriptRefBookStart')} ${pm.globals.get('songScriptRefChapterStart')}:${pm.globals.get('songScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('songScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('songScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('songScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('songScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('songScriptRefBookEnd')} ${pm.globals.get('songScriptRefChapterEnd')}:${pm.globals.get('songScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('songScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createSong($input: CreateSongInput!) {\r\n  createSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"song\": {\r\n            \"name\": \"{{songName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{songScriptRefBookStart}}\",\r\n                    \"chapter\": {{songScriptRefChapterStart}},\r\n                    \"verse\": {{songScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{songScriptRefBookEnd}}\",\r\n                    \"chapter\": {{songScriptRefChapterEnd}},\r\n                    \"verse\": {{songScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Song By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9ec5372-f2e3-4b80-963c-809aa54b0307",
								"exec": [
									"var jsonData = pm.response.json();",
									"var song_data = JSON.parse(pm.variables.get(\"song_data\"));",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verifying song ID is not blank or null\", function () {",
									"    var id = jsonData.data.song.id;  ",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"// Verifying returned song info with recently stored song info",
									"pm.test(\"Verifying song's createdAt\", function () {",
									"    var createdAt = jsonData.data.song.createdAt;",
									"    pm.expect(createdAt).to.eql(song_data.createdAt);",
									"});",
									"",
									"pm.test(\"Verifying song Name\", function () {",
									"    var songName = jsonData.data.song.name.value; ",
									"    pm.expect(songName).to.eql(song_data.name.value);",
									"});",
									"",
									"//scriptureReferences",
									"",
									"pm.test(\"Verifying song scriptureReferences start book\", function () {",
									"    var startBook = jsonData.data.song.scriptureReferences.value[0].start.book; ",
									"    pm.expect(startBook).to.eql(song_data.scriptureReferences.value[0].start.book); ",
									"});",
									"",
									"pm.test(\"Verifying song scriptureReferences start chapter\", function () {",
									"    var startChapter = jsonData.data.song.scriptureReferences.value[0].start.chapter; ",
									"    pm.expect(startChapter).to.eql(song_data.scriptureReferences.value[0].start.chapter); ",
									"});",
									"",
									"pm.test(\"Verifying song scriptureReferences start verse\", function () {",
									"    var startVerse = jsonData.data.song.scriptureReferences.value[0].start.verse; ",
									"    pm.expect(startVerse).to.eql(song_data.scriptureReferences.value[0].start.verse); ",
									"});",
									"",
									"pm.test(\"Verifying song scriptureReferences start book name\", function () {",
									"    var startBookName = jsonData.data.song.scriptureReferences.value[0].start.bookName; ",
									"    pm.expect(startBookName).to.eql(song_data.scriptureReferences.value[0].start.bookName); ",
									"});",
									"",
									"pm.test(\"Verifying song scriptureReferences start label\", function () {",
									"    var startLabel = jsonData.data.song.scriptureReferences.value[0].start.label; ",
									"    pm.expect(startLabel).to.eql(song_data.scriptureReferences.value[0].start.label); ",
									"});",
									"",
									"pm.test(\"Verifying song scriptureReferences end book\", function () {",
									"    var endBook = jsonData.data.song.scriptureReferences.value[0].start.book; ",
									"    pm.expect(endBook).to.eql(song_data.scriptureReferences.value[0].start.book); ",
									"});",
									"",
									"pm.test(\"Verifying song scriptureReferences end chapter\", function () {",
									"    var endChapter = jsonData.data.song.scriptureReferences.value[0].end.chapter; ",
									"    pm.expect(endChapter).to.eql(song_data.scriptureReferences.value[0].end.chapter); ",
									"});",
									"",
									"pm.test(\"Verifying song scriptureReferences end verse\", function () {",
									"    var endVerse = jsonData.data.song.scriptureReferences.value[0].end.verse; ",
									"    pm.expect(endVerse).to.eql(song_data.scriptureReferences.value[0].end.verse); ",
									"});",
									"",
									"pm.test(\"Verifying song scriptureReferences end book name\", function () {",
									"    var endBookName = jsonData.data.song.scriptureReferences.value[0].end.bookName; ",
									"    pm.expect(endBookName).to.eql(song_data.scriptureReferences.value[0].end.bookName); ",
									"});",
									"",
									"pm.test(\"Verifying song scriptureReferences end label\", function () {",
									"    var endLabel = jsonData.data.song.scriptureReferences.value[0].end.label; ",
									"    pm.expect(endLabel).to.eql(song_data.scriptureReferences.value[0].end.label); ",
									"});",
									"",
									"",
									"pm.test(\"Verifying song scriptureReferences label\", function () {",
									"    var label = jsonData.data.song.scriptureReferences.value[0].label; ",
									"    pm.expect(label).to.eql(song_data.scriptureReferences.value[0].label); ",
									"});",
									"",
									"pm.test(\"Verifying song scriptureReferences total verses\", function () {",
									"    var totalVerses = jsonData.data.song.scriptureReferences.value[0].totalVerses; ",
									"    pm.expect(totalVerses).to.eql(song_data.scriptureReferences.value[0].totalVerses); ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4c872c66-d868-4fd2-a002-bff6a2fdd8fe",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query song($id: ID!) {\r\n  song(id: $id) {\r\n    id\r\n    createdAt\r\n    name {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"{{songId}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Song By Id Mandatory Field Blank - id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b57ae72-315a-41be-86c8-80d9a0d2d97e",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is 400\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that language error message is correct\", function () {",
									"    var error_language_message = jsonData.errors[0].extensions.errors.id.IsId;  ",
									"    pm.expect(error_language_message).to.eql(\"Invalid ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4c197902-7602-4e72-8675-06ba2370fd72",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query song($id: ID!) {\r\n  song(id: $id) {\r\n    id\r\n    createdAt\r\n    name {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Song By Id Mandatory Field Removed - id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4db40a79-0122-4dab-9317-2d21d756ec72",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "16cce0b9-ac5d-40ec-8f00-589e6e8ad4f0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query song($id: ID!) {\r\n  song(id: $id) {\r\n    id\r\n    createdAt\r\n    name {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Song  By Id Mandatory Parameter Mismatch - id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9c5e54f-50f0-4e4a-a8f1-ad0e21a8ac0e",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cabaa301-4167-4297-86df-ceb8b2c1dca7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query song($id: ID!) {\r\n  song(id: $id) {\r\n    id\r\n    createdAt\r\n    name {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id1\": \"{{songId}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Song By Id Mandatory Parameter Invalid - id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9085aded-40d5-4118-a6c5-7e36f4a1fef7",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is 400\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that language error message is correct\", function () {",
									"    var error_language_message = jsonData.errors[0].extensions.errors.id.IsId;  ",
									"    pm.expect(error_language_message).to.eql(\"Invalid ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e87caf04-3333-4a8c-8948-a36ede29afcf",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query song($id: ID!) {\r\n  song(id: $id) {\r\n    id\r\n    createdAt\r\n    name {\r\n      value\r\n      canEdit\r\n      canRead\r\n    }\r\n    scriptureReferences {\r\n      value {\r\n        start {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        end {\r\n          book\r\n          chapter\r\n          verse\r\n          label\r\n        }\r\n        label\r\n        totalVerses\r\n      }\r\n      canEdit\r\n      canRead\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"id\": \"!@#$%^&\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Song Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "963d7459-14cb-4369-a1f4-bf3189f45702",
								"exec": [
									"var jsonData = pm.response.json();",
									"var song_data = JSON.parse(pm.variables.get(\"song_data\"));",
									"const moment = require('moment');",
									"var lodash = require('lodash');",
									"",
									"// get song object first having same id as recently updated song's id",
									"var mysong = lodash.find(jsonData.data.updateSong.song, ['id', song_data.id]);",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that song ID is not blank or null\", function () {",
									"    var id = jsonData.data.updateSong.song.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that song's createdAt is in Specific time format\", function () {",
									"    var time = jsonData.data.updateSong.song.createdAt;",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();",
									"    pm.expect(isValidTime).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify that updated song name is same as requested\", function () {",
									"    var name = jsonData.data.updateSong.song.name.value;",
									"    pm.expect(name).to.eql(pm.globals.get('songName'));",
									"});",
									"",
									"",
									"",
									"//scriptureReferences",
									"pm.test(\"Verify that updated song scriptureReferences start book is same as requested\", function () {",
									"    var startBook = jsonData.data.updateSong.song.scriptureReferences.value[0].start.book;",
									"    pm.expect(startBook).to.eql(pm.globals.get('songScriptRefBookStart'));",
									"});",
									"",
									"pm.test(\"Verify that updated song scriptureReferences start chapter is same as requested\", function () {",
									"    var startChapter = jsonData.data.updateSong.song.scriptureReferences.value[0].start.chapter;",
									"    pm.expect(startChapter).to.eql(pm.globals.get('songScriptRefChapterStart'));",
									"});",
									"",
									"pm.test(\"Verify that updated song scriptureReferences start verse is same as requested\", function () {",
									"    var startVerse = jsonData.data.updateSong.song.scriptureReferences.value[0].start.verse;",
									"    pm.expect(startVerse).to.eql(pm.globals.get('songScriptRefVerseStart'));",
									"});",
									"",
									"//Static",
									"pm.test(\"Verify that updated song scriptureReferences start label is same as requested\", function () {",
									"    var startLabel = jsonData.data.updateSong.song.scriptureReferences.value[0].start.label;",
									"    pm.expect(startLabel).to.eql(pm.globals.get('songScriptRefLabelStart'));",
									"});",
									"",
									"",
									"pm.test(\"Verify that updated song scriptureReferences end book is same as requested\", function () {",
									"    var endBook = jsonData.data.updateSong.song.scriptureReferences.value[0].end.book;",
									"    pm.expect(endBook).to.eql(pm.globals.get('songScriptRefBookEnd'));",
									"});",
									"",
									"pm.test(\"Verify that updated song scriptureReferences end chapter is same as requested\", function () {",
									"    var endChapter = jsonData.data.updateSong.song.scriptureReferences.value[0].end.chapter;",
									"    pm.expect(endChapter).to.eql(pm.globals.get('songScriptRefChapterEnd'));",
									"});",
									"",
									"pm.test(\"Verify that updated song scriptureReferences end verse is same as requested\", function () {",
									"    var endVerse = jsonData.data.updateSong.song.scriptureReferences.value[0].end.verse;",
									"    pm.expect(endVerse).to.eql(pm.globals.get('songScriptRefVerseEnd'));",
									"});",
									"",
									"//Static",
									"pm.test(\"Verify that updated song scriptureReferences end label is same as requested\", function () {",
									"    var endlabel = jsonData.data.updateSong.song.scriptureReferences.value[0].end.label;",
									"    pm.expect(endlabel).to.eql(pm.globals.get('songScriptRefLabelEnd'));",
									"});",
									"",
									"//static",
									"pm.test(\"Verify that updated song scriptureReferences label is same as requested\", function () {",
									"    var label = jsonData.data.updateSong.song.scriptureReferences.value[0].label;",
									"    pm.expect(label).to.eql(pm.globals.get('songScriptRefLabelStart'));",
									"});",
									"",
									"pm.test(\"Verify that updated song scriptureReferences total verses is same as requested\", function () {",
									"    var totalVerses = jsonData.data.updateSong.song.scriptureReferences.value[0].totalVerses;",
									"     pm.expect(totalVerses).to.be.above(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1f57bf3c-28e1-41f5-bd43-8a9a1afb8305",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"songName\", \"SongName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('songScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('songScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('songScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('songScriptRefBookStart')} ${pm.globals.get('songScriptRefChapterStart')}:${pm.globals.get('songScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('songScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('songScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('songScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('songScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('songScriptRefBookEnd')} ${pm.globals.get('songScriptRefChapterEnd')}:${pm.globals.get('songScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('songScriptRefLabelEnd', expectedLabelEnd);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateSong($input: UpdateSongInput!) {\r\n  updateSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"song\": {\r\n            \"id\": \"{{songId}}\",\r\n            \"name\": \"{{songName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{songScriptRefBookStart}}\",\r\n                    \"chapter\": {{songScriptRefChapterStart}},\r\n                    \"verse\": {{songScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{songScriptRefBookEnd}}\",\r\n                    \"chapter\": {{songScriptRefChapterEnd}},\r\n                    \"verse\": {{songScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Song Success - Only Required Inputs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c40ad48b-d4f8-467c-b991-878ccf37e268",
								"exec": [
									"var jsonData = pm.response.json();",
									"var song_data = JSON.parse(pm.variables.get(\"song_data\"));",
									"const moment = require('moment');",
									"var lodash = require('lodash');",
									"",
									"// get song object first having same id as recently updated song's id",
									"var mysong = lodash.find(jsonData.data.updateSong.song, ['id', song_data.id]);",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that song ID is not blank or null\", function () {",
									"    var id = jsonData.data.updateSong.song.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that song's createdAt is in Specific time format\", function () {",
									"    var time = jsonData.data.updateSong.song.createdAt;",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();",
									"    pm.expect(isValidTime).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify that updated song name is same as requested\", function () {",
									"    var name = jsonData.data.updateSong.song.name.value;",
									"    pm.expect(name).to.eql(pm.globals.get('songName'));",
									"});",
									"",
									"//scriptureReferences",
									"pm.test(\"Verify that updated song scriptureReferences start book is same as requested\", function () {",
									"    var startBook = jsonData.data.updateSong.song.scriptureReferences.value[0].start.book;",
									"    pm.expect(startBook).to.eql(pm.globals.get('songScriptRefBookStart'));",
									"});",
									"",
									"pm.test(\"Verify that updated song scriptureReferences start chapter is same as requested\", function () {",
									"    var startChapter = jsonData.data.updateSong.song.scriptureReferences.value[0].start.chapter;",
									"    pm.expect(startChapter).to.eql(pm.globals.get('songScriptRefChapterStart'));",
									"});",
									"",
									"pm.test(\"Verify that updated song scriptureReferences start verse is same as requested\", function () {",
									"    var startVerse = jsonData.data.updateSong.song.scriptureReferences.value[0].start.verse;",
									"    pm.expect(startVerse).to.eql(pm.globals.get('songScriptRefVerseStart'));",
									"});",
									"",
									"//Static",
									"pm.test(\"Verify that updated song scriptureReferences start label is same as requested\", function () {",
									"    var startLabel = jsonData.data.updateSong.song.scriptureReferences.value[0].start.label;",
									"    pm.expect(startLabel).to.eql(pm.globals.get('songScriptRefLabelStart'));",
									"});",
									"",
									"",
									"pm.test(\"Verify that updated song scriptureReferences end book is same as requested\", function () {",
									"    var endBook = jsonData.data.updateSong.song.scriptureReferences.value[0].end.book;",
									"    pm.expect(endBook).to.eql(pm.globals.get('songScriptRefBookEnd'));",
									"});",
									"",
									"pm.test(\"Verify that updated song scriptureReferences end chapter is same as requested\", function () {",
									"    var endChapter = jsonData.data.updateSong.song.scriptureReferences.value[0].end.chapter;",
									"    pm.expect(endChapter).to.eql(pm.globals.get('songScriptRefChapterEnd'));",
									"});",
									"",
									"pm.test(\"Verify that updated song scriptureReferences end verse is same as requested\", function () {",
									"    var endVerse = jsonData.data.updateSong.song.scriptureReferences.value[0].end.verse;",
									"    pm.expect(endVerse).to.eql(pm.globals.get('songScriptRefVerseEnd'));",
									"});",
									"",
									"//Static",
									"pm.test(\"Verify that updated song scriptureReferences end label is same as requested\", function () {",
									"    var endlabel = jsonData.data.updateSong.song.scriptureReferences.value[0].end.label;",
									"    pm.expect(endlabel).to.eql(pm.globals.get('songScriptRefLabelEnd'));",
									"});",
									"",
									"//static",
									"pm.test(\"Verify that updated song scriptureReferences label is same as requested\", function () {",
									"    var label = jsonData.data.updateSong.song.scriptureReferences.value[0].label;",
									"    pm.expect(label).to.eql(pm.globals.get('songScriptRefLabelStart'));",
									"});",
									"",
									"pm.test(\"Verify that updated song scriptureReferences total verses is same as requested\", function () {",
									"    var totalVerses = jsonData.data.updateSong.song.scriptureReferences.value[0].totalVerses;",
									"     pm.expect(totalVerses).to.be.above(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dd65eb62-bb96-47df-9c55-0a0dcd14b3cd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateSong($input: UpdateSongInput!) {\r\n  updateSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {\r\n      \"id\": \"{{songId}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Song Mandatory Field Removed - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aaab5d87-d0a2-4c4b-ba03-a751a5ea60c5",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Field \\\"id\\\" of required type \\\"ID!\\\" was not provided\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "08c46d98-efeb-4cf9-9d45-ec25cb9679a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateSong($input: UpdateSongInput!) {\r\n  updateSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {\r\n      \"name\": \"{{songName}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Song  Mandatory Field Blank  - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5eab825b-011c-4db8-9f83-8f68768c64d1",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is 400\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that song error message is correct\", function () {",
									"    var error_song_message = jsonData.errors[0].extensions.errors['song.id'].IsId;  ",
									"    pm.expect(error_song_message).to.eql(\"Invalid ID\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "97ff9ea1-805a-4de5-8fa8-1cc3c9a1ee1b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateSong($input: UpdateSongInput!) {\r\n  updateSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {\r\n      \"id\": \"\",\r\n      \"name\": \"aaaa\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Song  Mandatory Field Removed   - Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc046e70-f3c4-468c-be0f-2415f635755d",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that song ID is not blank or null\", function () {",
									"    var id = jsonData.data.updateSong.song.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verify that updated song name is equal to previous value\", function () {",
									"    var name = jsonData.data.updateSong.song.name.value;",
									"    pm.expect(name).to.eql(pm.globals.get('songName'));",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "159d7096-3420-4ba3-b775-9e5f46099657",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateSong($input: UpdateSongInput!) {\r\n  updateSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {\r\n      \"id\": \"{{songId}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Song  Mandatory Field Blank  - Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d13588f6-cafd-4b55-9fad-ee8e7f00cfdd",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is 400\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that song error message is correct\", function () {",
									"    var error_song_message = jsonData.errors[0].extensions.errors['song.name'].minLength;  ",
									"    pm.expect(error_song_message).to.eql(\"name must be longer than or equal to 1 characters\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4e609877-3a03-4793-8d72-17535974e375",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateSong($input: UpdateSongInput!) {\r\n  updateSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {\r\n      \"id\": \"{{songId}}\",\r\n      \"name\": \"\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Song  Parameter Mismatch- id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf9ee97e-f574-4fb3-823d-b572a3e6dc62",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"Field \\\"id\\\" of required type \\\"ID!\\\" was not provided.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aa3cfcee-aa24-40c2-9169-ca542c07a25a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateSong($input: UpdateSongInput!) {\r\n  updateSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {\r\n      \"id1\": \"{{songId}}\",\r\n      \"name\": \"{{songName}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Song  Parameter Mismatch- Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9133f7ed-bb10-4168-9e2e-23cf0752144b",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"     pm.expect(error_message).to.include(\"is not defined by type \\\"UpdateSong\\\". Did you mean \\\"name\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fe1bfeac-4bed-4d08-b690-f5e0e3d3eec2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateSong($input: UpdateSongInput!) {\r\n  updateSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {\r\n      \"id\": \"{{songId}}\",\r\n      \"name1\": \"{{songName}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Song  Parameter Invalid - id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a4c765f2-bfbc-4498-ac57-b3f516014163",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_code = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_code).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that error song ID message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors['song.id'].IsId;  ",
									"    pm.expect(error_message).to.include(\"Invalid ID\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "49ba2619-3bc6-4d50-8a43-2fd4e5648eec",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateSong($input: UpdateSongInput!) {\r\n  updateSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": {\r\n    \"song\": {\r\n      \"id\": \"!@#$%^&\",\r\n      \"name\": \"{{songName}}\"\r\n    }\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Get All Song ( Create Song)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8f57898-b3b9-4a39-b7e5-0f688da43775",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"//Test Specific",
									"var id = jsonData.data.createSong.song.id;",
									"pm.globals.set(\"songId\", id);",
									"",
									"// Saving whole Song Object to globals for future use",
									"var song = JSON.stringify(jsonData.data.createSong.song);",
									"pm.globals.set(\"song_data\", song);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "15e46e3a-0098-4748-8c25-72decf08cf0a",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"pm.globals.set(\"songName\", \"SongName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('songScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('songScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('songScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('songScriptRefBookStart')} ${pm.globals.get('songScriptRefChapterStart')}:${pm.globals.get('songScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('songScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('songScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('songScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('songScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('songScriptRefBookEnd')} ${pm.globals.get('songScriptRefChapterEnd')}:${pm.globals.get('songScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('songScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createSong($input: CreateSongInput!) {\r\n  createSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"song\": {\r\n            \"name\": \"{{songName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{songScriptRefBookStart}}\",\r\n                    \"chapter\": {{songScriptRefChapterStart}},\r\n                    \"verse\": {{songScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{songScriptRefBookEnd}}\",\r\n                    \"chapter\": {{songScriptRefChapterEnd}},\r\n                    \"verse\": {{songScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aec10e37-027a-4832-91cf-ea9d1e912edc",
								"exec": [
									"var jsonData = pm.response.json();",
									"var lodash = require('lodash');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - Pagination",
									"pm.test(\"Verify that total is greater than Zero\", function () {",
									"    var total = jsonData.data.songs.total;",
									"    pm.expect(total).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Verify that hasMore is correct\", function () {",
									"    var total = jsonData.data.songs.total;",
									"    var hasMore = jsonData.data.songs.hasMore;",
									"    if (Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) < total) {",
									"        pm.expect(hasMore).to.eql(true);",
									"    } else {",
									"        pm.expect(hasMore).to.eql(false);",
									"    }",
									"});",
									"",
									"pm.test(\"Verify that number of items returned are exact\", function () {",
									"    var total = jsonData.data.songs.total;                  // total returned in response",
									"    var returneditems = jsonData.data.songs.items.length;   // no. of items returned in response array",
									"    var itemCount = Number(pm.globals.get('itemCount'));    // no. of items per page",
									"    var page = Number(pm.globals.get('page'));              // page number",
									"    var expectedItems = itemCount * page;                   // items we are expecting",
									"",
									"    if (expectedItems <= total) {",
									"        pm.expect(returneditems).to.eql(itemCount);",
									"    } else {",
									"        if ((expectedItems - total) < itemCount) {",
									"            var lastItems = total - ((itemCount * (page - 1)));   // items in last page",
									"            pm.expect(returneditems).to.eql(lastItems);",
									"        }",
									"    }",
									"});",
									"",
									"/**",
									" * Setting up 'page' number to be used in next request",
									" * For locating recently created Object position on Specific page",
									" */",
									"var total = jsonData.data.songs.total;",
									"var itemCount = Number(pm.globals.get('itemCount'));",
									"",
									"if (total > itemCount) {",
									"",
									"    if ((total % itemCount) == 0) {",
									"        var pageToset = total / itemCount;",
									"        pm.globals.set(\"page\", pageToset);",
									"    } else {",
									"        var pageToset = Math.floor(total / itemCount) + 1;",
									"        pm.globals.set(\"page\", pageToset);",
									"    }",
									"",
									"} else {",
									"    pm.globals.set(\"page\", 1);  // Set page to 1 if total <= itemCount",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e246a15d-4e31-45ff-9df4-9fa573f259f8",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query songs($input: SongListInput!) {\r\n  songs(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"count\": {{itemCount}},\r\n    \"page\": {{page}},\r\n    \"sort\": \"name\",\r\n    \"order\": \"{{order}}\"\r\n  }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs Success - Item Object",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e1bbf85-4bee-4e6b-92af-93ea8c9ea36f",
								"exec": [
									"var jsonData = pm.response.json();",
									"var song_data = JSON.parse(pm.variables.get(\"song_data\")); // Get stored song object",
									"const moment = require('moment');",
									"var lodash = require('lodash');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - Pagination",
									"pm.test(\"Verify that total is greater than Zero\", function () {",
									"    var total = jsonData.data.songs.total;",
									"    pm.expect(total).to.be.above(0);",
									"});",
									"",
									"/**",
									" * Verifying recently created song's information with songs object returned within items array",
									" */",
									"",
									"// get songs object first having same id as recently created song's id",
									"var mySong = lodash.find(jsonData.data.songs.items, ['id', song_data.id]);",
									"",
									"pm.test(\"Verify that recently created songs ID is not blank or null\", function () {",
									"    var id = mySong.id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});",
									"",
									"pm.test(\"Verifying recently created song's createdAt is in Specific time format\", function () {",
									"    var time = mySong.createdAt;",
									"    var isValidTime = moment(time, \"YYYY-MM-DDTHH:mm:ss.SSSZ\", true).isValid();",
									"    pm.expect(isValidTime).to.eql(true);",
									"",
									"});",
									"",
									"pm.test(\"Verifying recently created song's id\", function () {",
									"    var id = mySong.id;",
									"    pm.expect(id).to.eql(song_data.id);",
									"});",
									"",
									"pm.test(\"Verifying recently created song's name\", function () {",
									"    var name = mySong.name.value;",
									"    pm.expect(name).to.eql(song_data.name.value);",
									"});",
									"",
									"",
									"//scriptureReferences",
									"pm.test(\"Verifying recently created song's scriptureReferences start book\", function () {",
									"    var startBook = mySong.scriptureReferences.value[0].start.book;",
									"    pm.expect(startBook).to.eql(song_data.scriptureReferences.value[0].start.book);",
									"});",
									"",
									"pm.test(\"Verifying recently created song's scriptureReferences start chapter\", function () {",
									"    var startChapter = mySong.scriptureReferences.value[0].start.chapter;",
									"    pm.expect(startChapter).to.eql(song_data.scriptureReferences.value[0].start.chapter);",
									"});",
									"",
									"pm.test(\"Verifying recently created song's scriptureReferences start verse\", function () {",
									"    var startVerse = mySong.scriptureReferences.value[0].start.verse;",
									"    pm.expect(startVerse).to.eql(song_data.scriptureReferences.value[0].start.verse);",
									"});",
									"",
									"//Static",
									"pm.test(\"Verifying recently created song's scriptureReferences start label\", function () {",
									"    var startLabel = mySong.scriptureReferences.value[0].start.label;",
									"    pm.expect(startLabel).to.eql(song_data.scriptureReferences.value[0].start.label);",
									"});",
									"",
									"",
									"pm.test(\"Verifying recently created song's scriptureReferences end book\", function () {",
									"    var endBook = mySong.scriptureReferences.value[0].end.book;",
									"    pm.expect(endBook).to.eql(song_data.scriptureReferences.value[0].end.book);",
									"});",
									"",
									"pm.test(\"Verifying recently created song's scriptureReferences end chapter\", function () {",
									"    var endChapter = mySong.scriptureReferences.value[0].end.chapter;",
									"    pm.expect(endChapter).to.eql(song_data.scriptureReferences.value[0].end.chapter);",
									"});",
									"",
									"pm.test(\"Verifying recently created song's scriptureReferences end verse\", function () {",
									"    var endVerse = mySong.scriptureReferences.value[0].end.verse;",
									"    pm.expect(endVerse).to.eql(song_data.scriptureReferences.value[0].end.verse);",
									"});",
									"",
									"//Static",
									"pm.test(\"Verifying recently created song's scriptureReferences end label\", function () {",
									"    var endLabel = mySong.scriptureReferences.value[0].end.label;",
									"    pm.expect(endLabel).to.eql(song_data.scriptureReferences.value[0].end.label);",
									"});",
									"",
									"pm.test(\"Verifying recently created song's scriptureReferences  label\", function () {",
									"    var label = mySong.scriptureReferences.value[0].label;",
									"    pm.expect(label).to.eql(song_data.scriptureReferences.value[0].label);",
									"});",
									"",
									"pm.test(\"Verifying recently created song's scriptureReferences  totalVerses\", function () {",
									"    var totalVerses = mySong.scriptureReferences.value[0].totalVerses;",
									"    pm.expect(totalVerses).to.eql(song_data.scriptureReferences.value[0].totalVerses);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5047bd72-03de-45ac-b4a9-047a94b98006",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"// Page is set from previous request test script based on total\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query songs($input: SongListInput!) {\r\n  songs(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs Success - total",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13e4d272-048c-4b72-83b8-1428cc2b8600",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - total",
									"pm.test(\"Verify that total is greater than Zero\", function () {",
									"    var total = jsonData.data.songs.total;  ",
									"    pm.expect(total).to.be.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "80b3043f-1ec5-4226-bc26-dcd8bda23cd6",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query songs($input: SongListInput!) {\r\n  songs(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs Success - hasmore - True",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31324004-cfff-4755-9eaf-d8bda83b7ec8",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - hasMore",
									"pm.test(\"Verify that hasMore is true Only when song items are still available\", function () {",
									"    var total = jsonData.data.songs.total;",
									"    var hasMore = jsonData.data.songs.hasMore;  ",
									"    if(Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) < total){",
									"        pm.expect(hasMore).to.eql(true);",
									"    } else {",
									"        pm.expect(hasMore).to.eql(false);",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "da7b4163-50bd-4392-be1a-ae9d01fae508",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query songs($input: SongListInput!) {\r\n  songs(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs Success - hasmore - False",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "662869be-0f70-4873-9eb6-b071eabb8b75",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - hasMore",
									"pm.test(\"Verify that hasMore is false Only when no more somg items available\", function () {",
									"    var total = jsonData.data.songs.total;",
									"    var hasMore = jsonData.data.songs.hasMore;  ",
									"    if(Number(pm.globals.get('itemCount')) * Number(pm.globals.get('page')) >= total){",
									"        pm.expect(hasMore).to.eql(false);",
									"    } else{",
									"        pm.expect(hasMore).to.eql(true);",
									"    }",
									"});",
									"",
									"pm.test(\"Verify that song ID is not blank or null\", function () {",
									"    var id = jsonData.data.songs.items[0].id;",
									"    pm.expect(id).to.not.eql(null);",
									"    pm.expect(id).to.not.eql(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7df576bd-5d3d-4e1a-a3a2-7dc401996099",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query songs($input: SongListInput!) {\r\n  songs(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs Success - Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c298093-2ea4-43fd-ba59-1e6c4bfeb93a",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific - no. of items are exact",
									"pm.test(\"Verify that number of items returned are exact\", function () {",
									"    var total = jsonData.data.songs.total;                  // total returned in response",
									"    var returneditems = jsonData.data.songs.items.length;   // no. of items returned in response array",
									"    var itemCount = Number(pm.globals.get('itemCount'));    // no. of items per page 2",
									"    var page = Number(pm.globals.get('page'));              // page number 5",
									"    var expectedItems = itemCount * page;                   // items we are expecting 10",
									"",
									"    if (expectedItems <= total) {",
									"        pm.expect(returneditems).to.eql(itemCount);",
									"    } else {",
									"        if ((expectedItems - total) < itemCount) {",
									"            var lastItems = total - ((itemCount * (page - 1)));   // items in last page",
									"            pm.expect(returneditems).to.eql(lastItems);",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bfd7a2e3-b822-44d8-bfbb-2ded74b87aa2",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query songs($input: SongListInput!) {\r\n  songs(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Sort Songs  by Name ( Create Song)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77aa1e50-161e-44f3-9bf6-972f8ea4ce7b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4023afaf-8044-4a7a-877d-ba6f7f51f7a2",
								"exec": [
									"const moment = require('moment');\r",
									"pm.globals.set(\"timestamp\", moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// Changed for sorting purpose\r",
									"pm.globals.set(\"songName\", \"automation_Songsort\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('songScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('songScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('songScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('songScriptRefBookStart')} ${pm.globals.get('songScriptRefChapterStart')}:${pm.globals.get('songScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('songScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('songScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('songScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('songScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('songScriptRefBookEnd')} ${pm.globals.get('songScriptRefChapterEnd')}:${pm.globals.get('songScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('songScriptRefLabelEnd', expectedLabelEnd);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createSong($input: CreateSongInput!) {\r\n  createSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"song\": {\r\n            \"name\": \"{{songName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{songScriptRefBookStart}}\",\r\n                    \"chapter\": {{songScriptRefChapterStart}},\r\n                    \"verse\": {{songScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{songScriptRefBookEnd}}\",\r\n                    \"chapter\": {{songScriptRefChapterEnd}},\r\n                    \"verse\": {{songScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for FilterSort Songs by Name ( Create Song)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03ee2b5b-1171-4c30-bc1b-d8c65d6b3363",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cd07fb46-7bd2-47cf-9a52-466b4f795cbf",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"// Changed for sorting and Filter purpose\r",
									"pm.globals.set(\"songName\", \"FilterSortSongName\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('songScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('songScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('songScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('songScriptRefBookStart')} ${pm.globals.get('songScriptRefChapterStart')}:${pm.globals.get('songScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('songScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('songScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('songScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('songScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('songScriptRefBookEnd')} ${pm.globals.get('songScriptRefChapterEnd')}:${pm.globals.get('songScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('songScriptRefLabelEnd', expectedLabelEnd);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createSong($input: CreateSongInput!) {\r\n  createSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"song\": {\r\n            \"name\": \"{{songName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{songScriptRefBookStart}}\",\r\n                    \"chapter\": {{songScriptRefChapterStart}},\r\n                    \"verse\": {{songScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{songScriptRefBookEnd}}\",\r\n                    \"chapter\": {{songScriptRefChapterEnd}},\r\n                    \"verse\": {{songScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pre-req for Sort Songs by Name ( Create Song 2 )",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "996e7b4b-54af-4797-8bcf-d5e5fa75b57f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dab9be84-2c96-4585-abd8-42d59ccb1f20",
								"exec": [
									"const moment = require('moment');\r",
									"\r",
									"// Changed for sorting purpose\r",
									"pm.globals.set(\"songName\", \"Automation_Songsort\" + moment().format(\"DDMMYYYYhhmmss\"));\r",
									"\r",
									"// ScriptureReferences Value\r",
									"// Static values \r",
									"pm.globals.set('songScriptRefBookStart', \"Genesis\");\r",
									"\r",
									"pm.globals.set('songScriptRefChapterStart', 3);\r",
									"\r",
									"pm.globals.set('songScriptRefVerseStart', 4);\r",
									"\r",
									"let expectedLabelStart = `${pm.globals.get('songScriptRefBookStart')} ${pm.globals.get('songScriptRefChapterStart')}:${pm.globals.get('songScriptRefVerseStart')}`;\r",
									"\r",
									"pm.globals.set('songScriptRefLabelStart', expectedLabelStart);\r",
									"\r",
									"pm.globals.set('songScriptRefBookEnd', \"Genesis\");\r",
									"\r",
									"pm.globals.set('songScriptRefChapterEnd', 3);\r",
									"\r",
									"pm.globals.set('songScriptRefVerseEnd', 4);\r",
									"\r",
									"let expectedLabelEnd = `${pm.globals.get('songScriptRefBookEnd')} ${pm.globals.get('songScriptRefChapterEnd')}:${pm.globals.get('songScriptRefVerseEnd')}`\r",
									"\r",
									"pm.globals.set('songScriptRefLabelEnd', expectedLabelEnd);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createSong($input: CreateSongInput!) {\r\n  createSong(input: $input) {\r\n    song {\r\n      id\r\n      createdAt\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"song\": {\r\n            \"name\": \"{{songName}}\",\r\n            \"scriptureReferences\": {\r\n                \"start\": {\r\n                    \"book\": \"{{songScriptRefBookStart}}\",\r\n                    \"chapter\": {{songScriptRefChapterStart}},\r\n                    \"verse\": {{songScriptRefVerseStart}}\r\n                },\r\n                \"end\": {\r\n                    \"book\": \"{{songScriptRefBookEnd}}\",\r\n                    \"chapter\": {{songScriptRefChapterEnd}},\r\n                    \"verse\": {{songScriptRefVerseEnd}}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs Success -  name sorting ASC",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89ab610f-5744-4807-b50f-a9cfa83226d8",
								"exec": [
									"var jsonData = pm.response.json();",
									"var lodash = require('lodash');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"pm.test(\"Verify that total is greater than Zero\", function () {",
									"    var total = jsonData.data.songs.total;",
									"    pm.expect(total).to.be.above(0);",
									"});",
									"",
									"//Test Specific - Name sorting ASC",
									"pm.test(\"Verify that items are sorted by 'NAME' and orderd by 'ASC' order \", function () {",
									"",
									"    var responseBody = jsonData.data.songs.items;",
									"    var expectedSortedOrder = lodash.orderBy(responseBody, item => item.name.value.toLowerCase(), ['asc']);",
									"    pm.expect(responseBody).to.eql(expectedSortedOrder);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6dc03191-4f61-42c7-81bd-dffa7b761c23",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"ASC\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query songs($input: SongListInput!) {\r\n  songs(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs Success -  name sorting DESC",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69f19629-79b6-49bf-92e0-56145f452001",
								"exec": [
									"var jsonData = pm.response.json();",
									"var lodash = require('lodash');",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"pm.test(\"Verify that total is greater than Zero\", function () {",
									"    var total = jsonData.data.songs.total;",
									"    pm.expect(total).to.be.above(0);",
									"});",
									"",
									"//Test Specific - Name sorting DESC",
									"pm.test(\"Verify that items are sorted by 'NAME' and orderd by 'DESC' order \", function () {",
									"",
									"    var responseBody = jsonData.data.songs.items;",
									"    var expectedSortedOrder = lodash.orderBy(responseBody, item => item.name.value.toLowerCase(), ['desc']);",
									"    pm.expect(responseBody).to.eql(expectedSortedOrder);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7e643e4e-5c30-4861-9fbd-dea7c77a1d66",
								"exec": [
									"pm.globals.set(\"itemCount\", 25);\r",
									"pm.globals.set(\"page\", 1);\r",
									"pm.globals.set('order', \"DESC\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query songs($input: SongListInput!) {\r\n  songs(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs  Not Mandatory Field Removed - count",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52490abf-dd68-4cca-bb81-98edfd17e65b",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that number of items returned is equal to total\", function () {",
									"    var total = jsonData.data.songs.total;",
									"    var items = jsonData.data.songs.items.length;",
									"    if (total <= 25)    // 25 is maximum db items limit returned per page when count is not specified",
									"        pm.expect(items).to.eql(total);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "815d04d3-cec9-4bfa-b179-0fa36857e3f0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query songs($input: SongListInput!) {\r\n  songs(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs Not Mandatory Field Blank - sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "304a7258-06aa-4947-9e94-623dd25883d2",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"",
									"pm.test(\"PENDING >> BUG ADDED #1363(open-Sprint 13) ( Data is still returned at times when the sort field having invalid data  ) \", function () {",
									"",
									"    if (jsonData.data) {",
									"        pm.expect(\"BACKEND\").to.eql(\"PENDING\"); // fail forcefully",
									"    } else {",
									"        pm.expect(\"WRITE TEST CASES\").to.eql(\"ERRORS >>> \" + jsonData.errors[0].message);",
									"    }",
									"",
									"});",
									"",
									"",
									"",
									"// pm.test(\"Verify that error message is correct\", function () {",
									"//     var error_message = jsonData.errors[0].message;  ",
									"//     pm.expect(error_message).to.include(\"Invalid input\");",
									"// });",
									"",
									"// pm.test(\"Verify that error status is 500\", function () {",
									"//     var error_status = jsonData.errors[0].extensions.status;  ",
									"//     pm.expect(error_status).to.eql(500);",
									"// });",
									"",
									"// pm.test(\"Verify that error code is InternalServerError\", function () {",
									"//     var error_code = jsonData.errors[0].extensions.code;  ",
									"//     pm.expect(error_code).to.eql(\"InternalServerError\");",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4ec2bfac-92d6-420b-8985-f55e23489cb7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query songs($input: SongListInput!) {\r\n  songs(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs  Not Mandatory Field  Blank - order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c1145d0-528c-4916-b7cc-1e9f01e8f1c4",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Order\\\" enum.\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "78573bd3-b7e3-4bec-aa73-e5e974ea563f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query songs($input: SongListInput!) {\r\n  songs(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs Parameter Mismatch - count",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1ba2ed5-18a3-4579-bd4b-79bfec00f869",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"SongListInput\\\". Did you mean \\\"count\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "addb4f66-cf4c-4780-b7c2-286f22906a45",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query songs($input: SongListInput!) {\r\n  songs(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count1\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs Parameter Mismatch - page",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2c2f525-bcc6-4456-97da-ad2fe0d3e9bc",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"SongListInput\\\". Did you mean \\\"page\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "966593c5-e10e-4346-9857-3c86d029cdf2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query songs($input: SongListInput!) {\r\n  songs(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page1\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs Parameter Mismatch - sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d1b6c22-ba7d-4abd-84a3-ee42b8c990f9",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"SongListInput\\\". Did you mean \\\"sort\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ff5d53ef-8151-4390-aea2-554dd2027475",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query songs($input: SongListInput!) {\r\n  songs(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort1\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs Parameter Mismatch - order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "661062a2-f271-430f-8996-942601ee3084",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"is not defined by type \\\"SongListInput\\\". Did you mean \\\"order\\\"?\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "090a0a7d-826f-4a8a-b33d-905695bf44d6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query songs($input: SongListInput!) {\r\n  songs(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order1\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs Parameter Invalid - count min",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e534b2fd-5444-4bad-b34f-0998713a08de",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that count error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors.count.min;  ",
									"    pm.expect(error_message).to.eql(\"count must not be less than 1\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a5a14ff7-c9a4-4627-ba69-94fde863f7f0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query songs($input: SongListInput!) {\r\n  songs(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": 0,\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs Parameter Invalid - count max",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45a3433e-c014-4c05-b285-90f6a35b719d",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that count error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors.count.max;  ",
									"    pm.expect(error_message).to.eql(\"count must not be greater than 100\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3ab63a08-cb36-46e9-a47b-a63ef4ccd4ad",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query songs($input: SongListInput!) {\r\n  songs(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": 159,\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs Parameter Invalid  - page",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7731c8a5-e425-45de-9145-7a42f23284ac",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");",
									"});",
									"",
									"pm.test(\"Verify that error status is 400\", function () {",
									"    var error_status = jsonData.errors[0].extensions.status;  ",
									"    pm.expect(error_status).to.eql(400);",
									"});",
									"",
									"pm.test(\"Verify that count error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].extensions.errors.page.min;  ",
									"    pm.expect(error_message).to.eql(\"page must not be less than 1\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2bb72989-af17-46f7-9249-40dbfdf6f68b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query songs($input: SongListInput!) {\r\n  songs(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": 0,\r\n        \"sort\": \"name\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs Parameter Invalid - sort",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2f115c8-cc60-4949-8627-00a77dc90c67",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"PENDING >> Similar to BUG #776(closed-Sprint 13) for Users (Sort Field allows empty value/unusual characters)\", function () {",
									"",
									"    if (jsonData.data) {",
									"        pm.expect(\"BACKEND\").to.eql(\"PENDING\"); // fail forcefully",
									"    } else {",
									"        pm.expect(\"WRITE TEST CASES\").to.eql(\"ERRORS >>> \" + jsonData.errors[0].message);",
									"    }",
									"});",
									"",
									"// pm.test(\"Verify that error message is correct\", function () {",
									"//     var error_message = jsonData.errors[0].message;  ",
									"//     pm.expect(error_message).to.include(\"Invalid input\");",
									"// });",
									"",
									"// pm.test(\"Verify that error code is InternalServerError\", function () {",
									"//     var error_code = jsonData.errors[0].extensions.code;  ",
									"//     pm.expect(error_code).to.eql(\"InternalServerError\");",
									"// });",
									"",
									"// pm.test(\"Verify that error status is 500\", function () {",
									"//     var error_status = jsonData.errors[0].extensions.status;  ",
									"//     pm.expect(error_status).to.eql(500);",
									"// });",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "982a4e5f-7080-40c6-a124-d3e2c61775e7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query songs($input: SongListInput!) {\r\n  songs(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"qwerty\",\r\n        \"order\": \"{{order}}\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Songs Parameter Invalid - order",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8196c6a0-5318-4794-b346-b795330cca59",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"//Common Verification",
									"pm.test(\"Status code is 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));",
									"});",
									"",
									"//Test Specific",
									"pm.test(\"Verify that error message is correct\", function () {",
									"    var error_message = jsonData.errors[0].message;  ",
									"    pm.expect(error_message).to.include(\"does not exist in \\\"Order\\\" enum\");",
									"});",
									"",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {",
									"    var error_code = jsonData.errors[0].extensions.code;  ",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "feac2716-95b3-4a75-be79-b4ec06cbedc6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query songs($input: SongListInput!) {\r\n  songs(input: $input) {\r\n    total\r\n    hasMore\r\n    items {\r\n      id\r\n      createdAt\r\n      scriptureReferences {\r\n        value {\r\n          start {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          end {\r\n            book\r\n            chapter\r\n            verse\r\n            label\r\n          }\r\n          label\r\n          totalVerses\r\n        }\r\n        canEdit\r\n        canRead\r\n      }\r\n      name {\r\n        value\r\n        canEdit\r\n        canRead\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": "{\r\n    \"input\": {\r\n        \"count\": {{itemCount}},\r\n        \"page\": {{page}},\r\n        \"sort\": \"name\",\r\n        \"order\": \"11 #$%% ^&*\"\r\n    }\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Song Mandatory Field Blank  - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ff813d9b-512e-48f1-8ba8-40308e56a114",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is 400\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.eql(\"Input validation failed\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error status is 400\", function () {\r",
									"    var error_status = jsonData.errors[0].extensions.status;  \r",
									"    pm.expect(error_status).to.eql(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that language error message is correct\", function () {\r",
									"    var error_language_message = jsonData.errors[0].extensions.errors.id.IsId;  \r",
									"    pm.expect(error_language_message).to.eql(\"Invalid ID\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "61457090-3eee-442f-a538-025032a7fa8f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteSong($id: ID!) {\r\n  deleteSong(id: $id)\r\n}\r\n",
								"variables": "{\r\n    \"id\": \"\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Song Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba43707e-47ba-462c-8e8b-b7f18b3a5942",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that Song is deleted\", function () {\r",
									"    pm.expect(jsonData.data.deleteSong).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3ec654d8-4c26-4ef1-97a3-98e64ee1bbc9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteSong($id: ID!) {\r\n  deleteSong(id: $id)\r\n}\r\n",
								"variables": "{\r\n    \"id\": \"{{songId}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete song Mandatory Field Removed  - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38748a5b-37e6-467c-b6ef-969511e42cc7",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "deae5449-8092-476b-9b71-62eb897846e8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteSong($id: ID!) {\r\n  deleteSong(id: $id)\r\n}\r\n",
								"variables": "{\r\n    \r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Song Parameter Mismatch - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78b9aa8e-17a2-4b53-98e7-f5d06aa0d244",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b30c6094-fa8d-4d4b-bb1d-f1cffcbe7f0a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteSong($id: ID!) {\r\n  deleteSong(id: $id)\r\n}\r\n",
								"variables": "{\r\n    \"id1\": \"{{songId}}\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Song Parameter Invalid - Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8db6a670-909d-4091-9c3c-6b9409cd2ff6",
								"exec": [
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Common Verification\r",
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(Number(pm.globals.get('responseTime')));\r",
									"});\r",
									"\r",
									"//Test Specific\r",
									"pm.test(\"Verify that error message is correct\", function () {\r",
									"    var error_message = jsonData.errors[0].message;  \r",
									"    pm.expect(error_message).to.include(\"Variable \\\"$id\\\" of required type \\\"ID!\\\" was not provided\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that error code is INTERNAL_SERVER_ERROR\", function () {\r",
									"    var error_code = jsonData.errors[0].extensions.code;  \r",
									"    pm.expect(error_code).to.eql(\"INTERNAL_SERVER_ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "461ba522-57a9-4eee-ae21-1f4c6b99191e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteSong($id: ID!) {\r\n  deleteSong(id: $id)\r\n}\r\n",
								"variables": "{\r\n    \"id1\": \"!@#$%^&*\"\r\n}"
							},
							"options": {
								"graphql": {}
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}
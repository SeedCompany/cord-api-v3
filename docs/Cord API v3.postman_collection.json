{
	"info": {
		"_postman_id": "e1aaa9a5-e66f-4b9a-b5cd-f7ed7e04e062",
		"name": "Cord API v3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Token",
			"item": [
				{
					"name": "Create Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a94fb930-31a0-43f9-82c9-a38150839466",
								"exec": [
									"var response = pm.response.json();\r",
									"pm.globals.set(\"token\", response.data.createSession.token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const moment = require('moment');\r",
									"pm.globals.set(\"timeStamp\", moment().format(\"DDMYYYYhhmmss\"));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n      createSession {\r\n        token\r\n      }\r\n    }\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1408667e-d99a-45cb-b734-8a3bc5ce679f",
								"exec": [
									"var schema = {",
									"",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"data\": {",
									"      \"type\": \"object\",",
									"      \"properties\": {",
									"        \"createUser\": {",
									"          \"type\": \"object\",",
									"          \"properties\": {",
									"            \"user\": {",
									"              \"type\": \"object\",",
									"              \"properties\": {",
									"                \"id\": {",
									"                  \"type\": \"string\"",
									"                },",
									"                \"realFirstName\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"canRead\": {",
									"                      \"type\": \"boolean\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"canRead\"",
									"                  ]",
									"                },",
									"                \"displayLastName\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"canRead\": {",
									"                      \"type\": \"boolean\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"canRead\"",
									"                  ]",
									"                },",
									"                \"email\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"canRead\": {",
									"                      \"type\": \"boolean\"",
									"                    },",
									"                    \"canEdit\": {",
									"                      \"type\": \"boolean\"",
									"                    },",
									"                    \"value\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"canRead\",",
									"                    \"canEdit\",",
									"                    \"value\"",
									"                  ]",
									"                },",
									"                \"bio\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"canRead\": {",
									"                      \"type\": \"boolean\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"canRead\"",
									"                  ]",
									"                },",
									"                \"phone\": {",
									"                  \"type\": \"object\",",
									"                  \"properties\": {",
									"                    \"value\": {",
									"                      \"type\": \"string\"",
									"                    }",
									"                  },",
									"                  \"required\": [",
									"                    \"value\"",
									"                  ]",
									"                }",
									"              },",
									"              \"required\": [",
									"                \"id\",",
									"                \"realFirstName\",",
									"                \"displayLastName\",",
									"                \"email\",",
									"                \"bio\",",
									"                \"phone\"",
									"              ]",
									"            }",
									"          },",
									"          \"required\": [",
									"            \"user\"",
									"          ]",
									"        }",
									"      },",
									"      \"required\": [",
									"        \"createUser\"",
									"      ]",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"data\"",
									"  ]",
									" };",
									"",
									"",
									"",
									"var data1 = pm.response.json();",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(data1, schema)).to.be.true;",
									" ",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const moment = require('moment');",
									"pm.globals.set(\"timeStamp\", moment().format(\"DDMYYYYhhmmss\"));",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    var id = jsonData.data.createUser.user.id;",
									"    pm.globals.set(\"userid\",id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6b5f17b6-fbbf-4634-b984-261b278b6ae5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createUser($input:CreateUserInput!){\r\n  createUser(input : $input)\r\n  {\r\n   user{\r\n      id\r\n      realFirstName{\r\n        canRead\r\n      }\r\n      displayLastName{\r\n        canRead\r\n      }\r\n      email{\r\n        canRead\r\n        canEdit\r\n        value\r\n      }\r\n      bio{\r\n        canRead\r\n      }\r\n      phone{\r\n        value\r\n      }\r\n    }\r\n  }\r\n}\r\n",
								"variables": " {\r\n \t\"input\": \r\n  {\r\n    \"user\" :\r\n    {\r\n\t\t\"email\": \"{{timeStamp}}invalid@mailinator.com\",\r\n        \"realFirstName\":\"Firstname\",\r\n        \"realLastName\":\"Lastname\",\r\n        \"password\":\"test@123\",\r\n        \"displayFirstName\": \"Test\",\r\n        \"displayLastName\":\"User\",\r\n        \"phone\":\"12345678\",\r\n        \"timezone\":\"2\",\r\n        \"bio\":\"Bio\"\r\n        \r\n\t  }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ece2246d-50da-4c34-8593-648e87a1be36",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateUser( $input:UpdateUserInput! ){ \r\n    updateUser(input : $input)\r\n      {\r\n       user {\r\n            id\r\n            createdAt\r\n            email {\r\n                value\r\n                canRead\r\n                canEdit\r\n            }\r\n            realFirstName {\r\n                value\r\n                canRead\r\n                canEdit\r\n            }\r\n            realLastName {\r\n                value\r\n                canRead\r\n                canEdit\r\n            }\r\n            displayFirstName {\r\n                value\r\n                canRead\r\n                canEdit\r\n            }\r\n            displayLastName {\r\n                value\r\n                canRead\r\n                canEdit\r\n            }\r\n        }\r\n        }\r\n}",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"user\" :\r\n    {\r\n\t\t\"id\": \"{{userid}}\",\r\n        \"realLastName\": \"Lastname\"\r\n\t  }\r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d8ea5549-3ec5-4554-93d0-86cd9713fcbc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation ($id: ID!) {\r\n  deleteOrganization(id:$id)\r\n}",
								"variables": "{\r\n  \"id\": \"{{organizationid}}\"\r\n  \r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1408667e-d99a-45cb-b734-8a3bc5ce679f",
								"exec": [
									"var schema = {",
									"\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"\t\"type\": \"object\",",
									"\t\"properties\": {",
									"\t\t\"data\": {",
									"\t\t\t\"type\": \"object\",",
									"\t\t\t\"properties\": {",
									"\t\t\t\t\"users\": {",
									"\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\"total\": {",
									"\t\t\t\t\t\t\t\"type\": \"integer\"",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\"type\": \"array\",",
									"\t\t\t\t\t\t\t\"items\": [{",
									"\t\t\t\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\"id\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"createdAt\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"email\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"value\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\"value\"",
									"\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\"id\",",
									"\t\t\t\t\t\t\t\t\t\"createdAt\",",
									"\t\t\t\t\t\t\t\t\t\"email\"",
									"\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t}]",
									"\t\t\t\t\t\t}",
									"\t\t\t\t\t}",
									"\t\t\t\t}",
									"\t\t\t}",
									"\t\t}",
									"\t}",
									"};",
									"",
									"var data1 = pm.response.json();",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(data1, schema)).to.be.true;",
									" ",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": " query user\r\n {\r\n     user(id:\"{{userid}}\")\r\n  {\r\n    id\r\n    email\r\n\t  {\r\n\t    value\r\n\t  }\r\n  }\r\n }",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users - UnAthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1408667e-d99a-45cb-b734-8a3bc5ce679f",
								"exec": [
									"",
									"pm.test(\"Response boy has status code is 401\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors[0].message.statusCode).to.eql(401);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  users\r\n  {\r\n    total\r\n     items {\r\n      id\r\n      createdAt\r\n      email\r\n      {\r\n        value\r\n      }\r\n    }\r\n      \r\n   }\r\n}\r\n\r\n\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1408667e-d99a-45cb-b734-8a3bc5ce679f",
								"exec": [
									"var schema = {",
									"\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"\t\"type\": \"object\",",
									"\t\"properties\": {",
									"\t\t\"data\": {",
									"\t\t\t\"type\": \"object\",",
									"\t\t\t\"properties\": {",
									"\t\t\t\t\"users\": {",
									"\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\"total\": {",
									"\t\t\t\t\t\t\t\"type\": \"integer\"",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\"type\": \"array\",",
									"\t\t\t\t\t\t\t\"items\": [{",
									"\t\t\t\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\"id\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"createdAt\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"email\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"value\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\"value\"",
									"\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\"id\",",
									"\t\t\t\t\t\t\t\t\t\"createdAt\",",
									"\t\t\t\t\t\t\t\t\t\"email\"",
									"\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t}]",
									"\t\t\t\t\t\t}",
									"\t\t\t\t\t}",
									"\t\t\t\t}",
									"\t\t\t}",
									"\t\t}",
									"\t}",
									"};",
									"",
									"var data1 = pm.response.json();",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(data1, schema)).to.be.true;",
									" ",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\r\n  users\r\n  {\r\n    total\r\n     items {\r\n      id\r\n      createdAt\r\n      email\r\n      {\r\n        value\r\n      }\r\n    }\r\n      \r\n   }\r\n}\r\n\r\n\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Organization",
			"item": [
				{
					"name": "Create Organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4ad8473-f2a2-45af-915e-746016191cd2",
								"exec": [
									" pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    var id = jsonData.data.createOrganization.organization.id;",
									"    pm.globals.set(\"organizationid\",id);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" ",
									" ",
									" ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "token_w3Yw9_-x",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation createOrganization($input:CreateOrganizationInput!) {\r\n   createOrganization(input : $input)\r\n   {\r\n    organization\r\n    {\r\n      id\r\n      name\r\n      {\r\n        value\r\n      }\r\n      createdAt\r\n    }\r\n  }\r\n}\r\n  ",
								"variables": "{\n  \"input\": \n  {\n    \"organization\" :\n    {\n\t\t\t\t \n      \"name\":\"{{timeStamp}} Test Org Name\"      \n    } \n        \n\t  }\n  }\n\n\n\n"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5653dbf7-0d70-47cf-84d9-5d3d8f540b2e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation  updateOrganization($input:UpdateOrganizationInput!) \r\n{ \r\n    updateOrganization(input : $input)\r\n  {\r\n    organization {\r\n      id\r\n      name {\r\n          value\r\n          canRead\r\n          canEdit\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": "{\r\n  \"input\": \r\n  {\r\n    \"organization\" :\r\n    {\r\n\t\t\t\t \r\n      \"id\":\"{{organizationid}}\",\r\n      \"name\": \"asdf was here\"\r\n    } \r\n        \r\n  }\r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "19fabfbb-c8c1-450c-8156-5657b1637e68",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "token_jPUFciM4"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "\nmutation ($id: ID!) {\n  deleteOrganization(id:$id)\n}",
								"variables": "{\r\n  \"id\": \"{{organizationid}}\"\r\n  \r\n}"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Organization by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1408667e-d99a-45cb-b734-8a3bc5ce679f",
								"exec": [
									"var schema = {",
									"\t\"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"\t\"type\": \"object\",",
									"\t\"properties\": {",
									"\t\t\"data\": {",
									"\t\t\t\"type\": \"object\",",
									"\t\t\t\"properties\": {",
									"\t\t\t\t\"users\": {",
									"\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\"total\": {",
									"\t\t\t\t\t\t\t\"type\": \"integer\"",
									"\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\"items\": {",
									"\t\t\t\t\t\t\t\"type\": \"array\",",
									"\t\t\t\t\t\t\t\"items\": [{",
									"\t\t\t\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\"id\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"createdAt\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\"email\": {",
									"\t\t\t\t\t\t\t\t\t\t\"type\": \"object\",",
									"\t\t\t\t\t\t\t\t\t\t\"properties\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\"value\": {",
									"\t\t\t\t\t\t\t\t\t\t\t\t\"type\": \"string\"",
									"\t\t\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\t\t\"value\"",
									"\t\t\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t\t\t}",
									"\t\t\t\t\t\t\t\t},",
									"\t\t\t\t\t\t\t\t\"required\": [",
									"\t\t\t\t\t\t\t\t\t\"id\",",
									"\t\t\t\t\t\t\t\t\t\"createdAt\",",
									"\t\t\t\t\t\t\t\t\t\"email\"",
									"\t\t\t\t\t\t\t\t]",
									"\t\t\t\t\t\t\t}]",
									"\t\t\t\t\t\t}",
									"\t\t\t\t\t}",
									"\t\t\t\t}",
									"\t\t\t}",
									"\t\t}",
									"\t}",
									"};",
									"",
									"var data1 = pm.response.json();",
									"",
									"pm.test('Schema is valid', function() {",
									"  pm.expect(tv4.validate(data1, schema)).to.be.true;",
									" ",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "\r\n{\r\n  organization(id:\"{{organizationid}}\")\r\n  {\r\n    name{\r\n      value\r\n    }\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Organizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "285a663b-19bc-489c-b034-1c7d13bdece3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "token_jPUFciM4",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Write your query or mutation here\nquery {\n  organizations {\n      hasMore\n      total\n      items{\n          id\n          name {\n              value\n              canRead\n              canEdit\n          }\n       \n      }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b4b2359-765f-47d4-ba6f-fbd0406eacba",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "token_oUMLIbbU",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation login($input:LoginInput!)\r\n    {\r\n    login(input:$input)\r\n      {\r\n        user{\r\n          email\r\n          {\r\n            canRead\r\n            canEdit\r\n            value\r\n          } \r\n       }\r\n        success\r\n      }    \r\n  }",
								"variables": "{\r\n  \"input\": \r\n  {\r\n   \r\n\t\t\"email\": \"{{timeStamp}}invalid@mailinator.com\",\r\n        \"password\": \"test@123\"\r\n   \r\n\t  }\r\n  }"
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Availability",
			"item": [
				{
					"name": "create Unavailability",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4814195a-efce-4d22-91c6-f8e395f13a92",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODA3NDUwNDM5MTR9.flOU2_Fh6rOt8bGH03mZdNcER2QF_sawH0RKbBRN5qY",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  createUnavailability(\r\n    input: {\r\n      unavailability: {\r\n        userId: \"1rTePB8e3\"\r\n        description: \"asdf\"\r\n        start: \"2020/03/06 18:36:47\"\r\n        end: \"2020/03/10 18:36:47\"\r\n        \r\n      }\r\n    }\r\n  ) \r\n  {\r\n    unavailability {\r\n     id\r\n     description\r\n      {\r\n        value\r\n      }\r\n      start\r\n      end\r\n  }\r\n}\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{env}}/graphql",
							"host": [
								"{{env}}"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}
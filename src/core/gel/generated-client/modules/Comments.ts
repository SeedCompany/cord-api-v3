// GENERATED by @gel/generate v0.6.2

import * as $ from "../reflection";
import * as _ from "../imports";
import type * as _default from "./default";
import type * as _Notification from "./Notification";
import type * as _Mixin from "./Mixin";
export type $AwareλShape = $.typeutil.flatten<Omit<_default.$ResourceλShape, "<container"> & {
  "commentThreads": $.LinkDesc<$Thread, $.Cardinality.Many, {}, false, true,  false, false>;
  "<container[is Comments::Thread]": $.LinkDesc<$Thread, $.Cardinality.Many, {}, false, false,  false, false>;
  "<container": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Aware = $.ObjectType<"Comments::Aware", $AwareλShape, null, [
  ..._default.$Resource['__exclusives__'],
], "default::InternshipEngagement" | "default::InternshipProject" | "default::Language" | "default::LanguageEngagement" | "default::MomentumTranslationProject" | "default::MultiplicationTranslationProject" | "default::Partner" | "default::ProgressReport" | "default::User" | "default::currentUser">;
const $Aware = $.makeType<$Aware>(_.spec, "3571cd28-0670-11f0-8f18-d1586f5f24d7", _.syntax.literal);

const Aware: $.$expr_PathNode<$.TypeSet<$Aware, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Aware, $.Cardinality.Many), null);

export type $CommentλShape = $.typeutil.flatten<_default.$ResourceλShape & {
  "thread": $.LinkDesc<$Thread, $.Cardinality.One, {}, false, false,  false, false>;
  "body": $.PropertyDesc<_default.$RichText, $.Cardinality.One, false, false, false, false>;
  "<comment[is Notification::Comment]": $.LinkDesc<_Notification.$Comment, $.Cardinality.Many, {}, false, false,  false, false>;
  "<comments[is Comments::Thread]": $.LinkDesc<$Thread, $.Cardinality.Many, {}, false, false,  false, false>;
  "<firstComment[is Comments::Thread]": $.LinkDesc<$Thread, $.Cardinality.Many, {}, false, false,  false, false>;
  "<latestComment[is Comments::Thread]": $.LinkDesc<$Thread, $.Cardinality.Many, {}, false, false,  false, false>;
  "<comment[is Notification::CommentViaMembership]": $.LinkDesc<_Notification.$CommentViaMembership, $.Cardinality.Many, {}, false, false,  false, false>;
  "<comment[is Notification::CommentViaMention]": $.LinkDesc<_Notification.$CommentViaMention, $.Cardinality.Many, {}, false, false,  false, false>;
  "<comment": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<comments": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<firstComment": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<latestComment": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Comment = $.ObjectType<"Comments::Comment", $CommentλShape, null, [
  ..._default.$Resource['__exclusives__'],
], "Comments::Comment">;
const $Comment = $.makeType<$Comment>(_.spec, "5a75f540-0670-11f0-a135-6dcb9ff358ab", _.syntax.literal);

const Comment: $.$expr_PathNode<$.TypeSet<$Comment, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Comment, $.Cardinality.Many), null);

export type $ThreadλShape = $.typeutil.flatten<_default.$ResourceλShape & Omit<_Mixin.$EmbeddedλShape, "container"> & {
  "container": $.LinkDesc<$Aware, $.Cardinality.One, {}, false, false,  false, false>;
  "comments": $.LinkDesc<$Comment, $.Cardinality.Many, {}, false, true,  false, false>;
  "firstComment": $.LinkDesc<$Comment, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "latestComment": $.LinkDesc<$Comment, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "<commentThreads[is Engagement]": $.LinkDesc<_default.$Engagement, $.Cardinality.Many, {}, false, false,  false, false>;
  "<commentThreads[is LanguageEngagement]": $.LinkDesc<_default.$LanguageEngagement, $.Cardinality.Many, {}, false, false,  false, false>;
  "<commentThreads[is InternshipEngagement]": $.LinkDesc<_default.$InternshipEngagement, $.Cardinality.Many, {}, false, false,  false, false>;
  "<commentThreads[is User]": $.LinkDesc<_default.$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<commentThreads[is currentUser]": $.LinkDesc<_default.$currentUser, $.Cardinality.Many, {}, false, false,  false, false>;
  "<commentThreads[is ProgressReport]": $.LinkDesc<_default.$ProgressReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<commentThreads[is Language]": $.LinkDesc<_default.$Language, $.Cardinality.Many, {}, false, false,  false, false>;
  "<commentThreads[is Partner]": $.LinkDesc<_default.$Partner, $.Cardinality.Many, {}, false, false,  false, false>;
  "<commentThreads[is Comments::Aware]": $.LinkDesc<$Aware, $.Cardinality.Many, {}, false, false,  false, false>;
  "<commentThreads[is Project]": $.LinkDesc<_default.$Project, $.Cardinality.Many, {}, false, false,  false, false>;
  "<commentThreads[is InternshipProject]": $.LinkDesc<_default.$InternshipProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<commentThreads[is TranslationProject]": $.LinkDesc<_default.$TranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<commentThreads[is MomentumTranslationProject]": $.LinkDesc<_default.$MomentumTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<commentThreads[is MultiplicationTranslationProject]": $.LinkDesc<_default.$MultiplicationTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<thread[is Comments::Comment]": $.LinkDesc<$Comment, $.Cardinality.Many, {}, false, false,  false, false>;
  "<commentThreads": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<thread": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Thread = $.ObjectType<"Comments::Thread", $ThreadλShape, null, [
  ..._default.$Resource['__exclusives__'],
  ..._Mixin.$Embedded['__exclusives__'],
], "Comments::Thread">;
const $Thread = $.makeType<$Thread>(_.spec, "5a64e69c-0670-11f0-b6aa-714fdb5bad33", _.syntax.literal);

const Thread: $.$expr_PathNode<$.TypeSet<$Thread, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Thread, $.Cardinality.Many), null);



export { $Aware, Aware, $Comment, Comment, $Thread, Thread };

type __defaultExports = {
  "Aware": typeof Aware;
  "Comment": typeof Comment;
  "Thread": typeof Thread
};
const __defaultExports: __defaultExports = {
  "Aware": Aware,
  "Comment": Comment,
  "Thread": Thread
};
export default __defaultExports;

// GENERATED by @gel/generate v0.6.2

import * as $ from "../reflection";

import type { ID } from '~/common/id-field';
import type { RichTextDocument } from '~/common/rich-text.scalar';
import * as _ from "../imports";
import type * as _std from "./std";
import type * as _Mixin from "./Mixin";
import type * as _Prompt from "./Prompt";
import type * as _File from "./File";
import type * as _ProgressReport from "./ProgressReport";
import type * as _Notification from "./Notification";
import type * as _Project from "./Project";
import type * as _Engagement from "./Engagement";
import type * as _User from "./User";
import type * as _Budget from "./Budget";
import type * as _Product from "./Product";
import type * as _Comments from "./Comments";
import type * as _Scripture from "./Scripture";
import type * as _ProgressReportProductProgress from "./ProgressReport/ProductProgress";
import type * as _cal from "./cal";
import type * as _Ethnologue from "./Ethnologue";
import type * as _Language from "./Language";
import type * as _Location from "./Location";
import type * as _Organization from "./Organization";
import type * as _Partnership from "./Partnership";
import type * as _Partner from "./Partner";
import type * as _Post from "./Post";
import type * as _Auth from "./Auth";
export type $ReportPeriod = {
  "Monthly": $.$expr_Literal<$ReportPeriod>;
  "Quarterly": $.$expr_Literal<$ReportPeriod>;
} & $.EnumType<"default::ReportPeriod", ["Monthly", "Quarterly"]>;
const ReportPeriod: $ReportPeriod = $.makeType<$ReportPeriod>(_.spec, "07843ad6-0670-11f0-bf67-6906a0eabd78", _.syntax.literal);

export type $RichText = $.ScalarType<"std::json", RichTextDocument>;
const RichText: $.scalarTypeWithConstructor<_std.$json, never> = $.makeType<$.scalarTypeWithConstructor<_std.$json, never>>(_.spec, "088950e2-0670-11f0-b03a-5bf232fcbbd6", _.syntax.literal);

export type $Role = {
  "Administrator": $.$expr_Literal<$Role>;
  "BetaTester": $.$expr_Literal<$Role>;
  "BibleTranslationLiaison": $.$expr_Literal<$Role>;
  "Consultant": $.$expr_Literal<$Role>;
  "ConsultantManager": $.$expr_Literal<$Role>;
  "Controller": $.$expr_Literal<$Role>;
  "ExperienceOperations": $.$expr_Literal<$Role>;
  "FieldOperationsDirector": $.$expr_Literal<$Role>;
  "FieldPartner": $.$expr_Literal<$Role>;
  "FinancialAnalyst": $.$expr_Literal<$Role>;
  "Fundraising": $.$expr_Literal<$Role>;
  "Intern": $.$expr_Literal<$Role>;
  "LeadFinancialAnalyst": $.$expr_Literal<$Role>;
  "Leadership": $.$expr_Literal<$Role>;
  "Liaison": $.$expr_Literal<$Role>;
  "Marketing": $.$expr_Literal<$Role>;
  "Mentor": $.$expr_Literal<$Role>;
  "ProjectManager": $.$expr_Literal<$Role>;
  "RegionalCommunicationsCoordinator": $.$expr_Literal<$Role>;
  "RegionalDirector": $.$expr_Literal<$Role>;
  "StaffMember": $.$expr_Literal<$Role>;
  "Translator": $.$expr_Literal<$Role>;
} & $.EnumType<"default::Role", ["Administrator", "BetaTester", "BibleTranslationLiaison", "Consultant", "ConsultantManager", "Controller", "ExperienceOperations", "FieldOperationsDirector", "FieldPartner", "FinancialAnalyst", "Fundraising", "Intern", "LeadFinancialAnalyst", "Leadership", "Liaison", "Marketing", "Mentor", "ProjectManager", "RegionalCommunicationsCoordinator", "RegionalDirector", "StaffMember", "Translator"]>;
const Role: $Role = $.makeType<$Role>(_.spec, "077cebdc-0670-11f0-93fb-cfd4070fc689", _.syntax.literal);

export type $Sensitivity = {
  "Low": $.$expr_Literal<$Sensitivity>;
  "Medium": $.$expr_Literal<$Sensitivity>;
  "High": $.$expr_Literal<$Sensitivity>;
} & $.EnumType<"default::Sensitivity", ["Low", "Medium", "High"]>;
const Sensitivity: $Sensitivity = $.makeType<$Sensitivity>(_.spec, "078448be-0670-11f0-9fdc-652e4051b91b", _.syntax.literal);

export type $Sens = {
  "Low": $.$expr_Literal<$Sens>;
  "Medium": $.$expr_Literal<$Sens>;
  "High": $.$expr_Literal<$Sens>;
} & $.EnumType<"default::Sens", ["Low", "Medium", "High"]>;
const Sens: $Sens = $.makeType<$Sens>(_.spec, "0affd9e0-0670-11f0-a6a9-0b15bc8898e6", _.syntax.literal);

export type $currentRoles = {
  "Administrator": $.$expr_Literal<$currentRoles>;
  "BetaTester": $.$expr_Literal<$currentRoles>;
  "BibleTranslationLiaison": $.$expr_Literal<$currentRoles>;
  "Consultant": $.$expr_Literal<$currentRoles>;
  "ConsultantManager": $.$expr_Literal<$currentRoles>;
  "Controller": $.$expr_Literal<$currentRoles>;
  "ExperienceOperations": $.$expr_Literal<$currentRoles>;
  "FieldOperationsDirector": $.$expr_Literal<$currentRoles>;
  "FieldPartner": $.$expr_Literal<$currentRoles>;
  "FinancialAnalyst": $.$expr_Literal<$currentRoles>;
  "Fundraising": $.$expr_Literal<$currentRoles>;
  "Intern": $.$expr_Literal<$currentRoles>;
  "LeadFinancialAnalyst": $.$expr_Literal<$currentRoles>;
  "Leadership": $.$expr_Literal<$currentRoles>;
  "Liaison": $.$expr_Literal<$currentRoles>;
  "Marketing": $.$expr_Literal<$currentRoles>;
  "Mentor": $.$expr_Literal<$currentRoles>;
  "ProjectManager": $.$expr_Literal<$currentRoles>;
  "RegionalCommunicationsCoordinator": $.$expr_Literal<$currentRoles>;
  "RegionalDirector": $.$expr_Literal<$currentRoles>;
  "StaffMember": $.$expr_Literal<$currentRoles>;
  "Translator": $.$expr_Literal<$currentRoles>;
} & $.EnumType<"default::currentRoles", ["Administrator", "BetaTester", "BibleTranslationLiaison", "Consultant", "ConsultantManager", "Controller", "ExperienceOperations", "FieldOperationsDirector", "FieldPartner", "FinancialAnalyst", "Fundraising", "Intern", "LeadFinancialAnalyst", "Leadership", "Liaison", "Marketing", "Mentor", "ProjectManager", "RegionalCommunicationsCoordinator", "RegionalDirector", "StaffMember", "Translator"]>;
const currentRoles: $currentRoles = $.makeType<$currentRoles>(_.spec, "085ef888-0670-11f0-ae37-e59eb9ccaa00", _.syntax.literal);

export type $nanoid = $.ScalarType<"std::str", ID>;
const nanoid: $.scalarTypeWithConstructor<_std.$str, never> = $.makeType<$.scalarTypeWithConstructor<_std.$str, never>>(_.spec, "0affe872-0670-11f0-8097-77fab8c757db", _.syntax.literal);

export type $population = $.ScalarType<"std::number", number>;
const population: $.scalarTypeWithConstructor<_std.$number, string> = $.makeType<$.scalarTypeWithConstructor<_std.$number, string>>(_.spec, "084b5a26-0670-11f0-833e-7bc963d41028", _.syntax.literal);

export type $ResourceλShape = $.typeutil.flatten<_Mixin.$AuditedλShape & {
  "<container[is Mixin::Embedded]": $.LinkDesc<_Mixin.$Embedded, $.Cardinality.Many, {}, false, false,  false, false>;
  "<container[is Prompt::PromptVariantResponse]": $.LinkDesc<_Prompt.$PromptVariantResponse, $.Cardinality.Many, {}, false, false,  false, false>;
  "<container[is PeriodicReport]": $.LinkDesc<$PeriodicReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<container": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Resource = $.ObjectType<"default::Resource", $ResourceλShape, null, [
  ..._Mixin.$Audited['__exclusives__'],
], "Budget::Record" | "Comments::Comment" | "Comments::Thread" | "Engagement::CertificationCeremony" | "Engagement::DedicationCeremony" | "File::Version" | "Product::PartnershipProducingMedium" | "ProgressReport::CommunityStory" | "ProgressReport::Highlight" | "ProgressReport::Media" | "ProgressReport::TeamNews" | "ProgressReport::VarianceExplanation" | "Project::Member" | "User::Education" | "User::Unavailability" | "default::Budget" | "default::DerivativeScriptureProduct" | "default::DirectScriptureProduct" | "default::Directory" | "default::EthnoArt" | "default::FieldRegion" | "default::FieldZone" | "default::File" | "default::Film" | "default::FinancialReport" | "default::FundingAccount" | "default::InternshipEngagement" | "default::InternshipProject" | "default::Language" | "default::LanguageEngagement" | "default::Location" | "default::MomentumTranslationProject" | "default::MultiplicationTranslationProject" | "default::NarrativeReport" | "default::Organization" | "default::OtherProduct" | "default::Partner" | "default::Partnership" | "default::Post" | "default::ProgressReport" | "default::Story" | "default::User" | "default::currentUser">;
const $Resource = $.makeType<$Resource>(_.spec, "07936e20-0670-11f0-b4ea-e562b502f2c3", _.syntax.literal);

const Resource: $.$expr_PathNode<$.TypeSet<$Resource, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Resource, $.Cardinality.Many), null);

export type $MediaλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "file": $.LinkDesc<_File.$Version, $.Cardinality.One, {}, true, false,  true, false>;
  "altText": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "caption": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "mimeType": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "<media[is File]": $.LinkDesc<$File, $.Cardinality.Many, {}, false, false,  false, false>;
  "<media[is ProgressReport::Media]": $.LinkDesc<_ProgressReport.$Media, $.Cardinality.Many, {}, false, false,  false, false>;
  "<media": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Media = $.ObjectType<"default::Media", $MediaλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {file: {__element__: _File.$Version, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
], "Media::Audio" | "Media::Image" | "Media::Video">;
const $Media = $.makeType<$Media>(_.spec, "1c6b7a36-0670-11f0-afe3-175858dfeebc", _.syntax.literal);

const Media: $.$expr_PathNode<$.TypeSet<$Media, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Media, $.Cardinality.Many), null);

export type $NotificationλShape = $.typeutil.flatten<_Mixin.$AuditedλShape & {
  "recipients": $.LinkDesc<_Notification.$Recipient, $.Cardinality.Many, {}, false, true,  false, false>;
  "currentRecipient": $.LinkDesc<_Notification.$Recipient, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "readAt": $.PropertyDesc<_std.$datetime, $.Cardinality.AtMostOne, false, true, false, false>;
  "unread": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, true, false, false>;
  "<notification[is Notification::Recipient]": $.LinkDesc<_Notification.$Recipient, $.Cardinality.Many, {}, false, false,  false, false>;
  "<notification": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Notification = $.ObjectType<"default::Notification", $NotificationλShape, null, [
  ..._Mixin.$Audited['__exclusives__'],
], "Notification::CommentViaMembership" | "Notification::CommentViaMention" | "Notification::System">;
const $Notification = $.makeType<$Notification>(_.spec, "e98881da-0670-11f0-adb1-f97d51655bec", _.syntax.literal);

const Notification: $.$expr_PathNode<$.TypeSet<$Notification, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Notification, $.Cardinality.Many), null);

export type $ActorλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "roles": $.PropertyDesc<$Role, $.Cardinality.Many, false, false, false, false>;
  "<createdBy[is Mixin::Audited]": $.LinkDesc<_Mixin.$Audited, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Mixin::Audited]": $.LinkDesc<_Mixin.$Audited, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Resource]": $.LinkDesc<$Resource, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Resource]": $.LinkDesc<$Resource, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Notification::Comment]": $.LinkDesc<_Notification.$Comment, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Notification::Comment]": $.LinkDesc<_Notification.$Comment, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is FundingAccount]": $.LinkDesc<$FundingAccount, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is FundingAccount]": $.LinkDesc<$FundingAccount, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Location]": $.LinkDesc<$Location, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Location]": $.LinkDesc<$Location, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is File::Node]": $.LinkDesc<_File.$Node, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is File::Node]": $.LinkDesc<_File.$Node, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is File::Version]": $.LinkDesc<_File.$Version, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is File::Version]": $.LinkDesc<_File.$Version, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Directory]": $.LinkDesc<$Directory, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Directory]": $.LinkDesc<$Directory, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is File]": $.LinkDesc<$File, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is File]": $.LinkDesc<$File, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Project::Child]": $.LinkDesc<_Project.$Child, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Project::Child]": $.LinkDesc<_Project.$Child, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Engagement::Child]": $.LinkDesc<_Engagement.$Child, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Engagement::Child]": $.LinkDesc<_Engagement.$Child, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Engagement::Ceremony]": $.LinkDesc<_Engagement.$Ceremony, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Engagement::Ceremony]": $.LinkDesc<_Engagement.$Ceremony, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Engagement::CertificationCeremony]": $.LinkDesc<_Engagement.$CertificationCeremony, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Engagement::CertificationCeremony]": $.LinkDesc<_Engagement.$CertificationCeremony, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Engagement::DedicationCeremony]": $.LinkDesc<_Engagement.$DedicationCeremony, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Engagement::DedicationCeremony]": $.LinkDesc<_Engagement.$DedicationCeremony, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is User::Unavailability]": $.LinkDesc<_User.$Unavailability, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is User::Unavailability]": $.LinkDesc<_User.$Unavailability, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is User::Education]": $.LinkDesc<_User.$Education, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is User::Education]": $.LinkDesc<_User.$Education, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Project::Member]": $.LinkDesc<_Project.$Member, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Project::Member]": $.LinkDesc<_Project.$Member, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Budget::Record]": $.LinkDesc<_Budget.$Record, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Budget::Record]": $.LinkDesc<_Budget.$Record, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Budget]": $.LinkDesc<$Budget, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Budget]": $.LinkDesc<$Budget, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Organization]": $.LinkDesc<$Organization, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Organization]": $.LinkDesc<$Organization, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Product::PartnershipProducingMedium]": $.LinkDesc<_Product.$PartnershipProducingMedium, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Product::PartnershipProducingMedium]": $.LinkDesc<_Product.$PartnershipProducingMedium, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Partnership]": $.LinkDesc<$Partnership, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Partnership]": $.LinkDesc<$Partnership, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is ProgressReport::Child]": $.LinkDesc<_ProgressReport.$Child, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is ProgressReport::Child]": $.LinkDesc<_ProgressReport.$Child, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Prompt::PromptVariantResponse]": $.LinkDesc<_Prompt.$PromptVariantResponse, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Prompt::PromptVariantResponse]": $.LinkDesc<_Prompt.$PromptVariantResponse, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is ProgressReport::CommunityStory]": $.LinkDesc<_ProgressReport.$CommunityStory, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is ProgressReport::CommunityStory]": $.LinkDesc<_ProgressReport.$CommunityStory, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is ProgressReport::Highlight]": $.LinkDesc<_ProgressReport.$Highlight, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is ProgressReport::Highlight]": $.LinkDesc<_ProgressReport.$Highlight, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is ProgressReport::Media]": $.LinkDesc<_ProgressReport.$Media, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is ProgressReport::Media]": $.LinkDesc<_ProgressReport.$Media, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is ProgressReport::TeamNews]": $.LinkDesc<_ProgressReport.$TeamNews, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is ProgressReport::TeamNews]": $.LinkDesc<_ProgressReport.$TeamNews, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is ProgressReport::VarianceExplanation]": $.LinkDesc<_ProgressReport.$VarianceExplanation, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is ProgressReport::VarianceExplanation]": $.LinkDesc<_ProgressReport.$VarianceExplanation, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is PeriodicReport]": $.LinkDesc<$PeriodicReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is PeriodicReport]": $.LinkDesc<$PeriodicReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Prompt::VariantResponse]": $.LinkDesc<_Prompt.$VariantResponse, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Prompt::VariantResponse]": $.LinkDesc<_Prompt.$VariantResponse, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Product]": $.LinkDesc<$Product, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Product]": $.LinkDesc<$Product, $.Cardinality.Many, {}, false, false,  false, false>;
  "<who[is Project::WorkflowEvent]": $.LinkDesc<_Project.$WorkflowEvent, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is DirectScriptureProduct]": $.LinkDesc<$DirectScriptureProduct, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is DirectScriptureProduct]": $.LinkDesc<$DirectScriptureProduct, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is DerivativeScriptureProduct]": $.LinkDesc<$DerivativeScriptureProduct, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is DerivativeScriptureProduct]": $.LinkDesc<$DerivativeScriptureProduct, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Producible]": $.LinkDesc<$Producible, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Producible]": $.LinkDesc<$Producible, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is EthnoArt]": $.LinkDesc<$EthnoArt, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is EthnoArt]": $.LinkDesc<$EthnoArt, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Film]": $.LinkDesc<$Film, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Film]": $.LinkDesc<$Film, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Story]": $.LinkDesc<$Story, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Story]": $.LinkDesc<$Story, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is OtherProduct]": $.LinkDesc<$OtherProduct, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is OtherProduct]": $.LinkDesc<$OtherProduct, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is FieldRegion]": $.LinkDesc<$FieldRegion, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is FieldRegion]": $.LinkDesc<$FieldRegion, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is FieldZone]": $.LinkDesc<$FieldZone, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is FieldZone]": $.LinkDesc<$FieldZone, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Notification::System]": $.LinkDesc<_Notification.$System, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Notification::System]": $.LinkDesc<_Notification.$System, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is FinancialReport]": $.LinkDesc<$FinancialReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is FinancialReport]": $.LinkDesc<$FinancialReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is NarrativeReport]": $.LinkDesc<$NarrativeReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is NarrativeReport]": $.LinkDesc<$NarrativeReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Comments::Aware]": $.LinkDesc<_Comments.$Aware, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Comments::Aware]": $.LinkDesc<_Comments.$Aware, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Mixin::Postable]": $.LinkDesc<_Mixin.$Postable, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Mixin::Postable]": $.LinkDesc<_Mixin.$Postable, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Project]": $.LinkDesc<$Project, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Project]": $.LinkDesc<$Project, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Engagement]": $.LinkDesc<$Engagement, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is InternshipEngagement]": $.LinkDesc<$InternshipEngagement, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Engagement]": $.LinkDesc<$Engagement, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is InternshipEngagement]": $.LinkDesc<$InternshipEngagement, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is LanguageEngagement]": $.LinkDesc<$LanguageEngagement, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is TranslationProject]": $.LinkDesc<$TranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is LanguageEngagement]": $.LinkDesc<$LanguageEngagement, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is TranslationProject]": $.LinkDesc<$TranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is MomentumTranslationProject]": $.LinkDesc<$MomentumTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is currentUser]": $.LinkDesc<$currentUser, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is MomentumTranslationProject]": $.LinkDesc<$MomentumTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is currentUser]": $.LinkDesc<$currentUser, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is ProgressReport]": $.LinkDesc<$ProgressReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is ProgressReport]": $.LinkDesc<$ProgressReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is InternshipProject]": $.LinkDesc<$InternshipProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is InternshipProject]": $.LinkDesc<$InternshipProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Language]": $.LinkDesc<$Language, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Partner]": $.LinkDesc<$Partner, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Partner]": $.LinkDesc<$Partner, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is MultiplicationTranslationProject]": $.LinkDesc<$MultiplicationTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is MultiplicationTranslationProject]": $.LinkDesc<$MultiplicationTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Comments::Thread]": $.LinkDesc<_Comments.$Thread, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Comments::Thread]": $.LinkDesc<_Comments.$Thread, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Comments::Comment]": $.LinkDesc<_Comments.$Comment, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Comments::Comment]": $.LinkDesc<_Comments.$Comment, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Language]": $.LinkDesc<$Language, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Post]": $.LinkDesc<$Post, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Notification]": $.LinkDesc<$Notification, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Notification]": $.LinkDesc<$Notification, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Notification::CommentViaMembership]": $.LinkDesc<_Notification.$CommentViaMembership, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Notification::CommentViaMembership]": $.LinkDesc<_Notification.$CommentViaMembership, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy[is Notification::CommentViaMention]": $.LinkDesc<_Notification.$CommentViaMention, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy[is Notification::CommentViaMention]": $.LinkDesc<_Notification.$CommentViaMention, $.Cardinality.Many, {}, false, false,  false, false>;
  "<createdBy": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<modifiedBy": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<who": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Actor = $.ObjectType<"default::Actor", $ActorλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
], "default::SystemAgent" | "default::User" | "default::currentActor" | "default::currentUser">;
const $Actor = $.makeType<$Actor>(_.spec, "077cf758-0670-11f0-b5cb-5bd87f05de86", _.syntax.literal);

const Actor: $.$expr_PathNode<$.TypeSet<$Actor, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Actor, $.Cardinality.Many), null);

export type $AliasλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "target": $.LinkDesc<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588, $.Cardinality.One, {}, false, false,  false, false>;
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
}>;
type $Alias = $.ObjectType<"default::Alias", $AliasλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {name: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
], "default::Alias">;
const $Alias = $.makeType<$Alias>(_.spec, "0a115e5a-0670-11f0-8398-79995f7ccfe1", _.syntax.literal);

const Alias: $.$expr_PathNode<$.TypeSet<$Alias, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Alias, $.Cardinality.Many), null);

export type $BudgetλShape = $.typeutil.flatten<_Project.$ChildλShape & {
  "status": $.PropertyDesc<_Budget.$Status, $.Cardinality.One, false, false, false, true>;
  "universalTemplate": $.LinkDesc<$File, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "records": $.LinkDesc<_Budget.$Record, $.Cardinality.Many, {}, false, true,  false, false>;
  "<budget[is Budget::Record]": $.LinkDesc<_Budget.$Record, $.Cardinality.Many, {}, false, false,  false, false>;
  "<budget": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Budget = $.ObjectType<"default::Budget", $BudgetλShape, null, [
  ..._Project.$Child['__exclusives__'],
], "default::Budget">;
const $Budget = $.makeType<$Budget>(_.spec, "1c480e5c-0670-11f0-a940-fd7005aa97c0", _.syntax.literal);

const Budget: $.$expr_PathNode<$.TypeSet<$Budget, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Budget, $.Cardinality.Many), null);

export type $ProductλShape = $.typeutil.flatten<_Engagement.$ChildλShape & {
  "describeCompletion": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "mediums": $.PropertyDesc<_Product.$Medium, $.Cardinality.Many, false, false, false, false>;
  "methodology": $.PropertyDesc<_Product.$Methodology, $.Cardinality.AtMostOne, false, false, false, false>;
  "placeholderDescription": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "pnpIndex": $.PropertyDesc<_std.$int16, $.Cardinality.AtMostOne, false, false, false, false>;
  "progressStepMeasurement": $.PropertyDesc<_Product.$ProgressMeasurement, $.Cardinality.AtMostOne, false, false, false, false>;
  "progressTarget": $.PropertyDesc<_std.$int16, $.Cardinality.AtMostOne, false, false, false, false>;
  "purposes": $.PropertyDesc<_Product.$Purpose, $.Cardinality.Many, false, false, false, false>;
  "steps": $.PropertyDesc<_Product.$Step, $.Cardinality.Many, false, false, false, false>;
  "scripture": $.LinkDesc<_Scripture.$Collection, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "<product[is ProgressReport::ProductProgress::Step]": $.LinkDesc<_ProgressReportProductProgress.$Step, $.Cardinality.Many, {}, false, false,  false, false>;
  "<product": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Product = $.ObjectType<"default::Product", $ProductλShape, null, [
  ..._Engagement.$Child['__exclusives__'],
], "default::DerivativeScriptureProduct" | "default::DirectScriptureProduct" | "default::OtherProduct">;
const $Product = $.makeType<$Product>(_.spec, "1d849a2e-0670-11f0-bbc6-4d97c46e1d2f", _.syntax.literal);

const Product: $.$expr_PathNode<$.TypeSet<$Product, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Product, $.Cardinality.Many), null);

export type $DerivativeScriptureProductλShape = $.typeutil.flatten<Omit<$ProductλShape, "scripture"> & {
  "scriptureOverride": $.LinkDesc<_Scripture.$Collection, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "composite": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "totalVerseEquivalents": $.PropertyDesc<_std.$float32, $.Cardinality.AtMostOne, false, false, false, false>;
  "totalVerses": $.PropertyDesc<_std.$int16, $.Cardinality.AtMostOne, false, false, false, false>;
  "produces": $.LinkDesc<$Producible, $.Cardinality.One, {}, false, false,  false, false>;
  "scripture": $.LinkDesc<_Scripture.$Collection, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
}>;
type $DerivativeScriptureProduct = $.ObjectType<"default::DerivativeScriptureProduct", $DerivativeScriptureProductλShape, null, [
  ...$Product['__exclusives__'],
], "default::DerivativeScriptureProduct">;
const $DerivativeScriptureProduct = $.makeType<$DerivativeScriptureProduct>(_.spec, "1f8dee9c-0670-11f0-b9d1-7951a6cca1f1", _.syntax.literal);

const DerivativeScriptureProduct: $.$expr_PathNode<$.TypeSet<$DerivativeScriptureProduct, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($DerivativeScriptureProduct, $.Cardinality.Many), null);

export type $DirectScriptureProductλShape = $.typeutil.flatten<$ProductλShape & {
  "unspecifiedScripture": $.LinkDesc<_Scripture.$UnspecifiedPortion, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "totalVerseEquivalents": $.PropertyDesc<_std.$float32, $.Cardinality.AtMostOne, false, false, false, false>;
  "totalVerses": $.PropertyDesc<_std.$int16, $.Cardinality.AtMostOne, false, false, false, false>;
}>;
type $DirectScriptureProduct = $.ObjectType<"default::DirectScriptureProduct", $DirectScriptureProductλShape, null, [
  ...$Product['__exclusives__'],
], "default::DirectScriptureProduct">;
const $DirectScriptureProduct = $.makeType<$DirectScriptureProduct>(_.spec, "1f763414-0670-11f0-bda6-ddeb60a1aa5b", _.syntax.literal);

const DirectScriptureProduct: $.$expr_PathNode<$.TypeSet<$DirectScriptureProduct, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($DirectScriptureProduct, $.Cardinality.Many), null);

export type $DirectoryλShape = $.typeutil.flatten<_File.$NodeλShape & {
  "totalFiles": $.PropertyDesc<_std.$int32, $.Cardinality.One, false, false, false, true>;
  "<rootDirectory[is Project]": $.LinkDesc<$Project, $.Cardinality.Many, {}, false, false,  false, false>;
  "<rootDirectory[is TranslationProject]": $.LinkDesc<$TranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<rootDirectory[is MomentumTranslationProject]": $.LinkDesc<$MomentumTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<rootDirectory[is InternshipProject]": $.LinkDesc<$InternshipProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<rootDirectory[is MultiplicationTranslationProject]": $.LinkDesc<$MultiplicationTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<rootDirectory": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Directory = $.ObjectType<"default::Directory", $DirectoryλShape, null, [
  ..._File.$Node['__exclusives__'],
], "default::Directory">;
const $Directory = $.makeType<$Directory>(_.spec, "083d607e-0670-11f0-804b-3330c02a2796", _.syntax.literal);

const Directory: $.$expr_PathNode<$.TypeSet<$Directory, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Directory, $.Cardinality.Many), null);

export type $EngagementλShape = $.typeutil.flatten<_Project.$ChildλShape & _Comments.$AwareλShape & {
  "description": $.PropertyDesc<$RichText, $.Cardinality.AtMostOne, false, false, false, false>;
  "disbursementCompleteDate": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, false, false, false>;
  "endDateOverride": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, false, false, false>;
  "endDate": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, true, false, false>;
  "startDateOverride": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, false, false, false>;
  "startDate": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, true, false, false>;
  "status": $.PropertyDesc<_Engagement.$Status, $.Cardinality.One, false, false, false, true>;
  "statusModifiedAt": $.PropertyDesc<_std.$datetime, $.Cardinality.AtMostOne, false, false, false, false>;
  "initialEndDate": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, false, false, false>;
  "lastReactivatedAt": $.PropertyDesc<_std.$datetime, $.Cardinality.AtMostOne, false, false, false, false>;
  "lastSuspendedAt": $.PropertyDesc<_std.$datetime, $.Cardinality.AtMostOne, false, false, false, false>;
  "ceremony": $.LinkDesc<_Engagement.$Ceremony, $.Cardinality.One, {}, false, true,  false, false>;
  "completeDate": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, false, false, false>;
  "<engagement[is Engagement::Child]": $.LinkDesc<_Engagement.$Child, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagement[is Engagement::Ceremony]": $.LinkDesc<_Engagement.$Ceremony, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagement[is Engagement::DedicationCeremony]": $.LinkDesc<_Engagement.$DedicationCeremony, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagement[is Engagement::CertificationCeremony]": $.LinkDesc<_Engagement.$CertificationCeremony, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagement[is Product::PartnershipProducingMedium]": $.LinkDesc<_Product.$PartnershipProducingMedium, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagement[is ProgressReport::Child]": $.LinkDesc<_ProgressReport.$Child, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagement[is ProgressReport::CommunityStory]": $.LinkDesc<_ProgressReport.$CommunityStory, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagement[is ProgressReport::Highlight]": $.LinkDesc<_ProgressReport.$Highlight, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagement[is ProgressReport::Media]": $.LinkDesc<_ProgressReport.$Media, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagement[is ProgressReport::TeamNews]": $.LinkDesc<_ProgressReport.$TeamNews, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagement[is ProgressReport::VarianceExplanation]": $.LinkDesc<_ProgressReport.$VarianceExplanation, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagement[is Product]": $.LinkDesc<$Product, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagement[is DirectScriptureProduct]": $.LinkDesc<$DirectScriptureProduct, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagement[is DerivativeScriptureProduct]": $.LinkDesc<$DerivativeScriptureProduct, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagement[is OtherProduct]": $.LinkDesc<$OtherProduct, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagement": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Engagement = $.ObjectType<"default::Engagement", $EngagementλShape, null, [
  ..._Project.$Child['__exclusives__'],
  ..._Comments.$Aware['__exclusives__'],
], "default::InternshipEngagement" | "default::LanguageEngagement">;
const $Engagement = $.makeType<$Engagement>(_.spec, "08895c2c-0670-11f0-9fe0-c1830b6dbceb", _.syntax.literal);

const Engagement: $.$expr_PathNode<$.TypeSet<$Engagement, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Engagement, $.Cardinality.Many), null);

export type $ProducibleλShape = $.typeutil.flatten<$ResourceλShape & Omit<_Mixin.$NamedλShape, "name"> & {
  "scripture": $.LinkDesc<_Scripture.$Collection, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "<produces[is DerivativeScriptureProduct]": $.LinkDesc<$DerivativeScriptureProduct, $.Cardinality.Many, {}, false, false,  false, false>;
  "<produces": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Producible = $.ObjectType<"default::Producible", $ProducibleλShape, null, [
  ...$Resource['__exclusives__'],
  ..._Mixin.$Named['__exclusives__'],
  {name: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
], "default::EthnoArt" | "default::Film" | "default::Story">;
const $Producible = $.makeType<$Producible>(_.spec, "1fa1ea14-0670-11f0-85cd-955e83e49678", _.syntax.literal);

const Producible: $.$expr_PathNode<$.TypeSet<$Producible, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Producible, $.Cardinality.Many), null);

export type $EthnoArtλShape = $.typeutil.flatten<$ProducibleλShape & {
}>;
type $EthnoArt = $.ObjectType<"default::EthnoArt", $EthnoArtλShape, null, [
  ...$Producible['__exclusives__'],
], "default::EthnoArt">;
const $EthnoArt = $.makeType<$EthnoArt>(_.spec, "1fac59d6-0670-11f0-97ce-5d1ed574f5e3", _.syntax.literal);

const EthnoArt: $.$expr_PathNode<$.TypeSet<$EthnoArt, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($EthnoArt, $.Cardinality.Many), null);

export type $FieldRegionλShape = $.typeutil.flatten<$ResourceλShape & Omit<_Mixin.$NamedλShape, "name"> & {
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "director": $.LinkDesc<$User, $.Cardinality.One, {}, false, false,  false, false>;
  "fieldZone": $.LinkDesc<$FieldZone, $.Cardinality.One, {}, false, false,  false, false>;
  "<fieldRegions[is FieldZone]": $.LinkDesc<$FieldZone, $.Cardinality.Many, {}, false, false,  false, false>;
  "<defaultFieldRegion[is Location]": $.LinkDesc<$Location, $.Cardinality.Many, {}, false, false,  false, false>;
  "<fieldRegion[is Project]": $.LinkDesc<$Project, $.Cardinality.Many, {}, false, false,  false, false>;
  "<marketingRegionOverride[is Project]": $.LinkDesc<$Project, $.Cardinality.Many, {}, false, false,  false, false>;
  "<fieldRegions[is Partner]": $.LinkDesc<$Partner, $.Cardinality.Many, {}, false, false,  false, false>;
  "<marketingRegionOverride[is TranslationProject]": $.LinkDesc<$TranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<fieldRegion[is TranslationProject]": $.LinkDesc<$TranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<marketingRegionOverride[is MomentumTranslationProject]": $.LinkDesc<$MomentumTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<fieldRegion[is MomentumTranslationProject]": $.LinkDesc<$MomentumTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<marketingRegionOverride[is InternshipProject]": $.LinkDesc<$InternshipProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<fieldRegion[is InternshipProject]": $.LinkDesc<$InternshipProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<fieldRegion[is MultiplicationTranslationProject]": $.LinkDesc<$MultiplicationTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<marketingRegionOverride[is MultiplicationTranslationProject]": $.LinkDesc<$MultiplicationTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<defaultFieldRegion": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<fieldRegion": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<fieldRegions": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<marketingRegionOverride": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $FieldRegion = $.ObjectType<"default::FieldRegion", $FieldRegionλShape, null, [
  ...$Resource['__exclusives__'],
  ..._Mixin.$Named['__exclusives__'],
  {name: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
], "default::FieldRegion">;
const $FieldRegion = $.makeType<$FieldRegion>(_.spec, "2029bcd2-0670-11f0-9d29-eda584ae910d", _.syntax.literal);

const FieldRegion: $.$expr_PathNode<$.TypeSet<$FieldRegion, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($FieldRegion, $.Cardinality.Many), null);

export type $FieldZoneλShape = $.typeutil.flatten<$ResourceλShape & Omit<_Mixin.$NamedλShape, "name"> & {
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "director": $.LinkDesc<$User, $.Cardinality.One, {}, false, false,  false, false>;
  "fieldRegions": $.LinkDesc<$FieldRegion, $.Cardinality.Many, {}, false, true,  false, false>;
  "<fieldZone[is FieldRegion]": $.LinkDesc<$FieldRegion, $.Cardinality.Many, {}, false, false,  false, false>;
  "<fieldZone": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $FieldZone = $.ObjectType<"default::FieldZone", $FieldZoneλShape, null, [
  ...$Resource['__exclusives__'],
  ..._Mixin.$Named['__exclusives__'],
  {name: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
], "default::FieldZone">;
const $FieldZone = $.makeType<$FieldZone>(_.spec, "20337fb0-0670-11f0-8bdd-2d53cde54160", _.syntax.literal);

const FieldZone: $.$expr_PathNode<$.TypeSet<$FieldZone, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($FieldZone, $.Cardinality.Many), null);

export type $FileλShape = $.typeutil.flatten<_File.$NodeλShape & {
  "latestVersion": $.LinkDesc<_File.$Version, $.Cardinality.One, {}, false, false,  false, false>;
  "mimeType": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "media": $.LinkDesc<$Media, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "<mapImage[is Location]": $.LinkDesc<$Location, $.Cardinality.Many, {}, false, false,  false, false>;
  "<growthPlan[is InternshipEngagement]": $.LinkDesc<$InternshipEngagement, $.Cardinality.Many, {}, false, false,  false, false>;
  "<pnp[is LanguageEngagement]": $.LinkDesc<$LanguageEngagement, $.Cardinality.Many, {}, false, false,  false, false>;
  "<universalTemplate[is Budget]": $.LinkDesc<$Budget, $.Cardinality.Many, {}, false, false,  false, false>;
  "<agreement[is Partnership]": $.LinkDesc<$Partnership, $.Cardinality.Many, {}, false, false,  false, false>;
  "<mou[is Partnership]": $.LinkDesc<$Partnership, $.Cardinality.Many, {}, false, false,  false, false>;
  "<file[is ProgressReport::Media]": $.LinkDesc<_ProgressReport.$Media, $.Cardinality.Many, {}, false, false,  false, false>;
  "<reportFile[is PeriodicReport]": $.LinkDesc<$PeriodicReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<reportFile[is FinancialReport]": $.LinkDesc<$FinancialReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<reportFile[is NarrativeReport]": $.LinkDesc<$NarrativeReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<reportFile[is ProgressReport]": $.LinkDesc<$ProgressReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<agreement": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<file": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<growthPlan": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<mapImage": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<mou": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<pnp": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<reportFile": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<universalTemplate": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $File = $.ObjectType<"default::File", $FileλShape, null, [
  ..._File.$Node['__exclusives__'],
], "default::File">;
const $File = $.makeType<$File>(_.spec, "0844a46a-0670-11f0-ae9d-b1d6c2eeb4db", _.syntax.literal);

const File: $.$expr_PathNode<$.TypeSet<$File, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($File, $.Cardinality.Many), null);

export type $FilmλShape = $.typeutil.flatten<$ProducibleλShape & {
}>;
type $Film = $.ObjectType<"default::Film", $FilmλShape, null, [
  ...$Producible['__exclusives__'],
], "default::Film">;
const $Film = $.makeType<$Film>(_.spec, "1fd544cc-0670-11f0-a757-b1248b0e47d4", _.syntax.literal);

const Film: $.$expr_PathNode<$.TypeSet<$Film, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Film, $.Cardinality.Many), null);

export type $PeriodicReportλShape = $.typeutil.flatten<$ResourceλShape & _Mixin.$EmbeddedλShape & {
  "reportFile": $.LinkDesc<$File, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "period": $.PropertyDesc<$.RangeType<_cal.$local_date>, $.Cardinality.One, false, false, false, false>;
  "end": $.PropertyDesc<_cal.$local_date, $.Cardinality.One, false, true, false, false>;
  "receivedDate": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, false, false, false>;
  "skippedReason": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "start": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, true, false, false>;
}>;
type $PeriodicReport = $.ObjectType<"default::PeriodicReport", $PeriodicReportλShape, null, [
  ...$Resource['__exclusives__'],
  ..._Mixin.$Embedded['__exclusives__'],
], "default::FinancialReport" | "default::NarrativeReport" | "default::ProgressReport">;
const $PeriodicReport = $.makeType<$PeriodicReport>(_.spec, "1d3d1a28-0670-11f0-bb6b-413089c92480", _.syntax.literal);

const PeriodicReport: $.$expr_PathNode<$.TypeSet<$PeriodicReport, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($PeriodicReport, $.Cardinality.Many), null);

export type $FinancialReportλShape = $.typeutil.flatten<$PeriodicReportλShape & _Project.$ChildλShape & {
  "container": $.LinkDesc<$Project, $.Cardinality.One, {}, false, false,  false, false>;
}>;
type $FinancialReport = $.ObjectType<"default::FinancialReport", $FinancialReportλShape, null, [
  ...$PeriodicReport['__exclusives__'],
  ..._Project.$Child['__exclusives__'],
], "default::FinancialReport">;
const $FinancialReport = $.makeType<$FinancialReport>(_.spec, "2060e0d6-0670-11f0-a715-bf0ac3659847", _.syntax.literal);

const FinancialReport: $.$expr_PathNode<$.TypeSet<$FinancialReport, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($FinancialReport, $.Cardinality.Many), null);

export type $FundingAccountλShape = $.typeutil.flatten<$ResourceλShape & Omit<_Mixin.$NamedλShape, "name"> & {
  "accountNumber": $.PropertyDesc<_std.$int16, $.Cardinality.One, false, false, false, false>;
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "<fundingAccount[is Location]": $.LinkDesc<$Location, $.Cardinality.Many, {}, false, false,  false, false>;
  "<fundingAccount": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $FundingAccount = $.ObjectType<"default::FundingAccount", $FundingAccountλShape, null, [
  ...$Resource['__exclusives__'],
  ..._Mixin.$Named['__exclusives__'],
  {name: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
], "default::FundingAccount">;
const $FundingAccount = $.makeType<$FundingAccount>(_.spec, "07eb47bc-0670-11f0-9ddc-9bde12cd55a4", _.syntax.literal);

const FundingAccount: $.$expr_PathNode<$.TypeSet<$FundingAccount, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($FundingAccount, $.Cardinality.Many), null);



export type $InternshipEngagementλShape = $.typeutil.flatten<Omit<$EngagementλShape, "project"> & {
  "project": $.LinkDesc<$InternshipProject, $.Cardinality.One, {}, false, false,  true, false>;
  "growthPlan": $.LinkDesc<$File, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "countryOfOrigin": $.LinkDesc<$Location, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "methodologies": $.PropertyDesc<_Product.$Methodology, $.Cardinality.Many, false, false, false, false>;
  "position": $.PropertyDesc<_Engagement.$InternPosition, $.Cardinality.AtMostOne, false, false, false, false>;
  "intern": $.LinkDesc<$User, $.Cardinality.One, {}, false, false,  true, false>;
  "mentor": $.LinkDesc<$User, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "<engagements[is InternshipProject]": $.LinkDesc<$InternshipProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagements": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $InternshipEngagement = $.ObjectType<"default::InternshipEngagement", $InternshipEngagementλShape, null, [
  ...$Engagement['__exclusives__'],
  {project: {__element__: $InternshipProject, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },intern: {__element__: $User, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
], "default::InternshipEngagement">;
const $InternshipEngagement = $.makeType<$InternshipEngagement>(_.spec, "08a272f2-0670-11f0-a460-21b6c1ee55ae", _.syntax.literal);

const InternshipEngagement: $.$expr_PathNode<$.TypeSet<$InternshipEngagement, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($InternshipEngagement, $.Cardinality.Many), null);

export type $ProjectλShape = $.typeutil.flatten<Omit<_Mixin.$PostableλShape, "<container"> & Omit<_Comments.$AwareλShape, "<container"> & Omit<$ResourceλShape, "<container"> & Omit<_Project.$ContextAwareλShape, "ownSensitivity" | "projectContext"> & Omit<_Mixin.$NamedλShape, "name"> & _Mixin.$PinnableλShape & _Mixin.$TaggableλShape & {
  "step": $.PropertyDesc<_Project.$Step, $.Cardinality.One, false, false, false, true>;
  "status": $.PropertyDesc<_Project.$Status, $.Cardinality.One, false, true, false, false>;
  "ownSensitivity": $.PropertyDesc<$Sensitivity, $.Cardinality.One, false, false, false, true>;
  "estimatedSubmission": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, false, false, false>;
  "financialReportPeriod": $.PropertyDesc<$ReportPeriod, $.Cardinality.AtMostOne, false, false, false, false>;
  "financialReportReceivedAt": $.PropertyDesc<_std.$datetime, $.Cardinality.AtMostOne, false, false, false, false>;
  "mouEnd": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, false, false, false>;
  "initialMouEnd": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, false, false, true>;
  "mouStart": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, false, false, false>;
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "type": $.PropertyDesc<_Project.$Type, $.Cardinality.One, false, true, false, false>;
  "projectContext": $.LinkDesc<_Project.$Context, $.Cardinality.One, {}, false, false,  false, true>;
  "primaryLocation": $.LinkDesc<$Location, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "departmentId": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, true, false, false, false>;
  "members": $.LinkDesc<_Project.$Member, $.Cardinality.Many, {}, false, true,  false, false>;
  "membership": $.LinkDesc<_Project.$Member, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "rootDirectory": $.LinkDesc<$Directory, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "engagementTotal": $.PropertyDesc<_std.$int64, $.Cardinality.One, false, true, false, false>;
  "marketingLocation": $.LinkDesc<$Location, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "otherLocations": $.LinkDesc<$Location, $.Cardinality.Many, {}, false, false,  false, false>;
  "workflowEvents": $.LinkDesc<_Project.$WorkflowEvent, $.Cardinality.Many, {}, false, true,  false, false>;
  "latestWorkflowEvent": $.LinkDesc<_Project.$WorkflowEvent, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "fieldRegion": $.LinkDesc<$FieldRegion, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "marketingRegionOverride": $.LinkDesc<$FieldRegion, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "partnerships": $.LinkDesc<$Partnership, $.Cardinality.Many, {}, false, true,  false, false>;
  "<project[is Engagement]": $.LinkDesc<$Engagement, $.Cardinality.Many, {}, false, false,  false, false>;
  "<projects[is Project::Context]": $.LinkDesc<_Project.$Context, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is Project::Child]": $.LinkDesc<_Project.$Child, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is Engagement::Child]": $.LinkDesc<_Engagement.$Child, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is Engagement::Ceremony]": $.LinkDesc<_Engagement.$Ceremony, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is Engagement::CertificationCeremony]": $.LinkDesc<_Engagement.$CertificationCeremony, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is Engagement::DedicationCeremony]": $.LinkDesc<_Engagement.$DedicationCeremony, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is Project::Member]": $.LinkDesc<_Project.$Member, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is Budget::Record]": $.LinkDesc<_Budget.$Record, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is Budget]": $.LinkDesc<$Budget, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is Product::PartnershipProducingMedium]": $.LinkDesc<_Product.$PartnershipProducingMedium, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is Partnership]": $.LinkDesc<$Partnership, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is ProgressReport::Child]": $.LinkDesc<_ProgressReport.$Child, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is ProgressReport::CommunityStory]": $.LinkDesc<_ProgressReport.$CommunityStory, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is ProgressReport::Highlight]": $.LinkDesc<_ProgressReport.$Highlight, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is ProgressReport::Media]": $.LinkDesc<_ProgressReport.$Media, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is ProgressReport::TeamNews]": $.LinkDesc<_ProgressReport.$TeamNews, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is ProgressReport::VarianceExplanation]": $.LinkDesc<_ProgressReport.$VarianceExplanation, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is DerivativeScriptureProduct]": $.LinkDesc<$DerivativeScriptureProduct, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is Product]": $.LinkDesc<$Product, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is Project::WorkflowEvent]": $.LinkDesc<_Project.$WorkflowEvent, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is DirectScriptureProduct]": $.LinkDesc<$DirectScriptureProduct, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is OtherProduct]": $.LinkDesc<$OtherProduct, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is FinancialReport]": $.LinkDesc<$FinancialReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<container[is FinancialReport]": $.LinkDesc<$FinancialReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<container[is NarrativeReport]": $.LinkDesc<$NarrativeReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is NarrativeReport]": $.LinkDesc<$NarrativeReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is ProgressReport]": $.LinkDesc<$ProgressReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<container": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<projects": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Project = $.ObjectType<"default::Project", $ProjectλShape, null, [
  ..._Mixin.$Postable['__exclusives__'],
  ..._Comments.$Aware['__exclusives__'],
  ...$Resource['__exclusives__'],
  ..._Project.$ContextAware['__exclusives__'],
  ..._Mixin.$Named['__exclusives__'],
  ..._Mixin.$Pinnable['__exclusives__'],
  ..._Mixin.$Taggable['__exclusives__'],
  {departmentId: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
  {name: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
], "default::InternshipProject" | "default::MomentumTranslationProject" | "default::MultiplicationTranslationProject">;
const $Project = $.makeType<$Project>(_.spec, "07986da8-0670-11f0-9edd-9bf7e775488e", _.syntax.literal);

const Project: $.$expr_PathNode<$.TypeSet<$Project, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Project, $.Cardinality.Many), null);

export type $InternshipProjectλShape = $.typeutil.flatten<Omit<$ProjectλShape, "<project"> & {
  "engagements": $.LinkDesc<$InternshipEngagement, $.Cardinality.Many, {}, false, true,  false, false>;
  "<project[is InternshipEngagement]": $.LinkDesc<$InternshipEngagement, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $InternshipProject = $.ObjectType<"default::InternshipProject", $InternshipProjectλShape, null, [
  ...$Project['__exclusives__'],
], "default::InternshipProject">;
const $InternshipProject = $.makeType<$InternshipProject>(_.spec, "07aac4c6-0670-11f0-8376-592808f25e91", _.syntax.literal);

const InternshipProject: $.$expr_PathNode<$.TypeSet<$InternshipProject, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($InternshipProject, $.Cardinality.Many), null);

export type $LanguageλShape = $.typeutil.flatten<_Mixin.$PostableλShape & _Comments.$AwareλShape & $ResourceλShape & Omit<_Project.$ContextAwareλShape, "ownSensitivity" | "projectContext"> & _Mixin.$NamedλShape & _Mixin.$PinnableλShape & _Mixin.$TaggableλShape & {
  "projectContext": $.LinkDesc<_Project.$Context, $.Cardinality.One, {}, false, false,  false, true>;
  "ownSensitivity": $.PropertyDesc<$Sensitivity, $.Cardinality.One, false, false, false, true>;
  "populationOverride": $.PropertyDesc<$population, $.Cardinality.AtMostOne, false, false, false, false>;
  "hasExternalFirstScripture": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "isDialect": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "isSignLanguage": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "leastOfThese": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "locations": $.LinkDesc<$Location, $.Cardinality.Many, {}, false, false,  false, false>;
  "displayName": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, true>;
  "displayNamePronunciation": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "leastOfTheseReason": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "registryOfLanguageVarietiesCode": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, true, false, false, false>;
  "signLanguageCode": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "sponsorEstimatedEndDate": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, false, false, false>;
  "ethnologue": $.LinkDesc<_Ethnologue.$Language, $.Cardinality.One, {}, false, true,  false, false>;
  "population": $.PropertyDesc<$population, $.Cardinality.AtMostOne, false, true, false, false>;
  "firstScriptureEngagement": $.LinkDesc<$LanguageEngagement, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "engagements": $.LinkDesc<$LanguageEngagement, $.Cardinality.Many, {}, false, true,  false, false>;
  "projects": $.LinkDesc<$TranslationProject, $.Cardinality.Many, {}, false, true,  false, false>;
  "<language[is LanguageEngagement]": $.LinkDesc<$LanguageEngagement, $.Cardinality.Many, {}, false, false,  false, false>;
  "<language[is Ethnologue::Language]": $.LinkDesc<_Ethnologue.$Language, $.Cardinality.AtMostOne, {}, true, false,  false, false>;
  "<languages[is TranslationProject]": $.LinkDesc<$TranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<languageOfWiderCommunication[is Partner]": $.LinkDesc<$Partner, $.Cardinality.Many, {}, false, false,  false, false>;
  "<languagesOfConsulting[is Partner]": $.LinkDesc<$Partner, $.Cardinality.Many, {}, false, false,  false, false>;
  "<languages[is MomentumTranslationProject]": $.LinkDesc<$MomentumTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<languages[is MultiplicationTranslationProject]": $.LinkDesc<$MultiplicationTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<language": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<languageOfWiderCommunication": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<languages": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<languagesOfConsulting": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Language = $.ObjectType<"default::Language", $LanguageλShape, null, [
  ..._Mixin.$Postable['__exclusives__'],
  ..._Comments.$Aware['__exclusives__'],
  ...$Resource['__exclusives__'],
  ..._Project.$ContextAware['__exclusives__'],
  ..._Mixin.$Named['__exclusives__'],
  ..._Mixin.$Pinnable['__exclusives__'],
  ..._Mixin.$Taggable['__exclusives__'],
  {registryOfLanguageVarietiesCode: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
], "default::Language">;
const $Language = $.makeType<$Language>(_.spec, "084cbec0-0670-11f0-959f-51e459534a43", _.syntax.literal);

const Language: $.$expr_PathNode<$.TypeSet<$Language, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Language, $.Cardinality.Many), null);



export type $LanguageEngagementλShape = $.typeutil.flatten<Omit<Omit<$EngagementλShape, "project">, "<engagement"> & {
  "project": $.LinkDesc<$TranslationProject, $.Cardinality.One, {}, false, false,  true, false>;
  "language": $.LinkDesc<$Language, $.Cardinality.One, {}, false, false,  true, false>;
  "pnp": $.LinkDesc<$File, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "historicGoal": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "lukePartnership": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "openToInvestorVisit": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "paratextRegistryId": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "sentPrintingDate": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, false, false, false>;
  "firstScripture": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, true, false, false>;
  "milestoneReached": $.PropertyDesc<_Language.$Milestone, $.Cardinality.One, false, false, false, true>;
  "usingAIAssistedTranslation": $.PropertyDesc<_Engagement.$AIAssistedTranslation, $.Cardinality.One, false, false, false, true>;
  "<firstScriptureEngagement[is Language]": $.LinkDesc<$Language, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagements[is Language]": $.LinkDesc<$Language, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagements[is TranslationProject]": $.LinkDesc<$TranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagements[is MomentumTranslationProject]": $.LinkDesc<$MomentumTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<container[is ProgressReport]": $.LinkDesc<$ProgressReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagement[is ProgressReport]": $.LinkDesc<$ProgressReport, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagements[is MultiplicationTranslationProject]": $.LinkDesc<$MultiplicationTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<container": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagement": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<engagements": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<firstScriptureEngagement": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $LanguageEngagement = $.ObjectType<"default::LanguageEngagement", $LanguageEngagementλShape, null, [
  ...$Engagement['__exclusives__'],
  {project: {__element__: $TranslationProject, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },language: {__element__: $Language, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
], "default::LanguageEngagement">;
const $LanguageEngagement = $.makeType<$LanguageEngagement>(_.spec, "09660550-0670-11f0-9756-371e5d30fd92", _.syntax.literal);

const LanguageEngagement: $.$expr_PathNode<$.TypeSet<$LanguageEngagement, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($LanguageEngagement, $.Cardinality.Many), null);

export type $LocationλShape = $.typeutil.flatten<$ResourceλShape & Omit<_Mixin.$NamedλShape, "name"> & {
  "fundingAccount": $.LinkDesc<$FundingAccount, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "defaultMarketingRegion": $.LinkDesc<$Location, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "isoAlpha3": $.PropertyDesc<_Location.$IsoAlpha3Code, $.Cardinality.AtMostOne, true, false, false, false>;
  "type": $.PropertyDesc<_Location.$Type, $.Cardinality.One, false, false, false, false>;
  "mapImage": $.LinkDesc<$File, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "defaultFieldRegion": $.LinkDesc<$FieldRegion, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "<defaultMarketingRegion[is Location]": $.LinkDesc<$Location, $.Cardinality.Many, {}, false, false,  false, false>;
  "<primaryLocation[is Project]": $.LinkDesc<$Project, $.Cardinality.Many, {}, false, false,  false, false>;
  "<locations[is Language]": $.LinkDesc<$Language, $.Cardinality.Many, {}, false, false,  false, false>;
  "<countryOfOrigin[is InternshipEngagement]": $.LinkDesc<$InternshipEngagement, $.Cardinality.Many, {}, false, false,  false, false>;
  "<locations[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<marketingLocation[is Project]": $.LinkDesc<$Project, $.Cardinality.Many, {}, false, false,  false, false>;
  "<otherLocations[is Project]": $.LinkDesc<$Project, $.Cardinality.Many, {}, false, false,  false, false>;
  "<locations[is Organization]": $.LinkDesc<$Organization, $.Cardinality.Many, {}, false, false,  false, false>;
  "<countries[is Partner]": $.LinkDesc<$Partner, $.Cardinality.Many, {}, false, false,  false, false>;
  "<otherLocations[is TranslationProject]": $.LinkDesc<$TranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<marketingLocation[is TranslationProject]": $.LinkDesc<$TranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<primaryLocation[is TranslationProject]": $.LinkDesc<$TranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<otherLocations[is MomentumTranslationProject]": $.LinkDesc<$MomentumTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<marketingLocation[is MomentumTranslationProject]": $.LinkDesc<$MomentumTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<locations[is currentUser]": $.LinkDesc<$currentUser, $.Cardinality.Many, {}, false, false,  false, false>;
  "<marketingLocation[is InternshipProject]": $.LinkDesc<$InternshipProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<primaryLocation[is MomentumTranslationProject]": $.LinkDesc<$MomentumTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<otherLocations[is InternshipProject]": $.LinkDesc<$InternshipProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<primaryLocation[is InternshipProject]": $.LinkDesc<$InternshipProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<otherLocations[is MultiplicationTranslationProject]": $.LinkDesc<$MultiplicationTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<marketingLocation[is MultiplicationTranslationProject]": $.LinkDesc<$MultiplicationTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<primaryLocation[is MultiplicationTranslationProject]": $.LinkDesc<$MultiplicationTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<countries": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<countryOfOrigin": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<defaultMarketingRegion": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<locations": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<marketingLocation": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<otherLocations": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<primaryLocation": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Location = $.ObjectType<"default::Location", $LocationλShape, null, [
  ...$Resource['__exclusives__'],
  ..._Mixin.$Named['__exclusives__'],
  {name: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
  {isoAlpha3: {__element__: _Location.$IsoAlpha3Code, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
], "default::Location">;
const $Location = $.makeType<$Location>(_.spec, "07f4805c-0670-11f0-be1e-f1ef872f19fb", _.syntax.literal);

const Location: $.$expr_PathNode<$.TypeSet<$Location, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Location, $.Cardinality.Many), null);

export type $TranslationProjectλShape = $.typeutil.flatten<Omit<$ProjectλShape, "<project" | "<projects"> & {
  "engagements": $.LinkDesc<$LanguageEngagement, $.Cardinality.Many, {}, false, true,  false, false>;
  "languages": $.LinkDesc<$Language, $.Cardinality.Many, {}, false, true,  false, false>;
  "<projects[is Language]": $.LinkDesc<$Language, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project[is LanguageEngagement]": $.LinkDesc<$LanguageEngagement, $.Cardinality.Many, {}, false, false,  false, false>;
  "<project": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<projects": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $TranslationProject = $.ObjectType<"default::TranslationProject", $TranslationProjectλShape, null, [
  ...$Project['__exclusives__'],
], "default::MomentumTranslationProject" | "default::MultiplicationTranslationProject">;
const $TranslationProject = $.makeType<$TranslationProject>(_.spec, "07bd535c-0670-11f0-a1ab-0d5f865555b9", _.syntax.literal);

const TranslationProject: $.$expr_PathNode<$.TypeSet<$TranslationProject, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($TranslationProject, $.Cardinality.Many), null);

export type $MomentumTranslationProjectλShape = $.typeutil.flatten<$TranslationProjectλShape & {
}>;
type $MomentumTranslationProject = $.ObjectType<"default::MomentumTranslationProject", $MomentumTranslationProjectλShape, null, [
  ...$TranslationProject['__exclusives__'],
], "default::MomentumTranslationProject">;
const $MomentumTranslationProject = $.makeType<$MomentumTranslationProject>(_.spec, "07caa912-0670-11f0-8abc-af11265f377c", _.syntax.literal);

const MomentumTranslationProject: $.$expr_PathNode<$.TypeSet<$MomentumTranslationProject, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($MomentumTranslationProject, $.Cardinality.Many), null);

export type $MultiplicationTranslationProjectλShape = $.typeutil.flatten<$TranslationProjectλShape & {
}>;
type $MultiplicationTranslationProject = $.ObjectType<"default::MultiplicationTranslationProject", $MultiplicationTranslationProjectλShape, null, [
  ...$TranslationProject['__exclusives__'],
], "default::MultiplicationTranslationProject">;
const $MultiplicationTranslationProject = $.makeType<$MultiplicationTranslationProject>(_.spec, "07dd60fc-0670-11f0-aa6b-b91a540914f6", _.syntax.literal);

const MultiplicationTranslationProject: $.$expr_PathNode<$.TypeSet<$MultiplicationTranslationProject, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($MultiplicationTranslationProject, $.Cardinality.Many), null);

export type $NarrativeReportλShape = $.typeutil.flatten<$PeriodicReportλShape & _Project.$ChildλShape & {
  "container": $.LinkDesc<$Project, $.Cardinality.One, {}, false, false,  false, false>;
}>;
type $NarrativeReport = $.ObjectType<"default::NarrativeReport", $NarrativeReportλShape, null, [
  ...$PeriodicReport['__exclusives__'],
  ..._Project.$Child['__exclusives__'],
], "default::NarrativeReport">;
const $NarrativeReport = $.makeType<$NarrativeReport>(_.spec, "20717e6e-0670-11f0-ad74-99004a7dcd66", _.syntax.literal);

const NarrativeReport: $.$expr_PathNode<$.TypeSet<$NarrativeReport, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($NarrativeReport, $.Cardinality.Many), null);

export type $OrganizationλShape = $.typeutil.flatten<$ResourceλShape & Omit<_Project.$ContextAwareλShape, "projectContext"> & Omit<_Mixin.$NamedλShape, "name"> & {
  "projectContext": $.LinkDesc<_Project.$Context, $.Cardinality.One, {}, false, false,  false, true>;
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "locations": $.LinkDesc<$Location, $.Cardinality.Many, {}, false, false,  false, false>;
  "acronym": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "address": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "reach": $.PropertyDesc<_Organization.$Reach, $.Cardinality.Many, false, false, false, false>;
  "types": $.PropertyDesc<_Organization.$Type, $.Cardinality.Many, false, false, false, false>;
  "<organization[is Budget::Record]": $.LinkDesc<_Budget.$Record, $.Cardinality.Many, {}, false, false,  false, false>;
  "<organization[is Partner]": $.LinkDesc<$Partner, $.Cardinality.AtMostOne, {}, true, false,  false, false>;
  "<organization[is Partnership]": $.LinkDesc<$Partnership, $.Cardinality.Many, {}, false, false,  false, false>;
  "<organization": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Organization = $.ObjectType<"default::Organization", $OrganizationλShape, null, [
  ...$Resource['__exclusives__'],
  ..._Project.$ContextAware['__exclusives__'],
  ..._Mixin.$Named['__exclusives__'],
  {name: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
], "default::Organization">;
const $Organization = $.makeType<$Organization>(_.spec, "1c5717e4-0670-11f0-a5d8-cdc7639313e8", _.syntax.literal);

const Organization: $.$expr_PathNode<$.TypeSet<$Organization, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Organization, $.Cardinality.Many), null);

export type $OtherProductλShape = $.typeutil.flatten<$ProductλShape & {
  "description": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "title": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
}>;
type $OtherProduct = $.ObjectType<"default::OtherProduct", $OtherProductλShape, null, [
  ...$Product['__exclusives__'],
], "default::OtherProduct">;
const $OtherProduct = $.makeType<$OtherProduct>(_.spec, "2018baea-0670-11f0-bef2-0f6c7dcbacb5", _.syntax.literal);

const OtherProduct: $.$expr_PathNode<$.TypeSet<$OtherProduct, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($OtherProduct, $.Cardinality.Many), null);

export type $PartnerλShape = $.typeutil.flatten<_Mixin.$PostableλShape & _Comments.$AwareλShape & $ResourceλShape & _Project.$ContextAwareλShape & Omit<_Mixin.$NamedλShape, "name"> & _Mixin.$PinnableλShape & _Mixin.$TaggableλShape & {
  "fieldRegions": $.LinkDesc<$FieldRegion, $.Cardinality.Many, {}, false, false,  false, false>;
  "organization": $.LinkDesc<$Organization, $.Cardinality.One, {}, true, false,  true, false>;
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "countries": $.LinkDesc<$Location, $.Cardinality.Many, {}, false, false,  false, false>;
  "languageOfWiderCommunication": $.LinkDesc<$Language, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "languagesOfConsulting": $.LinkDesc<$Language, $.Cardinality.Many, {}, false, false,  false, false>;
  "pointOfContact": $.LinkDesc<$User, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "active": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "address": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "financialReportingTypes": $.PropertyDesc<_Partnership.$FinancialReportingType, $.Cardinality.Many, false, false, false, false>;
  "globalInnovationsClient": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "pmcEntityCode": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "startDate": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, false, false, false>;
  "types": $.PropertyDesc<_Partner.$Type, $.Cardinality.Many, false, false, false, false>;
  "approvedPrograms": $.PropertyDesc<_Project.$Type, $.Cardinality.Many, false, false, false, false>;
  "<partner[is Partnership]": $.LinkDesc<$Partnership, $.Cardinality.Many, {}, false, false,  false, false>;
  "<partner": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Partner = $.ObjectType<"default::Partner", $PartnerλShape, null, [
  ..._Mixin.$Postable['__exclusives__'],
  ..._Comments.$Aware['__exclusives__'],
  ...$Resource['__exclusives__'],
  ..._Project.$ContextAware['__exclusives__'],
  ..._Mixin.$Named['__exclusives__'],
  ..._Mixin.$Pinnable['__exclusives__'],
  ..._Mixin.$Taggable['__exclusives__'],
  {organization: {__element__: $Organization, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
  {name: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
], "default::Partner">;
const $Partner = $.makeType<$Partner>(_.spec, "2049f808-0670-11f0-97ae-bddda2fbabd0", _.syntax.literal);

const Partner: $.$expr_PathNode<$.TypeSet<$Partner, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Partner, $.Cardinality.Many), null);

export type $PartnershipλShape = $.typeutil.flatten<_Project.$ChildλShape & {
  "agreement": $.LinkDesc<$File, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "mou": $.LinkDesc<$File, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "mouEndOverride": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, false, false, false>;
  "mouEnd": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, true, false, false>;
  "mouStartOverride": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, false, false, false>;
  "mouStart": $.PropertyDesc<_cal.$local_date, $.Cardinality.AtMostOne, false, true, false, false>;
  "agreementStatus": $.PropertyDesc<_Partnership.$AgreementStatus, $.Cardinality.One, false, false, false, true>;
  "financialReportingType": $.PropertyDesc<_Partnership.$FinancialReportingType, $.Cardinality.AtMostOne, false, false, false, false>;
  "mouStatus": $.PropertyDesc<_Partnership.$AgreementStatus, $.Cardinality.One, false, false, false, true>;
  "primary": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "types": $.PropertyDesc<_Partner.$Type, $.Cardinality.Many, false, false, false, false>;
  "partner": $.LinkDesc<$Partner, $.Cardinality.One, {}, false, false,  false, false>;
  "organization": $.LinkDesc<$Organization, $.Cardinality.One, {}, false, true,  false, false>;
  "<partnership[is Product::PartnershipProducingMedium]": $.LinkDesc<_Product.$PartnershipProducingMedium, $.Cardinality.Many, {}, false, false,  false, false>;
  "<partnerships[is Project]": $.LinkDesc<$Project, $.Cardinality.Many, {}, false, false,  false, false>;
  "<partnerships[is TranslationProject]": $.LinkDesc<$TranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<partnerships[is MomentumTranslationProject]": $.LinkDesc<$MomentumTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<partnerships[is InternshipProject]": $.LinkDesc<$InternshipProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<partnerships[is MultiplicationTranslationProject]": $.LinkDesc<$MultiplicationTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<partnership": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<partnerships": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Partnership = $.ObjectType<"default::Partnership", $PartnershipλShape, null, [
  ..._Project.$Child['__exclusives__'],
], "default::Partnership">;
const $Partnership = $.makeType<$Partnership>(_.spec, "1c877178-0670-11f0-956c-33b119c597dc", _.syntax.literal);

const Partnership: $.$expr_PathNode<$.TypeSet<$Partnership, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Partnership, $.Cardinality.Many), null);

export type $PostλShape = $.typeutil.flatten<$ResourceλShape & Omit<_Mixin.$EmbeddedλShape, "container"> & {
  "container": $.LinkDesc<_Mixin.$Postable, $.Cardinality.One, {}, false, false,  false, false>;
  "isMember": $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne, false, true, false, false>;
  "sensitivity": $.PropertyDesc<$Sensitivity, $.Cardinality.AtMostOne, false, true, false, false>;
  "body": $.PropertyDesc<$RichText, $.Cardinality.One, false, false, false, false>;
  "shareability": $.PropertyDesc<_Post.$Shareability, $.Cardinality.One, false, false, false, false>;
  "type": $.PropertyDesc<_Post.$Type, $.Cardinality.One, false, false, false, false>;
  "<posts[is Language]": $.LinkDesc<$Language, $.Cardinality.Many, {}, false, false,  false, false>;
  "<posts[is Partner]": $.LinkDesc<$Partner, $.Cardinality.Many, {}, false, false,  false, false>;
  "<posts[is Mixin::Postable]": $.LinkDesc<_Mixin.$Postable, $.Cardinality.Many, {}, false, false,  false, false>;
  "<posts[is Project]": $.LinkDesc<$Project, $.Cardinality.Many, {}, false, false,  false, false>;
  "<posts[is InternshipProject]": $.LinkDesc<$InternshipProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<posts[is TranslationProject]": $.LinkDesc<$TranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<posts[is MomentumTranslationProject]": $.LinkDesc<$MomentumTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<posts[is MultiplicationTranslationProject]": $.LinkDesc<$MultiplicationTranslationProject, $.Cardinality.Many, {}, false, false,  false, false>;
  "<posts": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Post = $.ObjectType<"default::Post", $PostλShape, null, [
  ...$Resource['__exclusives__'],
  ..._Mixin.$Embedded['__exclusives__'],
], "default::Post">;
const $Post = $.makeType<$Post>(_.spec, "5b616958-0670-11f0-8302-5f388d6fe751", _.syntax.literal);

const Post: $.$expr_PathNode<$.TypeSet<$Post, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Post, $.Cardinality.Many), null);



export type $ProgressReportλShape = $.typeutil.flatten<Omit<$PeriodicReportλShape, "container" | "engagement"> & Omit<Omit<_Engagement.$ChildλShape, "container" | "engagement">, "engagement"> & Omit<Omit<_Comments.$AwareλShape, "container" | "engagement">, "<container"> & {
  "engagement": $.LinkDesc<$LanguageEngagement, $.Cardinality.One, {}, false, false,  true, false>;
  "container": $.LinkDesc<$LanguageEngagement, $.Cardinality.One, {}, false, false,  false, false>;
  "varianceExplanation": $.LinkDesc<_ProgressReport.$VarianceExplanation, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "workflowEvents": $.LinkDesc<_ProgressReport.$WorkflowEvent, $.Cardinality.Many, {}, false, true,  false, false>;
  "latestEvent": $.LinkDesc<_ProgressReport.$WorkflowEvent, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "status": $.PropertyDesc<_ProgressReport.$Status, $.Cardinality.One, false, true, false, false>;
  "<container[is ProgressReport::Highlight]": $.LinkDesc<_ProgressReport.$Highlight, $.Cardinality.Many, {}, false, false,  false, false>;
  "<report[is ProgressReport::Child]": $.LinkDesc<_ProgressReport.$Child, $.Cardinality.Many, {}, false, false,  false, false>;
  "<report[is ProgressReport::CommunityStory]": $.LinkDesc<_ProgressReport.$CommunityStory, $.Cardinality.Many, {}, false, false,  false, false>;
  "<report[is ProgressReport::VarianceExplanation]": $.LinkDesc<_ProgressReport.$VarianceExplanation, $.Cardinality.AtMostOne, {}, true, false,  false, false>;
  "<report[is ProgressReport::Highlight]": $.LinkDesc<_ProgressReport.$Highlight, $.Cardinality.Many, {}, false, false,  false, false>;
  "<report[is ProgressReport::Media]": $.LinkDesc<_ProgressReport.$Media, $.Cardinality.Many, {}, false, false,  false, false>;
  "<report[is ProgressReport::TeamNews]": $.LinkDesc<_ProgressReport.$TeamNews, $.Cardinality.Many, {}, false, false,  false, false>;
  "<container[is ProgressReport::CommunityStory]": $.LinkDesc<_ProgressReport.$CommunityStory, $.Cardinality.Many, {}, false, false,  false, false>;
  "<container[is ProgressReport::TeamNews]": $.LinkDesc<_ProgressReport.$TeamNews, $.Cardinality.Many, {}, false, false,  false, false>;
  "<report[is ProgressReport::WorkflowEvent]": $.LinkDesc<_ProgressReport.$WorkflowEvent, $.Cardinality.Many, {}, false, false,  false, false>;
  "<report[is ProgressReport::ProductProgress::Step]": $.LinkDesc<_ProgressReportProductProgress.$Step, $.Cardinality.Many, {}, false, false,  false, false>;
  "<report[is ProgressReport::ProductProgress::Summary]": $.LinkDesc<_ProgressReportProductProgress.$Summary, $.Cardinality.Many, {}, false, false,  false, false>;
  "<container": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<report": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $ProgressReport = $.ObjectType<"default::ProgressReport", $ProgressReportλShape, null, [
  ...$PeriodicReport['__exclusives__'],
  ..._Engagement.$Child['__exclusives__'],
  ..._Comments.$Aware['__exclusives__'],
], "default::ProgressReport">;
const $ProgressReport = $.makeType<$ProgressReport>(_.spec, "1d45ee28-0670-11f0-9c6a-fb6999b3e0e8", _.syntax.literal);

const ProgressReport: $.$expr_PathNode<$.TypeSet<$ProgressReport, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($ProgressReport, $.Cardinality.Many), null);

export type $StoryλShape = $.typeutil.flatten<$ProducibleλShape & {
}>;
type $Story = $.ObjectType<"default::Story", $StoryλShape, null, [
  ...$Producible['__exclusives__'],
], "default::Story">;
const $Story = $.makeType<$Story>(_.spec, "1fe95458-0670-11f0-8821-e5b8a856f46e", _.syntax.literal);

const Story: $.$expr_PathNode<$.TypeSet<$Story, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Story, $.Cardinality.Many), null);

export type $SystemAgentλShape = $.typeutil.flatten<$ActorλShape & Omit<_Mixin.$NamedλShape, "name"> & {
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
}>;
type $SystemAgent = $.ObjectType<"default::SystemAgent", $SystemAgentλShape, null, [
  ...$Actor['__exclusives__'],
  ..._Mixin.$Named['__exclusives__'],
  {name: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
], "default::SystemAgent">;
const $SystemAgent = $.makeType<$SystemAgent>(_.spec, "085ab7be-0670-11f0-80af-6bdc5bd57752", _.syntax.literal);

const SystemAgent: $.$expr_PathNode<$.TypeSet<$SystemAgent, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($SystemAgent, $.Cardinality.Many), null);

export type $UserλShape = $.typeutil.flatten<_Comments.$AwareλShape & $ResourceλShape & Omit<$ActorλShape, "<who"> & _Mixin.$PinnableλShape & {
  "pins": $.LinkDesc<_Mixin.$Pinnable, $.Cardinality.Many, {}, false, false,  false, false>;
  "unavailabilities": $.LinkDesc<_User.$Unavailability, $.Cardinality.Many, {}, false, false,  false, false>;
  "locations": $.LinkDesc<$Location, $.Cardinality.Many, {}, false, false,  false, false>;
  "about": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "realFirstName": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "displayFirstName": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, true>;
  "realLastName": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "displayLastName": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, true>;
  "email": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, true, false, false, false>;
  "phone": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "status": $.PropertyDesc<_User.$Status, $.Cardinality.One, false, false, false, true>;
  "timezone": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, true>;
  "title": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "education": $.LinkDesc<_User.$Education, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user[is Notification::Recipient]": $.LinkDesc<_Notification.$Recipient, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user[is Project::Member]": $.LinkDesc<_Project.$Member, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user[is Auth::Identity]": $.LinkDesc<_Auth.$Identity, $.Cardinality.AtMostOne, {}, true, false,  false, false>;
  "<user[is Auth::Session]": $.LinkDesc<_Auth.$Session, $.Cardinality.Many, {}, false, false,  false, false>;
  "<intern[is InternshipEngagement]": $.LinkDesc<$InternshipEngagement, $.Cardinality.Many, {}, false, false,  false, false>;
  "<mentor[is InternshipEngagement]": $.LinkDesc<$InternshipEngagement, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user[is Project::FinancialApprover]": $.LinkDesc<_Project.$FinancialApprover, $.Cardinality.AtMostOne, {}, true, false,  false, false>;
  "<director[is FieldRegion]": $.LinkDesc<$FieldRegion, $.Cardinality.Many, {}, false, false,  false, false>;
  "<director[is FieldZone]": $.LinkDesc<$FieldZone, $.Cardinality.Many, {}, false, false,  false, false>;
  "<pointOfContact[is Partner]": $.LinkDesc<$Partner, $.Cardinality.Many, {}, false, false,  false, false>;
  "<who[is ProgressReport::WorkflowEvent]": $.LinkDesc<_ProgressReport.$WorkflowEvent, $.Cardinality.Many, {}, false, false,  false, false>;
  "<director": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<intern": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<mentor": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<pointOfContact": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<who": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $User = $.ObjectType<"default::User", $UserλShape, null, [
  ..._Comments.$Aware['__exclusives__'],
  ...$Resource['__exclusives__'],
  ...$Actor['__exclusives__'],
  ..._Mixin.$Pinnable['__exclusives__'],
  {email: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
], "default::User" | "default::currentUser">;
const $User = $.makeType<$User>(_.spec, "08b3c4da-0670-11f0-97ce-2bd5246e5c57", _.syntax.literal);

const User: $.$expr_PathNode<$.TypeSet<$User, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($User, $.Cardinality.Many), null);

export type $currentActorλShape = $.typeutil.flatten<$ActorλShape & {
}>;
type $currentActor = $.ObjectType<"default::currentActor", $currentActorλShape, null, [
  ...$Actor['__exclusives__'],
], "default::currentActor">;
const $currentActor = $.makeType<$currentActor>(_.spec, "077f59d0-0670-11f0-adc2-b1bd32752ccc", _.syntax.literal);

const currentActor: $.$expr_PathNode<$.TypeSet<$currentActor, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($currentActor, $.Cardinality.Many), null);

export type $currentUserλShape = $.typeutil.flatten<$UserλShape & {
}>;
type $currentUser = $.ObjectType<"default::currentUser", $currentUserλShape, null, [
  ...$User['__exclusives__'],
], "default::currentUser">;
const $currentUser = $.makeType<$currentUser>(_.spec, "08c3a468-0670-11f0-9b87-0d1c53ae4240", _.syntax.literal);

const currentUser: $.$expr_PathNode<$.TypeSet<$currentUser, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($currentUser, $.Cardinality.Many), null);

type date_range_get_upperλFuncExpr<
  P1 extends $.TypeSet<$.RangeType<_cal.$local_date>>,
> = $.$expr_Function<
  _cal.$local_date, $.cardutil.paramCardinality<P1>
>;
function date_range_get_upper<
  P1 extends $.TypeSet<$.RangeType<_cal.$local_date>>,
>(
  period: P1,
): date_range_get_upperλFuncExpr<P1>;
function date_range_get_upper(...args: any[]) {
  const {returnType, cardinality, args: positionalArgs, namedArgs} = _.syntax.$resolveOverload('default::date_range_get_upper', args, _.spec, [
    {args: [{typeId: "1e76d7c5-b67c-542c-bc8f-238b93ff1726", optional: false, setoftype: false, variadic: false}], returnTypeId: "00000000-0000-0000-0000-00000000010c"},
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "default::date_range_get_upper",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
};

type hydrateλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$json>>,
> = $.$expr_Function<
  _std.$str, $.cardutil.multiplyCardinalities<$.cardutil.paramCardinality<P1>, $.cardutil.paramCardinality<P2>>
>;
function hydrate<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
  P2 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$json>>,
>(
  typeName: P1,
  scopedValue: P2,
): hydrateλFuncExpr<P1, P2>;
function hydrate(...args: any[]) {
  const {returnType, cardinality, args: positionalArgs, namedArgs} = _.syntax.$resolveOverload('default::hydrate', args, _.spec, [
    {args: [{typeId: "00000000-0000-0000-0000-000000000101", optional: false, setoftype: false, variadic: false}, {typeId: "00000000-0000-0000-0000-00000000010f", optional: false, setoftype: false, variadic: false}], returnTypeId: "00000000-0000-0000-0000-000000000101"},
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "default::hydrate",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
};

type str_cleanλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
> = $.$expr_Function<
  _std.$str, $.cardutil.overrideLowerBound<$.cardutil.paramCardinality<P1>, "Zero">
>;
function str_clean<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
>(
  string: P1,
): str_cleanλFuncExpr<P1>;
function str_clean(...args: any[]) {
  const {returnType, cardinality, args: positionalArgs, namedArgs} = _.syntax.$resolveOverload('default::str_clean', args, _.spec, [
    {args: [{typeId: "00000000-0000-0000-0000-000000000101", optional: false, setoftype: false, variadic: false}], returnTypeId: "00000000-0000-0000-0000-000000000101", returnTypemod: "OptionalType"},
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "default::str_clean",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
};

type str_sortableλFuncExpr<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
> = $.$expr_Function<
  _std.$str, $.cardutil.paramCardinality<P1>
>;
function str_sortable<
  P1 extends _.castMaps.orScalarLiteral<$.TypeSet<_std.$str>>,
>(
  value: P1,
): str_sortableλFuncExpr<P1>;
function str_sortable(...args: any[]) {
  const {returnType, cardinality, args: positionalArgs, namedArgs} = _.syntax.$resolveOverload('default::str_sortable', args, _.spec, [
    {args: [{typeId: "00000000-0000-0000-0000-000000000101", optional: false, setoftype: false, variadic: false}], returnTypeId: "00000000-0000-0000-0000-000000000101"},
  ]);
  return _.syntax.$expressionify({
    __kind__: $.ExpressionKind.Function,
    __element__: returnType,
    __cardinality__: cardinality,
    __name__: "default::str_sortable",
    __args__: positionalArgs,
    __namedargs__: namedArgs,
  }) as any;
};

const $default__globals: {  currentActor: _.syntax.$expr_Global<
              // "default::currentActor",
              $currentActor,
              $.Cardinality.AtMostOne
              >,  currentActorId: _.syntax.$expr_Global<
              // "default::currentActorId",
              _std.$uuid,
              $.Cardinality.AtMostOne
              >,  currentRoles: _.syntax.$expr_Global<
              // "default::currentRoles",
              $currentRoles,
              $.Cardinality.Many
              >,  currentUser: _.syntax.$expr_Global<
              // "default::currentUser",
              $currentUser,
              $.Cardinality.AtMostOne
              >} = {  currentActor: _.syntax.makeGlobal(
              "default::currentActor",
              $.makeType(_.spec, "077f59d0-0670-11f0-adc2-b1bd32752ccc", _.syntax.literal),
              $.Cardinality.AtMostOne) as any,  currentActorId: _.syntax.makeGlobal(
              "default::currentActorId",
              $.makeType(_.spec, "00000000-0000-0000-0000-000000000100", _.syntax.literal),
              $.Cardinality.AtMostOne) as any,  currentRoles: _.syntax.makeGlobal(
              "default::currentRoles",
              $.makeType(_.spec, "085ef888-0670-11f0-ae37-e59eb9ccaa00", _.syntax.literal),
              $.Cardinality.Many) as any,  currentUser: _.syntax.makeGlobal(
              "default::currentUser",
              $.makeType(_.spec, "08c3a468-0670-11f0-9b87-0d1c53ae4240", _.syntax.literal),
              $.Cardinality.AtMostOne) as any};



export { ReportPeriod, RichText, Role, Sensitivity, Sens, currentRoles, nanoid, population, $Resource, Resource, $Media, Media, $Notification, Notification, $Actor, Actor, $Alias, Alias, $Budget, Budget, $Product, Product, $DerivativeScriptureProduct, DerivativeScriptureProduct, $DirectScriptureProduct, DirectScriptureProduct, $Directory, Directory, $Engagement, Engagement, $Producible, Producible, $EthnoArt, EthnoArt, $FieldRegion, FieldRegion, $FieldZone, FieldZone, $File, File, $Film, Film, $PeriodicReport, PeriodicReport, $FinancialReport, FinancialReport, $FundingAccount, FundingAccount, $InternshipEngagement, InternshipEngagement, $Project, Project, $InternshipProject, InternshipProject, $Language, Language, $LanguageEngagement, LanguageEngagement, $Location, Location, $TranslationProject, TranslationProject, $MomentumTranslationProject, MomentumTranslationProject, $MultiplicationTranslationProject, MultiplicationTranslationProject, $NarrativeReport, NarrativeReport, $Organization, Organization, $OtherProduct, OtherProduct, $Partner, Partner, $Partnership, Partnership, $Post, Post, $ProgressReport, ProgressReport, $Story, Story, $SystemAgent, SystemAgent, $User, User, $currentActor, currentActor, $currentUser, currentUser };

type __defaultExports = {
  "ReportPeriod": typeof ReportPeriod;
  "RichText": typeof RichText;
  "Role": typeof Role;
  "Sensitivity": typeof Sensitivity;
  "Sens": typeof Sens;
  "currentRoles": typeof currentRoles;
  "nanoid": typeof nanoid;
  "population": typeof population;
  "Resource": typeof Resource;
  "Media": typeof Media;
  "Notification": typeof Notification;
  "Actor": typeof Actor;
  "Alias": typeof Alias;
  "Budget": typeof Budget;
  "Product": typeof Product;
  "DerivativeScriptureProduct": typeof DerivativeScriptureProduct;
  "DirectScriptureProduct": typeof DirectScriptureProduct;
  "Directory": typeof Directory;
  "Engagement": typeof Engagement;
  "Producible": typeof Producible;
  "EthnoArt": typeof EthnoArt;
  "FieldRegion": typeof FieldRegion;
  "FieldZone": typeof FieldZone;
  "File": typeof File;
  "Film": typeof Film;
  "PeriodicReport": typeof PeriodicReport;
  "FinancialReport": typeof FinancialReport;
  "FundingAccount": typeof FundingAccount;
  "InternshipEngagement": typeof InternshipEngagement;
  "Project": typeof Project;
  "InternshipProject": typeof InternshipProject;
  "Language": typeof Language;
  "LanguageEngagement": typeof LanguageEngagement;
  "Location": typeof Location;
  "TranslationProject": typeof TranslationProject;
  "MomentumTranslationProject": typeof MomentumTranslationProject;
  "MultiplicationTranslationProject": typeof MultiplicationTranslationProject;
  "NarrativeReport": typeof NarrativeReport;
  "Organization": typeof Organization;
  "OtherProduct": typeof OtherProduct;
  "Partner": typeof Partner;
  "Partnership": typeof Partnership;
  "Post": typeof Post;
  "ProgressReport": typeof ProgressReport;
  "Story": typeof Story;
  "SystemAgent": typeof SystemAgent;
  "User": typeof User;
  "currentActor": typeof currentActor;
  "currentUser": typeof currentUser;
  "date_range_get_upper": typeof date_range_get_upper;
  "hydrate": typeof hydrate;
  "str_clean": typeof str_clean;
  "str_sortable": typeof str_sortable;
  "global": typeof $default__globals
};
const __defaultExports: __defaultExports = {
  "ReportPeriod": ReportPeriod,
  "RichText": RichText,
  "Role": Role,
  "Sensitivity": Sensitivity,
  "Sens": Sens,
  "currentRoles": currentRoles,
  "nanoid": nanoid,
  "population": population,
  "Resource": Resource,
  "Media": Media,
  "Notification": Notification,
  "Actor": Actor,
  "Alias": Alias,
  "Budget": Budget,
  "Product": Product,
  "DerivativeScriptureProduct": DerivativeScriptureProduct,
  "DirectScriptureProduct": DirectScriptureProduct,
  "Directory": Directory,
  "Engagement": Engagement,
  "Producible": Producible,
  "EthnoArt": EthnoArt,
  "FieldRegion": FieldRegion,
  "FieldZone": FieldZone,
  "File": File,
  "Film": Film,
  "PeriodicReport": PeriodicReport,
  "FinancialReport": FinancialReport,
  "FundingAccount": FundingAccount,
  "InternshipEngagement": InternshipEngagement,
  "Project": Project,
  "InternshipProject": InternshipProject,
  "Language": Language,
  "LanguageEngagement": LanguageEngagement,
  "Location": Location,
  "TranslationProject": TranslationProject,
  "MomentumTranslationProject": MomentumTranslationProject,
  "MultiplicationTranslationProject": MultiplicationTranslationProject,
  "NarrativeReport": NarrativeReport,
  "Organization": Organization,
  "OtherProduct": OtherProduct,
  "Partner": Partner,
  "Partnership": Partnership,
  "Post": Post,
  "ProgressReport": ProgressReport,
  "Story": Story,
  "SystemAgent": SystemAgent,
  "User": User,
  "currentActor": currentActor,
  "currentUser": currentUser,
  "date_range_get_upper": date_range_get_upper,
  "hydrate": hydrate,
  "str_clean": str_clean,
  "str_sortable": str_sortable,
  "global": $default__globals
};
export default __defaultExports;

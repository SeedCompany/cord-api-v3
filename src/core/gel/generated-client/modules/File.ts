// GENERATED by @gel/generate v0.6.2

import * as $ from "../reflection";
import * as _ from "../imports";
import type * as _default from "./default";
import type * as _Mixin from "./Mixin";
import type * as _std from "./std";
import type * as _Media from "./Media";
export type $NodeλShape = $.typeutil.flatten<_default.$ResourceλShape & _Mixin.$NamedλShape & {
  "parent": $.LinkDesc<$Node, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "parents": $.LinkDesc<$Node, $.Cardinality.Many, {
    "@depth": $.PropertyDesc<_std.$int16, $.Cardinality.AtMostOne>;
  }, false, false, false, false>;
  "public": $.PropertyDesc<_std.$bool, $.Cardinality.AtMostOne, false, false, false, false>;
  "size": $.PropertyDesc<_std.$int64, $.Cardinality.One, false, false, false, false>;
  "<parent[is File::Node]": $.LinkDesc<$Node, $.Cardinality.Many, {}, false, false,  false, false>;
  "<parents[is File::Node]": $.LinkDesc<$Node, $.Cardinality.Many, {}, false, false,  false, false>;
  "<parents[is File::Version]": $.LinkDesc<$Version, $.Cardinality.Many, {}, false, false,  false, false>;
  "<parent[is File::Version]": $.LinkDesc<$Version, $.Cardinality.Many, {}, false, false,  false, false>;
  "<parents[is Directory]": $.LinkDesc<_default.$Directory, $.Cardinality.Many, {}, false, false,  false, false>;
  "<parent[is Directory]": $.LinkDesc<_default.$Directory, $.Cardinality.Many, {}, false, false,  false, false>;
  "<parents[is File]": $.LinkDesc<_default.$File, $.Cardinality.Many, {}, false, false,  false, false>;
  "<parent[is File]": $.LinkDesc<_default.$File, $.Cardinality.Many, {}, false, false,  false, false>;
  "<parent": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<parents": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Node = $.ObjectType<"File::Node", $NodeλShape, null, [
  ..._default.$Resource['__exclusives__'],
  ..._Mixin.$Named['__exclusives__'],
], "File::Version" | "default::Directory" | "default::File">;
const $Node = $.makeType<$Node>(_.spec, "0826a334-0670-11f0-af13-6d516e47ab6e", _.syntax.literal);

const Node: $.$expr_PathNode<$.TypeSet<$Node, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Node, $.Cardinality.Many), null);

export type $VersionλShape = $.typeutil.flatten<$NodeλShape & {
  "mimeType": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "<latestVersion[is File]": $.LinkDesc<_default.$File, $.Cardinality.Many, {}, false, false,  false, false>;
  "<file[is Media]": $.LinkDesc<_default.$Media, $.Cardinality.AtMostOne, {}, true, false,  false, false>;
  "<file[is Media::Temporal]": $.LinkDesc<_Media.$Temporal, $.Cardinality.AtMostOne, {}, true, false,  false, false>;
  "<file[is Media::Audio]": $.LinkDesc<_Media.$Audio, $.Cardinality.AtMostOne, {}, true, false,  false, false>;
  "<file[is Media::Visual]": $.LinkDesc<_Media.$Visual, $.Cardinality.AtMostOne, {}, true, false,  false, false>;
  "<file[is Media::Image]": $.LinkDesc<_Media.$Image, $.Cardinality.AtMostOne, {}, true, false,  false, false>;
  "<file[is Media::Video]": $.LinkDesc<_Media.$Video, $.Cardinality.AtMostOne, {}, true, false,  false, false>;
  "<file": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<latestVersion": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Version = $.ObjectType<"File::Version", $VersionλShape, null, [
  ...$Node['__exclusives__'],
], "File::Version">;
const $Version = $.makeType<$Version>(_.spec, "0836b88c-0670-11f0-a143-a5a5c5fac9b6", _.syntax.literal);

const Version: $.$expr_PathNode<$.TypeSet<$Version, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Version, $.Cardinality.Many), null);



export { $Node, Node, $Version, Version };

type __defaultExports = {
  "Node": typeof Node;
  "Version": typeof Version
};
const __defaultExports: __defaultExports = {
  "Node": Node,
  "Version": Version
};
export default __defaultExports;

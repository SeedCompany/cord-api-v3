diff --git a/dist/graphql.module.js b/dist/graphql.module.js
index b73e0f271d9312612e62fb7e275097b1ea470035..583f4e0e4126a8bfe998f203ae366d14bf3cd9f1 100644
--- a/dist/graphql.module.js
+++ b/dist/graphql.module.js
@@ -85,9 +85,6 @@ let GraphQLModule = GraphQLModule_1 = class GraphQLModule {
             return;
         }
         const httpAdapter = this.httpAdapterHost.httpAdapter;
-        if (!httpAdapter) {
-            return;
-        }
         const typeDefs = (await this.graphqlTypesLoader.mergeTypesByPaths(this.options.typePaths)) || [];
         const mergedTypeDefs = (0, utils_1.extend)(typeDefs, this.options.typeDefs);
         const apolloOptions = await this.graphqlFactory.mergeOptions({
@@ -98,6 +95,9 @@ let GraphQLModule = GraphQLModule_1 = class GraphQLModule {
         if (this.options.definitions && this.options.definitions.path) {
             await this.graphqlFactory.generateDefinitions((0, graphql_1.printSchema)(apolloOptions.schema), this.options);
         }
+        if (!httpAdapter) {
+            return;
+        }
         await this.registerGqlServer(apolloOptions);
         if (this.options.installSubscriptionHandlers ||
             this.options.subscriptions) {
diff --git a/dist/schema-builder/storages/type-metadata.storage.js b/dist/schema-builder/storages/type-metadata.storage.js
index 9448062282f762413aed6e33c475065e2d8db2c9..4f4abc1dd234aac07cf2ddb6bab674985c21105d 100644
--- a/dist/schema-builder/storages/type-metadata.storage.js
+++ b/dist/schema-builder/storages/type-metadata.storage.js
@@ -6,6 +6,7 @@ const field_decorator_1 = require("../../decorators/field.decorator");
 const plugin_constants_1 = require("../../plugin/plugin-constants");
 const cannot_determine_host_type_error_1 = require("../errors/cannot-determine-host-type.error");
 const undefined_type_error_1 = require("../errors/undefined-type.error");
+const get_interfaces_array_util_1 = require("../utils/get-interfaces-array.util");
 const is_target_equal_util_1 = require("../utils/is-target-equal-util");
 const is_throwing_util_1 = require("../utils/is-throwing.util");
 class TypeMetadataStorageHost {
@@ -282,6 +283,9 @@ class TypeMetadataStorageHost {
             };
             this.addClassFieldMetadata(fieldMetadata);
             objectOrInterfaceTypeMetadata.properties.push(fieldMetadata);
+            // Add field to other interfaces implementing this interface
+            this.interfaces.filter(i => get_interfaces_array_util_1.getInterfacesArray(i.interfaces).includes(objectTypeRef))
+              .forEach(i => i.properties.push(fieldMetadata));
         }
         else {
             const isEmpty = (arr) => arr.length === 0;
